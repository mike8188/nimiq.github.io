{"version":3,"sources":["Class.js","LogNative.js","Log.js","IWorker.js","CryptoUtils.js","CryptoWorker.js","CryptoWorkerImpl.js","BigNumber.js","NumberUtils.js","BufferUtils.js","SerialBuffer.js","MinerWorker.js","MinerWorkerImpl.js","MinerWorkerPool.js","PlatformUtils.js","WasmHelper.js","GenesisConfig.js","ArrayUtils.js","Assert.js","MerkleTree.js","MerklePath.js","Policy.js","Serializable.js","Hash.js","PublicKey.js","Signature.js","Address.js","Account.js","PrunedAccount.js","BasicAccount.js","Contract.js","HashedTimeLockedContract.js","VestingContract.js","BlockHeader.js","BlockInterlink.js","BlockBody.js","BlockUtils.js","Block.js","Transaction.js","SignatureProof.js","BasicTransaction.js","ExtendedTransaction.js"],"names":["Class","scope","exports","self","window","[object Object]","cls","name","register","LogNative","this","_global_level","Log","INFO","_tag_levels","localStorage","c","getItem","JSON","parse","e","console","warn","tag","level","setItem","stringify","args","isLoggable","unshift","Level","toStringTag","Date","toTimeString","substr","error","ERROR","apply","WARNING","info","debug","DEBUG","trace","TRACE","log","instance","_instance","native","_native","setLoggable","get","l","i","length","toString","constructor","msg","message","arguments","Array","prototype","slice","call","undefined","VERBOSE","ASSERT","v","isNaN","parseInt","toLowerCase","d","bind","w","t","IWorker","clazz","worker","Proxy","workerScript","_workersSupported","Nimiq","_path","createProxy","Worker","URL","createObjectURL","Blob","replace","_workerImplementation","init","size","Pool","startWorkerForProxy","start","data","command","res","postMessage","status","result","id","areWorkersAsync","_insideWebWorker","WorkerGlobalScope","_global","global","baseClazz","impl","onmessage","stubBaseOnMessage","url","resolve","head","document","getElementsByTagName","script","createElement","type","src","ret","setTimeout","onreadystatechange","onload","appendChild","proxyClass","super","_name","_messageId","_worker","_receive","_waiting","Map","_invoke","then","cb","delete","WorkerProxy","Promise","obj","set","funcName","Object","getOwnPropertyNames","Stub","finalRes","_result","_onmessage","close","poolClass","proxyInitializer","_proxyInitializer","_poolSize","_workers","_freeWorkers","_waitingCalls","_updateToSize","poolSize","_size","catch","push","shift","_step","indexOf","destroy","workerPromises","createdWorkers","all","pop","idx","splice","_moduleLoadedCallbacks","CryptoUtils","key","SHA512_BLOCK_SIZE","SerialBuffer","Hash","computeSha512","iKey","oKey","byte","innerHash","BufferUtils","concatTypedArrays","password","salt","iterations","derivedKeyLength","hashLength","SIZE","Algorithm","SHA512","Math","pow","Error","ceil","r","derivedKey","u","write","writeUint32","computeHmacSha512","j","k","CryptoWorker","getInstanceAsync","kdfLegacy","byteLength","xor","kdf","lib","CryptoLib","_workerAsync","startWorkerPoolForProxy","input","inputs","outputSize","block","transactionValid","timeNow","genesisHash","networkId","CryptoWorkerImpl","_superInit","PlatformUtils","isBrowser","WasmHelper","doImportBrowser","isNodeJs","out","Uint8Array","getSize","ARGON2D","NodeNative","node_argon2","stackPtr","Module","stackSave","hashSize","wasmOut","stackAlloc","wasmIn","HEAPU8","buffer","_nimiq_argon2","hash","stackRestore","hashes","stackTmp","node_kdf_legacy","wasmSalt","_nimiq_kdf_legacy","node_kdf","_nimiq_kdf","blockSerialized","GenesisConfig","GENESIS_HASH","unserialize","NETWORK_ID","Block","body","transactions","_valid","valid","_verify","header","interlinkHash","interlink","bodyHash","serialize","prepareForWorkerUse","globalObject","BigNumber","isNumeric","mathceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","n","coeffToString","a","s","z","charCodeAt","compare","x","y","b","xc","yc","intCheck","min","max","isArray","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","alphabet","isNum","test","round","search","substring","format","rm","c0","ne","maxOrMin","method","m","normalise","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","lt","minimum","gt","random","dp","rand","Uint32Array","copy","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","equals","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","NumberUtils","val","Number","UINT8_MAX","UINT16_MAX","UINT32_MAX","UINT64_MAX","bin","buf","_toUint8View","ascii","String","fromCharCode","subarray","string","TextDecoder","_ISO_8859_15_DECODER","uint8View","decode","num","_BASE64_LOOKUP","u8","end","tmp","output","_tripletToBase64","join","extraBytes","parts","len2","_base64encodeChunk","Buffer","from","btoa","_codePointTextDecoder","_base64fromByteArray","base64","atob","toBase64","BASE32_ALPHABET","NIMIQ","symbol","base32","charmap","toUpperCase","forEach","char","hex","code","HEX_ALPHABET","trim","StringUtils","isHexBytes","match","lpad","TextEncoder","_UTF8_ENCODER","encode","_utf8TextEncoder","_strToUint8Array","viewA","viewB","arrayLike","ArrayBuffer","BASE64_ALPHABET","RFC4648","RFC4648_HEX","bufferOrArrayOrLength","_view","DataView","_readPos","_writePos","ArrayUtils","readPos","value","writePos","array","getUint8","setUint8","getUint16","setUint16","getUint32","setUint32","isUint64","readUint8","readUint16","readUint32","readUint64","writeUint8","writeUint16","writeUint64","getFloat64","setFloat64","bytes","read","toAscii","isMultibyte","fromAscii","view","byteOffset","padding","isUint8","MinerWorker","blockHeader","compact","minNonce","maxNonce","MinerWorkerImpl","_malloc","nonce","_nimiq_argon2_target","_free","MinerWorkerPool","_miningEnabled","_activeNonces","_block","_noncesPerRun","_observable","Observable","_shareCompact","Policy","BLOCK_TARGET_MAX","_runsPerCycle","Infinity","_cycleWait","_superUpdateToSize","cpuSupport","multiMine","fail","node_argon2_target_async","async","computeArgon2d","noncesPerRun","nonces","runsPerCycle","cycleWait","callback","on","off","shareCompact","nBits","_startMiner","map","nonceRange","_singleMiner","fire","newMin","newRange","RTCPeerConnection","webkitRTCPeerConnection","location","protocol","navigator","onLine","platform","userAgentString","hardwareConcurrency","_importBrowserPromise","importWasmBrowser","importScriptBrowser","wasm","module","_adjustWasmPath","WebAssembly","xhr","XMLHttpRequest","open","responseType","wasmBinary","response","onerror","send","asm","_adjustScriptPath","moduleSettings","reject","onRuntimeInitialized","importScripts","_loadBrowserScript","require","__dirname","uintarr","begin","clamp","list","indices","reverseRange","found","Assert","condition","MerkleTree","values","fnHash","_hash","_computeRoot","light","mid","left","right","leftHash","rightHash","o","MerklePath","nodes","some","it","MerklePathNode","_nodes","leafValue","leafHash","path","_compute","containsLeaf","inner","leftLeaf","rightLeaf","root","node","serializedSize","count","leftBitsSize","leftBits","_compress","reduce","sum","every","_left","coins","LUNAS_PER_COIN","lunas","coinsToLunas","satoshis","lunasToCoins","SATOSHIS_PER_COIN","blockHeight","startHeight","_supplyCacheInterval","startI","_supplyCacheMax","endI","supply","INITIAL_SUPPLY","_supplyCache","endHeight","_supplyAfter","initialSupply","_blockRewardAt","currentSupply","supplyAfter","remaining","TOTAL_SUPPLY","EMISSION_TAIL_START","EMISSION_TAIL_REWARD","EMISSION_SPEED","BLOCK_TIME","BLOCK_SIZE_MAX","DIFFICULTY_BLOCK_WINDOW","DIFFICULTY_MAX_ADJUSTMENT_FACTOR","TRANSACTION_VALIDITY_WINDOW","M","K","DELTA","NUM_BLOCKS_VERIFICATION","NUM_SNAPSHOTS_MAX","Serializable","toHex","arg","algorithm","BLAKE2B","_obj","_algorithm","blake2b","computeBlake2b","argon2d","computeSha256","SHA256","sha256","fromBase64","fromHex","node_blake2","_nimiq_blake2","node_sha256","_nimiq_sha256","node_sha512","_nimiq_sha512","NULL","PublicKey","privateKey","_publicKeyDerive","publicKeys","sort","_delinearizeAndAggregatePublicKeys","Address","fromHash","PeerId","publicKeysObj","publicKeysHash","_publicKeysHash","raw","_publicKeysDelinearizeAndAggregate","PrivateKey","node_ed25519_public_key_derive","pubKeyBuffer","HEAP8","privKeyBuffer","_ed25519_public_key_derive","fill","publicKey","concatenatedPublicKeys","node_ed25519_hash_public_keys","wasmInPublicKeys","_ed25519_hash_public_keys","hashedPublicKey","node_ed25519_delinearize_public_key","wasmInPublicKey","wasmInPublicKeysHash","_ed25519_delinearize_public_key","delinearizedPublicKey","node_ed25519_aggregate_delinearized_public_keys","_ed25519_aggregate_delinearized_public_keys","aggregatePublicKey","Signature","_signatureCreate","commitment","signatures","_combinePartialSignatures","_signatureVerify","combinedCommitment","partialSignatures","combinedSignature","_aggregatePartialSignatures","sigA","sigB","_scalarsAdd","PartialSignature","node_ed25519_add_scalars","wasmOutSum","wasmInA","wasmInB","_ed25519_add_scalars","node_ed25519_sign","wasmOutSignature","signatureBuffer","wasmInMessage","wasmInPubKey","wasmInPrivKey","_ed25519_sign","signature","node_ed25519_verify","wasmInSignature","_ed25519_verify","SERIALIZED_SIZE","fromUserFriendlyAddress","CCODE","_ibanCheck","fromBase32","withSpaces","toBase32","check","HEX_SIZE","CONTRACT_CREATION","Account","balance","_type","_balance","TYPE_MAP","has","transaction","transactionsCache","revert","validityStartHeight","withBalance","fee","newBalance","containsTransaction","INITIAL","isInitial","Type","BASIC","VESTING","HTLC","PrunedAccount","address","account","_address","_account","hashCode","BasicAccount","SignatureProof","verifyTransaction","hasFlag","Transaction","Flag","recipientType","withIncomingTransaction","create","Contract","recipient","getContractCreationAddress","HashedTimeLockedContract","sender","hashRoot","hashCount","timeout","totalAmount","isUint32","_sender","_recipient","_hashRoot","_hashCount","_timeout","_totalAmount","hashAlgorithm","toUserFriendlyAddress","proof","ProofType","REGULAR_TRANSFER","hashDepth","preImage","compute","verify","serializeContent","EARLY_RESOLVE","TIMEOUT_RESOLVE","verifyIncomingTransaction","minCap","isSignedBy","withOutgoingTransaction","VestingContract","owner","vestingStart","vestingStepBlocks","vestingStepAmount","vestingTotalAmount","_owner","_vestingStart","_vestingStepBlocks","_vestingStepAmount","_vestingTotalAmount","getMinCap","BlockHeader","prevHash","accountsHash","height","timestamp","version","CURRENT_VERSION","isUint16","isHash","BlockUtils","isValidCompact","_version","_prevHash","_interlinkHash","_bodyHash","_accountsHash","_nBits","_height","_timestamp","_nonce","SUPPORTED_VERSIONS","includes","isProofOfWork","target","prevHeader","_pow","hard","compactToTarget","difficulty","compactToDifficulty","Version","V1","BlockInterlink","repeatBitsSize","repeatBits","lastHash","compressed","_hashes","_repeatBits","_compressed","computeRoot","BlockBody","extraData","minerAddr","prunedAccounts","_minerAddr","_extraData","_transactions","_prunedAccounts","extraDataLength","numTransactions","numPrunedAccounts","tx","acc","previousTx","compareBlockOrder","previousAcc","isToBePruned","getMerkleLeafs","addresses","transactionCount","log2","getTargetHeight","targetToCompact","difficultyToTarget","targetToDifficulty","hashToTarget","getTargetDepth","isValidTarget","headBlock","tailBlock","deltaTotalDifficulty","that","actualTime","adjustment","averageDifficulty","nextTarget","_header","_interlink","_body","time","isLight","now","blockVerify","TIMESTAMP_DRIFT_MAX","verifyProofOfWork","_verifyInterlink","isFull","_verifyBody","predecessor","isImmediateSuccessorOf","getNextInterlink","prevPow","targetHeight","blockFound","depth","HashSet","addAll","removeAll","depthDiff","commonBlock","thisInterlink","prevInterlink","isInterlinkSuccessorOf","nextVersion","thisPowDepth","getHashDepth","nextTargetDepth","numOccurrences","senderType","flags","_format","_senderType","_recipientType","_value","_fee","_networkId","_validityStartHeight","_flags","_data","_proof","FORMAT_MAP","serializedContentSize","verifyOutgoingTransaction","recCompare","senderCompare","feePerByte","flag","Format","EXTENDED","NONE","ALL","signerKey","merklePath","_publicKey","_merklePath","_signature","merkleRoot","BasicTransaction","senderPubKey","singleSig","toAddress","_signatureProof","ExtendedTransaction","dataSize","proofSize"],"mappings":"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","file":"worker.js","sourcesContent":["class Class {\n    static get scope() {\n        if (typeof exports !== 'undefined') return exports;\n        if (typeof self !== 'undefined') return self;\n        return window;\n    }\n\n    static register(cls) {\n        if (typeof exports !== 'undefined') exports[cls.name] = cls;\n    }\n}\nClass.register(Class);\n","class LogNative {\n    constructor() {\n        this._global_level = Log.INFO;\n        this._tag_levels = {};\n        try {\n            if (window.localStorage) {\n                try {\n                    let c = window.localStorage.getItem('log_tag_levels');\n                    if (c && typeof c === 'string') c = JSON.parse(c);\n                    if (c && typeof c === 'object') this._tag_levels = c;\n                } catch (e) {\n                    console.warn('Failed to load log configuration from local storage.');\n                }\n            }\n        } catch (e) {\n            // ignore\n        }\n    }\n\n    isLoggable(tag, level) {\n        if (tag && this._tag_levels[tag]) {\n            return this._tag_levels[tag] <= level;\n        }\n        if (this._tag_levels['*']) {\n            return this._tag_levels['*'] <= level;\n        }\n        return this._global_level <= level;\n    }\n\n    setLoggable(tag, level) {\n        if (tag && tag.name) tag = tag.name;\n        this._tag_levels[tag] = level;\n        if (window.localStorage) {\n            window.localStorage.setItem('log_tag_levels', JSON.stringify(this._tag_levels));\n        }\n    }\n\n    msg(level, tag, args) {\n        if (tag && tag.name) tag = tag.name;\n        if (!this.isLoggable(tag, level)) return;\n        if (tag) args.unshift(tag + ':');\n        args.unshift(`[${Log.Level.toStringTag(level)} ${new Date().toTimeString().substr(0, 8)}]`);\n        if (console.error && level >= Log.ERROR) {\n            console.error.apply(console, args);\n        } else if (console.warn && level >= Log.WARNING) {\n            console.warn.apply(console, args);\n        } else if (console.info && level >= Log.INFO) {\n            console.info.apply(console, args);\n        } else if (console.debug && level >= Log.DEBUG) {\n            console.debug.apply(console, args);\n        } else if (console.trace && level <= Log.TRACE) {\n            console.trace.apply(console, args);\n        } else {\n            console.log.apply(console, args);\n        }\n    }\n}\nClass.register(LogNative);\n","class Log {\n    /**\n     * @returns {Log}\n     */\n    static get instance() {\n        if (!Log._instance) {\n            Log._instance = new Log(new LogNative());\n        }\n        return Log._instance;\n    }\n\n    /**\n     * @param {LogNative} native\n     */\n    constructor(native) {\n        /** @type {LogNative} */\n        this._native = native;\n    }\n\n    /**\n     * @param {string} tag\n     * @param {Log.Level} level\n     */\n    setLoggable(tag, level) {\n        this._native.setLoggable(tag, Log.Level.get(level));\n    }\n\n    /** @type {Log.Level} */\n    get level() {\n        return this._native._global_level;\n    }\n\n    /** @type {Log.Level} */\n    set level(l) {\n        this._native._global_level = Log.Level.get(l);\n    }\n\n    /**\n     * @param {Log.Level} level\n     * @param {string|{name:string}} tag\n     * @param {Array} args\n     */\n    msg(level, tag, args) {\n        if (this._native.isLoggable(tag, level)) {\n            for (let i = 0; i < args.length; ++i) {\n                if (typeof args[i] === 'function') {\n                    args[i] = args[i]();\n                }\n                if (typeof args[i] === 'object') {\n                    if (typeof args[i].toString === 'function') {\n                        args[i] = args[i].toString();\n                    } else if (args[i].constructor && args[i].constructor.name) {\n                        args[i] = `{Object: ${args[i].constructor.name}}`;\n                    } else {\n                        args[i] = '{Object}';\n                    }\n                }\n            }\n            this._native.msg(level, tag, args);\n        }\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static d(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.DEBUG, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static e(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.ERROR, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static i(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.INFO, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static v(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.VERBOSE, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static w(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.WARNING, tag, args);\n    }\n\n    /**\n     * @param {?string|{name:string}} [tag=undefined]\n     * @param {string|function():string} message\n     * @param {...*} args\n     */\n    static t(tag, message, ...args) {\n        if (arguments.length >= 2) {\n            tag = arguments[0];\n            args = Array.prototype.slice.call(arguments, 1);\n        } else {\n            tag = undefined;\n            args = Array.prototype.slice.call(arguments, 0);\n        }\n        Log.instance.msg(Log.TRACE, tag, args);\n    }\n}\n\n/**\n * @enum {number|string}\n */\nLog.Level = {\n    TRACE: 1,\n    VERBOSE: 2,\n    DEBUG: 3,\n    INFO: 4,\n    WARNING: 5,\n    ERROR: 6,\n    ASSERT: 7,\n\n    /**\n     * @param {Log.Level} level\n     * @returns {string}\n     */\n    toStringTag: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'T';\n            case Log.Level.VERBOSE:\n                return 'V';\n            case Log.Level.DEBUG:\n                return 'D';\n            case Log.Level.INFO:\n                return 'I';\n            case Log.Level.WARNING:\n                return 'W';\n            case Log.Level.ERROR:\n                return 'E';\n            case Log.Level.ASSERT:\n                return 'A';\n            default:\n                return '*';\n        }\n    },\n\n    toString: function (level) {\n        switch (level) {\n            case Log.Level.TRACE:\n                return 'trace';\n            case Log.Level.VERBOSE:\n                return 'verbose';\n            case Log.Level.DEBUG:\n                return 'debug';\n            case Log.Level.INFO:\n                return 'info';\n            case Log.Level.WARNING:\n                return 'warn';\n            case Log.Level.ERROR:\n                return 'error';\n            case Log.Level.ASSERT:\n                return 'assert';\n            default:\n                return 'unknown';\n        }\n    },\n\n    /**\n     * @param {string|number|Log.Level} v\n     * @returns {Log.Level}\n     */\n    get: function (v) {\n        if (typeof v === 'number') return /** @type {Log.Level} */ v;\n        if (!isNaN(parseInt(v))) return /** @type {Log.Level} */ parseInt(v);\n        switch (v.toLowerCase()) {\n            case 't':\n            case 'trace':\n                return Log.Level.TRACE;\n            case 'v':\n            case 'verbose':\n                return Log.Level.VERBOSE;\n            case 'd':\n            case 'debug':\n                return Log.Level.DEBUG;\n            case 'i':\n            case 'info':\n                return Log.Level.INFO;\n            case 'w':\n            case 'warn':\n            case 'warning':\n                return Log.Level.WARNING;\n            case 'e':\n            case 'error':\n            case 'exception':\n                return Log.Level.ERROR;\n            case 'a':\n            case 'assert':\n            case 'assertion':\n                return Log.Level.ASSERT;\n        }\n        return /** @type {Log.Level} */ 0;\n    }\n};\nLog.TRACE = Log.Level.TRACE;\nLog.VERBOSE = Log.Level.VERBOSE;\nLog.DEBUG = Log.Level.DEBUG;\nLog.INFO = Log.Level.INFO;\nLog.WARNING = Log.Level.WARNING;\nLog.ERROR = Log.Level.ERROR;\nLog.ASSERT = Log.Level.ASSERT;\nLog._instance = null;\n\nLog.d.tag = (tag) => Log.d.bind(null, tag);\nLog.e.tag = (tag) => Log.e.bind(null, tag);\nLog.i.tag = (tag) => Log.i.bind(null, tag);\nLog.v.tag = (tag) => Log.v.bind(null, tag);\nLog.w.tag = (tag) => Log.w.bind(null, tag);\nLog.t.tag = (tag) => Log.t.bind(null, tag);\n\nClass.register(Log);\n","/**\n * @interface\n */\nclass IWorker {\n    static async createProxy(clazz, name, worker) {\n        return new (IWorker.Proxy(clazz))(worker, name);\n    }\n\n    static async startWorkerForProxy(clazz, name, workerScript) {\n        if (!IWorker._workersSupported) {\n            await IWorker._workerImplementation[clazz.name].init(name);\n            return IWorker._workerImplementation[clazz.name];\n        } else {\n            if (!workerScript) {\n                workerScript = `${Nimiq._path}worker.js`;\n            }\n            return IWorker.createProxy(clazz, name, new Worker(URL.createObjectURL(new Blob([`Nimiq = {_path: '${Nimiq._path}'}; importScripts('${workerScript.replace(/'/g, '')}');`]))));\n        }\n    }\n\n    static async startWorkerPoolForProxy(clazz, name, size, workerScript) {\n        return (new (IWorker.Pool(clazz))((name) => IWorker.startWorkerForProxy(clazz, name, workerScript), name, size)).start();\n    }\n\n    static async stubBaseOnMessage(msg) {\n        try {\n            if (msg.data.command === 'init') {\n                if (IWorker._workerImplementation[msg.data.args[0]]) {\n                    const res = await IWorker._workerImplementation[msg.data.args[0]].init(msg.data.args[1]);\n                    self.postMessage({status: 'OK', result: res, id: msg.data.id});\n                } else {\n                    self.postMessage({status: 'error', result: 'Unknown worker!', id: msg.data.id});\n                }\n            } else {\n                self.postMessage({status: 'error', result: 'Worker not yet initialized!', id: msg.data.id});\n            }\n        } catch (e) {\n            self.postMessage({status: 'error', result: e, id: msg.data.id});\n        }\n    }\n\n    static get _workersSupported() {\n        return typeof Worker !== 'undefined';\n    }\n\n    static get areWorkersAsync() {\n        return IWorker._workersSupported;\n    }\n\n    static get _insideWebWorker() {\n        return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n\n    static prepareForWorkerUse(baseClazz, impl) {\n        if (IWorker._insideWebWorker) {\n            // Only inside WebWorker\n            self.onmessage = IWorker.stubBaseOnMessage;\n        }\n        IWorker._workerImplementation = IWorker._workerImplementation || {};\n        IWorker._workerImplementation[baseClazz.name] = impl;\n    }\n\n    static _loadBrowserScript(url, resolve) {\n        // Adding the script tag to the head as suggested before\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n\n        // Then bind the event to the callback function.\n        // There are several events for cross browser compatibility.\n        // These events might occur before processing, so delay them a bit.\n        const ret = () => setTimeout(resolve, 100);\n        script.onreadystatechange = ret;\n        script.onload = ret;\n\n        // Fire the loading\n        head.appendChild(script);\n    }\n\n    static Proxy(clazz) {\n        const proxyClass = class extends clazz {\n            /**\n             * @param {Worker} worker\n             * @param {string} [name]\n             */\n            constructor(worker, name) {\n                super();\n                this._name = name;\n                this._messageId = 0;\n                this._worker = worker;\n                this._worker.onmessage = this._receive.bind(this);\n                /** @type {Map.<number,{resolve:Function,error:Function}>} */\n                this._waiting = new Map();\n                return this._invoke('init', [clazz.name, name]).then(() => { return this; });\n            }\n\n            _receive(msg) {\n                const cb = this._waiting.get(msg.data.id);\n                if (!cb) {\n                    Log.w(WorkerProxy, 'Unknown reply', msg);\n                } else {\n                    this._waiting.delete(msg.data.id);\n                    if (msg.data.status === 'OK') {\n                        cb.resolve(msg.data.result);\n                    } else if (msg.data.status === 'error') {\n                        cb.error(msg.data.result);\n                    }\n                }\n            }\n\n            /**\n             * @param {string} command\n             * @param {object[]} [args]\n             * @returns {Promise}\n             * @private\n             */\n            _invoke(command, args = []) {\n                return new Promise((resolve, error) => {\n                    const obj = {command: command, args: args, id: this._messageId++};\n                    this._waiting.set(obj.id, {resolve, error});\n                    this._worker.postMessage(obj);\n                });\n            }\n\n            destroy() {\n                return this._invoke('destroy');\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                proxyClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return proxyClass;\n    }\n\n    /**\n     * @param {object} clazz\n     * @return {Stub}\n     * @constructor\n     */\n    static Stub(clazz) {\n        const Stub = class extends clazz {\n            constructor() {\n                super();\n            }\n\n            _result(msg, status, result) {\n                self.postMessage({status, result, id: msg.data.id});\n            }\n\n            _onmessage(msg) {\n                try {\n                    const res = this._invoke(msg.data.command, msg.data.args);\n                    if (res instanceof Promise) {\n                        res.then((finalRes) => { this._result(msg, 'OK', finalRes); });\n                    } else {\n                        this._result(msg, 'OK', res);\n                    }\n                } catch (e) {\n                    this._result(msg, 'error', e.message || e);\n                }\n            }\n\n            init(name) {\n                this._name = name;\n                if (IWorker._insideWebWorker) {\n                    self.name = name;\n                    self.onmessage = (msg) => this._onmessage(msg);\n                }\n            }\n\n            _invoke(command, args) {\n                return this[command].apply(this, args);\n            }\n\n            destroy() {\n                if (IWorker._insideWebWorker) {\n                    self.close();\n                }\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                Stub.prototype[funcName] = function () {\n                    throw `Not implemented in IWorker Stub: ${funcName}`;\n                };\n            }\n        }\n        return Stub;\n    }\n\n    static Pool(clazz) {\n        const poolClass = class extends clazz {\n            /**\n             *\n             * @param {function(string):Promise} proxyInitializer\n             * @param {string} [name]\n             * @param {number} [size] Number of workers in this pool.\n             */\n            constructor(proxyInitializer, name = 'pool', size = 1) {\n                super();\n                /** @type {function(string):Promise} */\n                this._proxyInitializer = proxyInitializer;\n                /** @type {string} */\n                this._name = name;\n                /** @type {number} */\n                this._poolSize = size;\n                /** @type {Array} */\n                this._workers = [];\n                /** @type {Array} */\n                this._freeWorkers = [];\n                /** @type {Array.<{name:string, args:Array, resolve:function, error:function}>} */\n                this._waitingCalls = [];\n            }\n\n            async start() {\n                await this._updateToSize();\n\n                return this;\n            }\n\n            get poolSize() {\n                return this._poolSize;\n            }\n\n            set poolSize(_size) {\n                this._poolSize = _size;\n                this._updateToSize().catch(Log.w.tag(IWorker));\n            }\n\n            destroy() {\n                this._poolSize = 0;\n                return this._updateToSize();\n            }\n\n            /**\n             * @param {string} name Name of the function to call on a worker\n             * @param {Array} args Arguments to pass to the function\n             * @returns {Promise}\n             */\n            _invoke(name, args) {\n                if (IWorker._workersSupported) {\n                    return new Promise((resolve, error) => {\n                        this._waitingCalls.push({name, args, resolve, error});\n                        const worker = this._freeWorkers.shift();\n                        if (worker) {\n                            this._step(worker).catch(Log.w.tag(IWorker));\n                        }\n                    });\n                } else {\n                    return this._workers[0][name].apply(this._workers[0], args);\n                }\n            }\n\n            /**\n             * @param worker\n             * @returns {Promise.<void>}\n             * @private\n             */\n            async _step(worker) {\n                let call = this._waitingCalls.shift();\n                while (call) {\n                    try {\n                        // eslint-disable-next-line no-await-in-loop\n                        call.resolve(await worker[call.name].apply(worker, call.args));\n                    } catch (e) {\n                        call.error(e);\n                    }\n                    if (this._workers.indexOf(worker) === -1) {\n                        worker.destroy();\n                        return;\n                    }\n                    call = this._waitingCalls.shift();\n                }\n                this._freeWorkers.push(worker);\n            }\n\n            async _updateToSize() {\n                if (typeof Worker === 'undefined' && this._poolSize > 1) {\n                    Log.d(IWorker, 'Pool of size larger than 1 requires WebWorker support.');\n                    this._poolSize = 1;\n                }\n\n                const workerPromises = [];\n                while (this._workers.length + workerPromises.length < this._poolSize) {\n                    workerPromises.push(this._proxyInitializer(`${this._name}#${this._workers.length + workerPromises.length}`));\n                }\n                const createdWorkers = await Promise.all(workerPromises);\n                for (const worker of createdWorkers) {\n                    this._workers.push(worker);\n                    this._step(worker).catch(Log.w.tag(IWorker));\n                }\n\n                while (this._workers.length > this._poolSize) {\n                    const worker = this._freeWorkers.shift() || this._workers.pop();\n                    const idx = this._workers.indexOf(worker);\n                    if (idx >= 0) {\n                        // This was a free worker, also remove it from the worker list and destroy it now.\n                        this._workers.splice(idx, 1);\n                        worker.destroy();\n                    }\n                }\n                return this;\n            }\n        };\n        for (const funcName of Object.getOwnPropertyNames(clazz.prototype)) {\n            if (typeof clazz.prototype[funcName] === 'function' && funcName !== 'constructor') {\n                poolClass.prototype[funcName] = function (...args) {\n                    return this._invoke(funcName, args);\n                };\n            }\n        }\n        return poolClass;\n    }\n}\n\nIWorker._moduleLoadedCallbacks = {};\nIWorker._workerImplementation = {};\nClass.register(IWorker);\n","class CryptoUtils {\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} data\n     * @return {Uint8Array}\n     */\n    static computeHmacSha512(key, data) {\n        if (key.length > CryptoUtils.SHA512_BLOCK_SIZE) {\n            key = new SerialBuffer(Hash.computeSha512(key));\n        }\n\n        const iKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        const oKey = new SerialBuffer(CryptoUtils.SHA512_BLOCK_SIZE);\n        for (let i = 0; i < CryptoUtils.SHA512_BLOCK_SIZE; ++i) {\n            const byte = key[i] || 0;\n            iKey[i] = 0x36 ^ byte;\n            oKey[i] = 0x5c ^ byte;\n        }\n\n        const innerHash = Hash.computeSha512(BufferUtils.concatTypedArrays(iKey, data));\n        return Hash.computeSha512(BufferUtils.concatTypedArrays(oKey, innerHash));\n    }\n\n    /**\n     * @param {Uint8Array} password\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @param {number} derivedKeyLength\n     * @return {Uint8Array}\n     */\n    static computePBKDF2sha512(password, salt, iterations, derivedKeyLength) {\n        // Following https://www.ietf.org/rfc/rfc2898.txt\n        const hashLength = Hash.SIZE.get(Hash.Algorithm.SHA512);\n\n        if (derivedKeyLength > (Math.pow(2, 32) - 1) * hashLength) {\n            throw new Error('Derived key too long');\n        }\n\n        const l = Math.ceil(derivedKeyLength / hashLength);\n        const r = derivedKeyLength - (l - 1) * hashLength;\n\n        const derivedKey = new SerialBuffer(derivedKeyLength);\n        for (let i = 1; i <= l; i++) {\n            let u = new SerialBuffer(salt.length + 4);\n            u.write(salt);\n            u.writeUint32(i);\n\n            u = CryptoUtils.computeHmacSha512(password, u);\n            const t = u;\n            for (let j = 1; j < iterations; j++) {\n                u = CryptoUtils.computeHmacSha512(password, u);\n                for (let k = 0; k < t.length; k++) {\n                    t[k] ^= u[k];\n                }\n            }\n\n            if (i < l) {\n                derivedKey.write(t);\n            } else {\n                derivedKey.write(t.slice(0, r));\n            }\n        }\n        return derivedKey;\n    }\n\n    /**\n     * @param {Uint8Array} message\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @return {Promise.<Uint8Array>}\n     * @deprecated\n     */\n    static async otpKdfLegacy(message, key, salt, iterations) {\n        const worker = await CryptoWorker.getInstanceAsync();\n        const derivedKey = await worker.kdfLegacy(key, salt, iterations, message.byteLength);\n        return BufferUtils.xor(message, derivedKey);\n    }\n\n    /**\n     * @param {Uint8Array} message\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @return {Promise.<Uint8Array>}\n     */\n    static async otpKdf(message, key, salt, iterations) {\n        const worker = await CryptoWorker.getInstanceAsync();\n        const derivedKey = await worker.kdf(key, salt, iterations, message.byteLength);\n        return BufferUtils.xor(message, derivedKey);\n    }\n\n}\nCryptoUtils.SHA512_BLOCK_SIZE = 128;\n\nClass.register(CryptoUtils);\n","/**\n * @interface\n */\nclass CryptoWorker {\n    static get lib() { return CryptoLib.instance; }\n\n    /**\n     * @returns {Promise.<CryptoWorker>}\n     */\n    static async getInstanceAsync() {\n        if (!CryptoWorker._workerAsync) {\n            CryptoWorker._workerAsync = await IWorker.startWorkerPoolForProxy(CryptoWorker, 'crypto', 4);\n        }\n        return CryptoWorker._workerAsync;\n    }\n    /**\n     * @param {Uint8Array} input\n     * @returns {Promise.<Uint8Array>}\n     */\n    async computeArgon2d(input) {}\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Promise.<Array.<Uint8Array>>}\n     */\n    async computeArgon2dBatch(inputs) {}\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @param {number} outputSize\n     * @returns {Promise.<Uint8Array>}\n     * @deprecated\n     */\n    async kdfLegacy(key, salt, iterations, outputSize) {}\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @param {number} outputSize\n     * @returns {Promise.<Uint8Array>}\n     */\n    async kdf(key, salt, iterations, outputSize) {}\n\n    /**\n     * @param {Uint8Array} block\n     * @param {Array.<bool>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(block, transactionValid, timeNow, genesisHash, networkId) {}\n}\n/** @type {CryptoWorker} */\nCryptoWorker._workerAsync = null;\n\nClass.register(CryptoWorker);\n","class CryptoWorkerImpl extends IWorker.Stub(CryptoWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        if (PlatformUtils.isBrowser()) await WasmHelper.doImportBrowser();\n        CryptoWorker._workerAsync = this;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    computeArgon2d(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n            const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} inputs\n     * @returns {Array.<Uint8Array>}\n     */\n    computeArgon2dBatch(inputs) {\n        const hashes = [];\n        if (PlatformUtils.isNodeJs()) {\n            for(const input of inputs) {\n                const out = new Uint8Array(Hash.getSize(Hash.Algorithm.ARGON2D));\n                const res = NodeNative.node_argon2(out, new Uint8Array(input), 512);\n                if (res !== 0) {\n                    throw res;\n                }\n                hashes.push(out);\n            }\n            return hashes;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.ARGON2D);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const stackTmp = Module.stackSave();\n                for (const input of inputs) {\n                    Module.stackRestore(stackTmp);\n                    const wasmIn = Module.stackAlloc(input.length);\n                    new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                    const res = Module._nimiq_argon2(wasmOut, wasmIn, input.length, 512);\n                    if (res !== 0) {\n                        throw res;\n                    }\n                    const hash = new Uint8Array(hashSize);\n                    hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                    hashes.push(hash);\n                }\n                return hashes;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @param {number} outputSize\n     * @returns {Uint8Array}\n     * @deprecated\n     */\n    kdfLegacy(key, salt, iterations, outputSize = Hash.getSize(Hash.Algorithm.ARGON2D)) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(outputSize);\n            const res = NodeNative.node_kdf_legacy(out, new Uint8Array(key), new Uint8Array(salt), 512, iterations);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(outputSize);\n                const wasmIn = Module.stackAlloc(key.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, key.length).set(key);\n                const wasmSalt = Module.stackAlloc(salt.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmSalt, salt.length).set(salt);\n                const res = Module._nimiq_kdf_legacy(wasmOut, outputSize, wasmIn, key.length, wasmSalt, salt.length, 512, iterations);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(outputSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, outputSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} salt\n     * @param {number} iterations\n     * @param {number} outputSize\n     * @returns {Uint8Array}\n     */\n    kdf(key, salt, iterations, outputSize = Hash.getSize(Hash.Algorithm.ARGON2D)) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(outputSize);\n            const res = NodeNative.node_kdf(out, new Uint8Array(key), new Uint8Array(salt), 512, iterations);\n            if (res !== 0) {\n                throw res;\n            }\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(outputSize);\n                const wasmIn = Module.stackAlloc(key.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, key.length).set(key);\n                const wasmSalt = Module.stackAlloc(salt.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmSalt, salt.length).set(salt);\n                const res = Module._nimiq_kdf(wasmOut, outputSize, wasmIn, key.length, wasmSalt, salt.length, 512, iterations);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(outputSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, outputSize));\n                return hash;\n            } catch (e) {\n                Log.w(CryptoWorkerImpl, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} blockSerialized\n     * @param {Array.<boolean|undefined>} transactionValid\n     * @param {number} timeNow\n     * @param {Uint8Array} genesisHash\n     * @param {number} networkId\n     * @returns {Promise.<{valid: boolean, pow: SerialBuffer, interlinkHash: SerialBuffer, bodyHash: SerialBuffer}>}\n     */\n    async blockVerify(blockSerialized, transactionValid, timeNow, genesisHash, networkId) {\n        // The worker only uses a stub genesis config.\n        GenesisConfig = {\n            GENESIS_HASH: Hash.unserialize(new SerialBuffer(genesisHash)),\n            NETWORK_ID: networkId\n        };\n\n        const block = Block.unserialize(new SerialBuffer(blockSerialized));\n        for (let i = 0; i < transactionValid.length; i++) {\n            block.body.transactions[i]._valid = transactionValid[i];\n        }\n\n        const valid = await block._verify(timeNow);\n        const pow = await block.header.pow();\n        const interlinkHash = block.interlink.hash();\n        const bodyHash = block.body.hash();\n        return { valid: valid, pow: pow.serialize(), interlinkHash: interlinkHash.serialize(), bodyHash: bodyHash.serialize() };\n    }\n}\n\nIWorker.prepareForWorkerUse(CryptoWorker, new CryptoWorkerImpl());\n",";(function (globalObject) {\n    'use strict';\n\n    /*\n     *      bignumber.js v7.0.1\n     *      A JavaScript library for arbitrary-precision arithmetic.\n     *      https://github.com/MikeMcl/bignumber.js\n     *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n     *      MIT Licensed.\n     *\n     *      BigNumber.prototype methods     |  BigNumber methods\n     *                                      |\n     *      absoluteValue            abs    |  clone\n     *      comparedTo                      |  config               set\n     *      decimalPlaces            dp     |      DECIMAL_PLACES\n     *      dividedBy                div    |      ROUNDING_MODE\n     *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\n     *      exponentiatedBy          pow    |      RANGE\n     *      integerValue                    |      CRYPTO\n     *      isEqualTo                eq     |      MODULO_MODE\n     *      isFinite                        |      POW_PRECISION\n     *      isGreaterThan            gt     |      FORMAT\n     *      isGreaterThanOrEqualTo   gte    |      ALPHABET\n     *      isInteger                       |  isBigNumber\n     *      isLessThan               lt     |  maximum              max\n     *      isLessThanOrEqualTo      lte    |  minimum              min\n     *      isNaN                           |  random\n     *      isNegative                      |\n     *      isPositive                      |\n     *      isZero                          |\n     *      minus                           |\n     *      modulo                   mod    |\n     *      multipliedBy             times  |\n     *      negated                         |\n     *      plus                            |\n     *      precision                sd     |\n     *      shiftedBy                       |\n     *      squareRoot               sqrt   |\n     *      toExponential                   |\n     *      toFixed                         |\n     *      toFormat                        |\n     *      toFraction                      |\n     *      toJSON                          |\n     *      toNumber                        |\n     *      toPrecision                     |\n     *      toString                        |\n     *      valueOf                         |\n     *\n     */\n\n\n    var BigNumber,\n        isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n\n        mathceil = Math.ceil,\n        mathfloor = Math.floor,\n\n        bignumberError = '[BigNumber Error] ',\n        tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n\n        BASE = 1e14,\n        LOG_BASE = 14,\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n        SQRT_BASE = 1e7,\n\n        // EDITABLE\n        // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n        // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n        MAX = 1E9;                                   // 0 to MAX_INT32\n\n\n    /*\n     * Create and return a BigNumber constructor.\n     */\n    function clone(configObject) {\n        var div, convertBase, parseNumeric,\n            P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\n            ONE = new BigNumber(1),\n\n\n            //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n\n            // The default values below must be integers within the inclusive ranges stated.\n            // The values can also be changed at run-time using BigNumber.set.\n\n            // The maximum number of decimal places for operations involving division.\n            DECIMAL_PLACES = 20,                     // 0 to MAX\n\n            // The rounding mode used when rounding to the above decimal places, and when using\n            // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n            // UP         0 Away from zero.\n            // DOWN       1 Towards zero.\n            // CEIL       2 Towards +Infinity.\n            // FLOOR      3 Towards -Infinity.\n            // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n            // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n            // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n            // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n            // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n            ROUNDING_MODE = 4,                       // 0 to 8\n\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n            // The exponent value at and beneath which toString returns exponential notation.\n            // Number type: -7\n            TO_EXP_NEG = -7,                         // 0 to -MAX\n\n            // The exponent value at and above which toString returns exponential notation.\n            // Number type: 21\n            TO_EXP_POS = 21,                         // 0 to MAX\n\n            // RANGE : [MIN_EXP, MAX_EXP]\n\n            // The minimum exponent value, beneath which underflow to zero occurs.\n            // Number type: -324  (5e-324)\n            MIN_EXP = -1e7,                          // -1 to -MAX\n\n            // The maximum exponent value, above which overflow to Infinity occurs.\n            // Number type:  308  (1.7976931348623157e+308)\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n            MAX_EXP = 1e7,                           // 1 to MAX\n\n            // Whether to use cryptographically-secure random number generation, if available.\n            CRYPTO = false,                          // true or false\n\n            // The modulo mode used when calculating the modulus: a mod n.\n            // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n            // The remainder (r) is calculated as: r = a - n * q.\n            //\n            // UP        0 The remainder is positive if the dividend is negative, else is negative.\n            // DOWN      1 The remainder has the same sign as the dividend.\n            //             This modulo mode is commonly known as 'truncated division' and is\n            //             equivalent to (a % n) in JavaScript.\n            // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n            // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n            // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n            //             The remainder is always positive.\n            //\n            // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n            // modes are commonly used for the modulus operation.\n            // Although the other rounding modes can also be used, they may not give useful results.\n            MODULO_MODE = 1,                         // 0 to 9\n\n            // The maximum number of significant digits of the result of the exponentiatedBy operation.\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\n            POW_PRECISION = 0,                    // 0 to MAX\n\n            // The format specification used by the BigNumber.prototype.toFormat method.\n            FORMAT = {\n                decimalSeparator: '.',\n                groupSeparator: ',',\n                groupSize: 3,\n                secondaryGroupSize: 0,\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\n                fractionGroupSize: 0\n            },\n\n            // The alphabet used for base conversion.\n            // It must be at least 2 characters long, with no '.' or repeated character.\n            // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n            ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n\n        //------------------------------------------------------------------------------------------\n\n\n        // CONSTRUCTOR\n\n\n        /*\n         * The BigNumber constructor and exported function.\n         * Create and return a new instance of a BigNumber object.\n         *\n         * n {number|string|BigNumber} A numeric value.\n         * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\n         */\n        function BigNumber(n, b) {\n            var alphabet, c, e, i, isNum, len, str,\n                x = this;\n\n            // Enable constructor usage without new.\n            if (!(x instanceof BigNumber)) {\n\n                // Don't throw on constructor call without new (#81).\n                // '[BigNumber Error] Constructor call without new: {n}'\n                //throw Error(bignumberError + ' Constructor call without new: ' + n);\n                return new BigNumber(n, b);\n            }\n\n            if (b == null) {\n\n                // Duplicate.\n                if (n instanceof BigNumber) {\n                    x.s = n.s;\n                    x.e = n.e;\n                    x.c = (n = n.c) ? n.slice() : n;\n                    return;\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum && n * 0 == 0) {\n\n                    // Use `1 / n` to handle minus zero also.\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n                    // Faster path for integers.\n                    if (n === ~~n) {\n                        for (e = 0, i = n; i >= 10; i /= 10, e++);\n                        x.e = e;\n                        x.c = [n];\n                        return;\n                    }\n\n                    str = n + '';\n                } else {\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\n                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n                }\n\n            } else {\n\n                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n                intCheck(b, 2, ALPHABET.length, 'Base');\n                str = n + '';\n\n                // Allow exponential notation to be used with base 10 argument, while\n                // also rounding to DECIMAL_PLACES as with other bases.\n                if (b == 10) {\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n                }\n\n                isNum = typeof n == 'number';\n\n                if (isNum) {\n\n                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n                    if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                    if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n                        throw Error\n                        (tooManyDigits + n);\n                    }\n\n                    // Prevent later check for length on converted number.\n                    isNum = false;\n                } else {\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n\n                    // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n                    if (b > 10 && b < 37) str = str.toLowerCase();\n                }\n\n                alphabet = ALPHABET.slice(0, b);\n                e = i = 0;\n\n                // Check that str is a valid base b number.\n                // Don't use RegExp so alphabet can contain special characters.\n                for (len = str.length; i < len; i++) {\n                    if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n                        if (c == '.') {\n\n                            // If '.' is not the first character and it has not be found before.\n                            if (i > e) {\n                                e = len;\n                                continue;\n                            }\n                        }\n\n                        return parseNumeric(x, n + '', isNum, b);\n                    }\n                }\n\n                str = convertBase(str, b, 10, x.s);\n            }\n\n            // Decimal point?\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n            // Exponential form?\n            if ((i = str.search(/e/i)) > 0) {\n\n                // Determine exponent.\n                if (e < 0) e = i;\n                e += +str.slice(i + 1);\n                str = str.substring(0, i);\n            } else if (e < 0) {\n\n                // Integer.\n                e = str.length;\n            }\n\n            // Determine leading zeros.\n            for (i = 0; str.charCodeAt(i) === 48; i++);\n\n            // Determine trailing zeros.\n            for (len = str.length; str.charCodeAt(--len) === 48;);\n\n            str = str.slice(i, ++len);\n\n            if (str) {\n                len -= i;\n\n                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n                if (isNum && BigNumber.DEBUG &&\n                    len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n                    throw Error\n                    (tooManyDigits + (x.s * n));\n                }\n\n                e = e - i - 1;\n\n                // Overflow?\n                if (e > MAX_EXP) {\n\n                    // Infinity.\n                    x.c = x.e = null;\n\n                    // Underflow?\n                } else if (e < MIN_EXP) {\n\n                    // Zero.\n                    x.c = [x.e = 0];\n                } else {\n                    x.e = e;\n                    x.c = [];\n\n                    // Transform base\n\n                    // e is the base 10 exponent.\n                    // i is where to slice str to get the first element of the coefficient array.\n                    i = (e + 1) % LOG_BASE;\n                    if (e < 0) i += LOG_BASE;\n\n                    if (i < len) {\n                        if (i) x.c.push(+str.slice(0, i));\n\n                        for (len -= LOG_BASE; i < len;) {\n                            x.c.push(+str.slice(i, i += LOG_BASE));\n                        }\n\n                        str = str.slice(i);\n                        i = LOG_BASE - str.length;\n                    } else {\n                        i -= len;\n                    }\n\n                    for (; i--; str += '0');\n                    x.c.push(+str);\n                }\n            } else {\n\n                // Zero.\n                x.c = [x.e = 0];\n            }\n        }\n\n\n        // CONSTRUCTOR PROPERTIES\n\n\n        BigNumber.clone = clone;\n\n        BigNumber.ROUND_UP = 0;\n        BigNumber.ROUND_DOWN = 1;\n        BigNumber.ROUND_CEIL = 2;\n        BigNumber.ROUND_FLOOR = 3;\n        BigNumber.ROUND_HALF_UP = 4;\n        BigNumber.ROUND_HALF_DOWN = 5;\n        BigNumber.ROUND_HALF_EVEN = 6;\n        BigNumber.ROUND_HALF_CEIL = 7;\n        BigNumber.ROUND_HALF_FLOOR = 8;\n        BigNumber.EUCLID = 9;\n\n\n        /*\n         * Configure infrequently-changing library-wide settings.\n         *\n         * Accept an object with the following optional properties (if the value of a property is\n         * a number, it must be an integer within the inclusive range stated):\n         *\n         *   DECIMAL_PLACES   {number}           0 to MAX\n         *   ROUNDING_MODE    {number}           0 to 8\n         *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\n         *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\n         *   CRYPTO           {boolean}          true or false\n         *   MODULO_MODE      {number}           0 to 9\n         *   POW_PRECISION       {number}           0 to MAX\n         *   ALPHABET         {string}           A string of two or more unique characters, and not\n         *                                       containing '.'. The empty string, null or undefined\n         *                                       resets the alphabet to its default value.\n         *   FORMAT           {object}           An object with some of the following properties:\n         *      decimalSeparator       {string}\n         *      groupSeparator         {string}\n         *      groupSize              {number}\n         *      secondaryGroupSize     {number}\n         *      fractionGroupSeparator {string}\n         *      fractionGroupSize      {number}\n         *\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\n         *\n         * E.g.\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\n         *\n         * Ignore properties/parameters set to null or undefined, except for ALPHABET.\n         *\n         * Return an object with the properties current values.\n         */\n        BigNumber.config = BigNumber.set = function (obj) {\n            var p, v;\n\n            if (obj != null) {\n\n                if (typeof obj == 'object') {\n\n                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        DECIMAL_PLACES = v;\n                    }\n\n                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 8, p);\n                        ROUNDING_MODE = v;\n                    }\n\n                    // EXPONENTIAL_AT {number|number[]}\n                    // Integer, -MAX to MAX inclusive or\n                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, 0, p);\n                            intCheck(v[1], 0, MAX, p);\n                            TO_EXP_NEG = v[0];\n                            TO_EXP_POS = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n                        }\n                    }\n\n                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n                    if (obj.hasOwnProperty(p = 'RANGE')) {\n                        v = obj[p];\n                        if (isArray(v)) {\n                            intCheck(v[0], -MAX, -1, p);\n                            intCheck(v[1], 1, MAX, p);\n                            MIN_EXP = v[0];\n                            MAX_EXP = v[1];\n                        } else {\n                            intCheck(v, -MAX, MAX, p);\n                            if (v) {\n                                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n                            } else {\n                                throw Error\n                                (bignumberError + p + ' cannot be zero: ' + v);\n                            }\n                        }\n                    }\n\n                    // CRYPTO {boolean} true or false.\n                    // '[BigNumber Error] CRYPTO not true or false: {v}'\n                    // '[BigNumber Error] crypto unavailable'\n                    if (obj.hasOwnProperty(p = 'CRYPTO')) {\n                        v = obj[p];\n                        if (v === !!v) {\n                            if (v) {\n                                if (typeof crypto != 'undefined' && crypto &&\n                                    (crypto.getRandomValues || crypto.randomBytes)) {\n                                    CRYPTO = v;\n                                } else {\n                                    CRYPTO = !v;\n                                    throw Error\n                                    (bignumberError + 'crypto unavailable');\n                                }\n                            } else {\n                                CRYPTO = v;\n                            }\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' not true or false: ' + v);\n                        }\n                    }\n\n                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n                        v = obj[p];\n                        intCheck(v, 0, 9, p);\n                        MODULO_MODE = v;\n                    }\n\n                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n                        v = obj[p];\n                        intCheck(v, 0, MAX, p);\n                        POW_PRECISION = v;\n                    }\n\n                    // FORMAT {object}\n                    // '[BigNumber Error] FORMAT not an object: {v}'\n                    if (obj.hasOwnProperty(p = 'FORMAT')) {\n                        v = obj[p];\n                        if (typeof v == 'object') FORMAT = v;\n                        else throw Error\n                        (bignumberError + p + ' not an object: ' + v);\n                    }\n\n                    // ALPHABET {string}\n                    // '[BigNumber Error] ALPHABET invalid: {v}'\n                    if (obj.hasOwnProperty(p = 'ALPHABET')) {\n                        v = obj[p];\n\n                        // Disallow if only one character, or contains '.' or a repeated character.\n                        if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\n                            ALPHABET = v;\n                        } else {\n                            throw Error\n                            (bignumberError + p + ' invalid: ' + v);\n                        }\n                    }\n\n                } else {\n\n                    // '[BigNumber Error] Object expected: {v}'\n                    throw Error\n                    (bignumberError + 'Object expected: ' + obj);\n                }\n            }\n\n            return {\n                DECIMAL_PLACES: DECIMAL_PLACES,\n                ROUNDING_MODE: ROUNDING_MODE,\n                EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n                RANGE: [MIN_EXP, MAX_EXP],\n                CRYPTO: CRYPTO,\n                MODULO_MODE: MODULO_MODE,\n                POW_PRECISION: POW_PRECISION,\n                FORMAT: FORMAT,\n                ALPHABET: ALPHABET\n            };\n        };\n\n\n        /*\n         * Return true if v is a BigNumber instance, otherwise return false.\n         *\n         * v {any}\n         */\n        BigNumber.isBigNumber = function (v) {\n            return v instanceof BigNumber || v && v._isBigNumber === true || false;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the maximum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.maximum = BigNumber.max = function () {\n            return maxOrMin(arguments, P.lt);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the minimum of the arguments.\n         *\n         * arguments {number|string|BigNumber}\n         */\n        BigNumber.minimum = BigNumber.min = function () {\n            return maxOrMin(arguments, P.gt);\n        };\n\n\n        /*\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\n         * zeros are produced).\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\n         * '[BigNumber Error] crypto unavailable'\n         */\n        BigNumber.random = (function () {\n            var pow2_53 = 0x20000000000000;\n\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n            // Check if Math.random() produces more than 32 bits of randomness.\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\n                ? function () { return mathfloor(Math.random() * pow2_53); }\n                : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\n                    (Math.random() * 0x800000 | 0); };\n\n            return function (dp) {\n                var a, b, e, k, v,\n                    i = 0,\n                    c = [],\n                    rand = new BigNumber(ONE);\n\n                if (dp == null) dp = DECIMAL_PLACES;\n                else intCheck(dp, 0, MAX);\n\n                k = mathceil(dp / LOG_BASE);\n\n                if (CRYPTO) {\n\n                    // Browsers supporting crypto.getRandomValues.\n                    if (crypto.getRandomValues) {\n\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\n\n                        for (; i < k;) {\n\n                            // 53 bits:\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n                            //                                     11111 11111111 11111111\n                            // 0x20000 is 2^21.\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n                            // Rejection sampling:\n                            // 0 <= v < 9007199254740992\n                            // Probability that v >= 9e15, is\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n                            if (v >= 9e15) {\n                                b = crypto.getRandomValues(new Uint32Array(2));\n                                a[i] = b[0];\n                                a[i + 1] = b[1];\n                            } else {\n\n                                // 0 <= v <= 8999999999999999\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 2;\n                            }\n                        }\n                        i = k / 2;\n\n                        // Node.js supporting crypto.randomBytes.\n                    } else if (crypto.randomBytes) {\n\n                        // buffer\n                        a = crypto.randomBytes(k *= 7);\n\n                        for (; i < k;) {\n\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n                            // 0 <= v < 9007199254740992\n                            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\n                                (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\n                                (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n\n                            if (v >= 9e15) {\n                                crypto.randomBytes(7).copy(a, i);\n                            } else {\n\n                                // 0 <= (v % 1e14) <= 99999999999999\n                                c.push(v % 1e14);\n                                i += 7;\n                            }\n                        }\n                        i = k / 7;\n                    } else {\n                        CRYPTO = false;\n                        throw Error\n                        (bignumberError + 'crypto unavailable');\n                    }\n                }\n\n                // Use Math.random.\n                if (!CRYPTO) {\n\n                    for (; i < k;) {\n                        v = random53bitInt();\n                        if (v < 9e15) c[i++] = v % 1e14;\n                    }\n                }\n\n                k = c[--i];\n                dp %= LOG_BASE;\n\n                // Convert trailing digits to zeros according to dp.\n                if (k && dp) {\n                    v = POWS_TEN[LOG_BASE - dp];\n                    c[i] = mathfloor(k / v) * v;\n                }\n\n                // Remove trailing elements which are zero.\n                for (; c[i] === 0; c.pop(), i--);\n\n                // Zero?\n                if (i < 0) {\n                    c = [e = 0];\n                } else {\n\n                    // Remove leading elements which are zero and adjust exponent accordingly.\n                    for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n                    // Count the digits of the first element of c to determine leading zeros, and...\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n                    // adjust the exponent accordingly.\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\n                }\n\n                rand.e = e;\n                rand.c = c;\n                return rand;\n            };\n        })();\n\n\n        // PRIVATE FUNCTIONS\n\n\n        // Called by BigNumber and BigNumber.prototype.toString.\n        convertBase = (function () {\n            var decimal = '0123456789';\n\n            /*\n             * Convert string of baseIn to an array of numbers of baseOut.\n             * Eg. toBaseOut('255', 10, 16) returns [15, 15].\n             * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\n             */\n            function toBaseOut(str, baseIn, baseOut, alphabet) {\n                var j,\n                    arr = [0],\n                    arrL,\n                    i = 0,\n                    len = str.length;\n\n                for (; i < len;) {\n                    for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n\n                    arr[0] += alphabet.indexOf(str.charAt(i++));\n\n                    for (j = 0; j < arr.length; j++) {\n\n                        if (arr[j] > baseOut - 1) {\n                            if (arr[j + 1] == null) arr[j + 1] = 0;\n                            arr[j + 1] += arr[j] / baseOut | 0;\n                            arr[j] %= baseOut;\n                        }\n                    }\n                }\n\n                return arr.reverse();\n            }\n\n            // Convert a numeric string of baseIn to a numeric string of baseOut.\n            // If the caller is toString, we are converting from base 10 to baseOut.\n            // If the caller is BigNumber, we are converting from baseIn to base 10.\n            return function (str, baseIn, baseOut, sign, callerIsToString) {\n                var alphabet, d, e, k, r, x, xc, y,\n                    i = str.indexOf('.'),\n                    dp = DECIMAL_PLACES,\n                    rm = ROUNDING_MODE;\n\n                // Non-integer.\n                if (i >= 0) {\n                    k = POW_PRECISION;\n\n                    // Unlimited precision.\n                    POW_PRECISION = 0;\n                    str = str.replace('.', '');\n                    y = new BigNumber(baseIn);\n                    x = y.pow(str.length - i);\n                    POW_PRECISION = k;\n\n                    // Convert str as if an integer, then restore the fraction part by dividing the\n                    // result by its base raised to a power.\n\n                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\n                        10, baseOut, decimal);\n                    y.e = y.c.length;\n                }\n\n                // Convert the number as integer.\n\n                xc = toBaseOut(str, baseIn, baseOut, callerIsToString\n                    ? (alphabet = ALPHABET, decimal)\n                    : (alphabet = decimal, ALPHABET));\n\n                // xc now represents str as an integer and converted to baseOut. e is the exponent.\n                e = k = xc.length;\n\n                // Remove trailing zeros.\n                for (; xc[--k] == 0; xc.pop());\n\n                // Zero?\n                if (!xc[0]) return alphabet.charAt(0);\n\n                // Does str represent an integer? If so, no need for the division.\n                if (i < 0) {\n                    --e;\n                } else {\n                    x.c = xc;\n                    x.e = e;\n\n                    // The sign is needed for correct rounding.\n                    x.s = sign;\n                    x = div(x, y, dp, rm, baseOut);\n                    xc = x.c;\n                    r = x.r;\n                    e = x.e;\n                }\n\n                // xc now represents str converted to baseOut.\n\n                // THe index of the rounding digit.\n                d = e + dp + 1;\n\n                // The rounding digit: the digit to the right of the digit that may be rounded up.\n                i = xc[d];\n\n                // Look at the rounding digits and mode to determine whether to round up.\n\n                k = baseOut / 2;\n                r = r || d < 0 || xc[d + 1] != null;\n\n                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                    : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\n                    rm == (x.s < 0 ? 8 : 7));\n\n                // If the index of the rounding digit is not greater than zero, or xc represents\n                // zero, then the result of the base conversion is zero or, if rounding up, a value\n                // such as 0.00001.\n                if (d < 1 || !xc[0]) {\n\n                    // 1^-dp or 0\n                    str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\n                        : alphabet.charAt(0);\n                } else {\n\n                    // Truncate xc to the required number of decimal places.\n                    xc.length = d;\n\n                    // Round up?\n                    if (r) {\n\n                        // Rounding up may mean the previous digit has to be rounded up and so on.\n                        for (--baseOut; ++xc[--d] > baseOut;) {\n                            xc[d] = 0;\n\n                            if (!d) {\n                                ++e;\n                                xc = [1].concat(xc);\n                            }\n                        }\n                    }\n\n                    // Determine trailing zeros.\n                    for (k = xc.length; !xc[--k];);\n\n                    // E.g. [4, 11, 15] becomes 4bf.\n                    for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n                    // Add leading zeros, decimal point and trailing zeros as required.\n                    str = toFixedPoint(str, e, alphabet.charAt(0));\n                }\n\n                // The caller will add the sign.\n                return str;\n            };\n        })();\n\n\n        // Perform division in the specified base. Called by div and convertBase.\n        div = (function () {\n\n            // Assume non-zero x and k.\n            function multiply(x, k, base) {\n                var m, temp, xlo, xhi,\n                    carry = 0,\n                    i = x.length,\n                    klo = k % SQRT_BASE,\n                    khi = k / SQRT_BASE | 0;\n\n                for (x = x.slice(); i--;) {\n                    xlo = x[i] % SQRT_BASE;\n                    xhi = x[i] / SQRT_BASE | 0;\n                    m = khi * xlo + xhi * klo;\n                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n                    x[i] = temp % base;\n                }\n\n                if (carry) x = [carry].concat(x);\n\n                return x;\n            }\n\n            function compare(a, b, aL, bL) {\n                var i, cmp;\n\n                if (aL != bL) {\n                    cmp = aL > bL ? 1 : -1;\n                } else {\n\n                    for (i = cmp = 0; i < aL; i++) {\n\n                        if (a[i] != b[i]) {\n                            cmp = a[i] > b[i] ? 1 : -1;\n                            break;\n                        }\n                    }\n                }\n\n                return cmp;\n            }\n\n            function subtract(a, b, aL, base) {\n                var i = 0;\n\n                // Subtract b from a.\n                for (; aL--;) {\n                    a[aL] -= i;\n                    i = a[aL] < b[aL] ? 1 : 0;\n                    a[aL] = i * base + a[aL] - b[aL];\n                }\n\n                // Remove leading zeros.\n                for (; !a[0] && a.length > 1; a.splice(0, 1));\n            }\n\n            // x: dividend, y: divisor.\n            return function (x, y, dp, rm, base) {\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\n                    yL, yz,\n                    s = x.s == y.s ? 1 : -1,\n                    xc = x.c,\n                    yc = y.c;\n\n                // Either NaN, Infinity or 0?\n                if (!xc || !xc[0] || !yc || !yc[0]) {\n\n                    return new BigNumber(\n\n                        // Return NaN if either NaN, or both Infinity or 0.\n                        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n\n                            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n                            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\n                    );\n                }\n\n                q = new BigNumber(s);\n                qc = q.c = [];\n                e = x.e - y.e;\n                s = dp + e + 1;\n\n                if (!base) {\n                    base = BASE;\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n                    s = s / LOG_BASE | 0;\n                }\n\n                // Result exponent may be one less then the current value of e.\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n                for (i = 0; yc[i] == (xc[i] || 0); i++);\n\n                if (yc[i] > (xc[i] || 0)) e--;\n\n                if (s < 0) {\n                    qc.push(1);\n                    more = true;\n                } else {\n                    xL = xc.length;\n                    yL = yc.length;\n                    i = 0;\n                    s += 2;\n\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n                    n = mathfloor(base / (yc[0] + 1));\n\n                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n                    if (n > 1) {\n                        yc = multiply(yc, n, base);\n                        xc = multiply(xc, n, base);\n                        yL = yc.length;\n                        xL = xc.length;\n                    }\n\n                    xi = yL;\n                    rem = xc.slice(0, yL);\n                    remL = rem.length;\n\n                    // Add zeros to make remainder as long as divisor.\n                    for (; remL < yL; rem[remL++] = 0);\n                    yz = yc.slice();\n                    yz = [0].concat(yz);\n                    yc0 = yc[0];\n                    if (yc[1] >= base / 2) yc0++;\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\n                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n                    do {\n                        n = 0;\n\n                        // Compare divisor and remainder.\n                        cmp = compare(yc, rem, yL, remL);\n\n                        // If divisor < remainder.\n                        if (cmp < 0) {\n\n                            // Calculate trial digit, n.\n\n                            rem0 = rem[0];\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n                            // n is how many times the divisor goes into the current remainder.\n                            n = mathfloor(rem0 / yc0);\n\n                            //  Algorithm:\n                            //  product = divisor multiplied by trial digit (n).\n                            //  Compare product and remainder.\n                            //  If product is greater than remainder:\n                            //    Subtract divisor from product, decrement trial digit.\n                            //  Subtract product from remainder.\n                            //  If product was less than remainder at the last compare:\n                            //    Compare new remainder and divisor.\n                            //    If remainder is greater than divisor:\n                            //      Subtract divisor from remainder, increment trial digit.\n\n                            if (n > 1) {\n\n                                // n may be > base only when base is 3.\n                                if (n >= base) n = base - 1;\n\n                                // product = divisor * trial digit.\n                                prod = multiply(yc, n, base);\n                                prodL = prod.length;\n                                remL = rem.length;\n\n                                // Compare product and remainder.\n                                // If product > remainder then trial digit n too high.\n                                // n is 1 too high about 5% of the time, and is not known to have\n                                // ever been more than 1 too high.\n                                while (compare(prod, rem, prodL, remL) == 1) {\n                                    n--;\n\n                                    // Subtract divisor from product.\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                                    prodL = prod.length;\n                                    cmp = 1;\n                                }\n                            } else {\n\n                                // n is 0 or 1, cmp is -1.\n                                // If n is 0, there is no need to compare yc and rem again below,\n                                // so change cmp to 1 to avoid it.\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\n                                if (n == 0) {\n\n                                    // divisor < remainder, so n must be at least 1.\n                                    cmp = n = 1;\n                                }\n\n                                // product = divisor\n                                prod = yc.slice();\n                                prodL = prod.length;\n                            }\n\n                            if (prodL < remL) prod = [0].concat(prod);\n\n                            // Subtract product from remainder.\n                            subtract(rem, prod, remL, base);\n                            remL = rem.length;\n\n                            // If product was < remainder.\n                            if (cmp == -1) {\n\n                                // Compare divisor and new remainder.\n                                // If divisor < new remainder, subtract divisor from remainder.\n                                // Trial digit n too low.\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\n                                while (compare(yc, rem, yL, remL) < 1) {\n                                    n++;\n\n                                    // Subtract divisor from remainder.\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\n                                    remL = rem.length;\n                                }\n                            }\n                        } else if (cmp === 0) {\n                            n++;\n                            rem = [0];\n                        } // else cmp === 1 and n will be 0\n\n                        // Add the next digit, n, to the result array.\n                        qc[i++] = n;\n\n                        // Update the remainder.\n                        if (rem[0]) {\n                            rem[remL++] = xc[xi] || 0;\n                        } else {\n                            rem = [xc[xi]];\n                            remL = 1;\n                        }\n                    } while ((xi++ < xL || rem[0] != null) && s--);\n\n                    more = rem[0] != null;\n\n                    // Leading zero?\n                    if (!qc[0]) qc.splice(0, 1);\n                }\n\n                if (base == BASE) {\n\n                    // To calculate q.e, first get the number of digits of qc[0].\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n                    // Caller is convertBase.\n                } else {\n                    q.e = e;\n                    q.r = +more;\n                }\n\n                return q;\n            };\n        })();\n\n\n        /*\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\n         * notation rounded to the specified decimal places or significant digits.\n         *\n         * n: a BigNumber.\n         * i: the index of the last digit required (i.e. the digit that may be rounded up).\n         * rm: the rounding mode.\n         * id: 1 (toExponential) or 2 (toPrecision).\n         */\n        function format(n, i, rm, id) {\n            var c0, e, ne, len, str;\n\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n\n            if (!n.c) return n.toString();\n\n            c0 = n.c[0];\n            ne = n.e;\n\n            if (i == null) {\n                str = coeffToString(n.c);\n                str = id == 1 || id == 2 && ne <= TO_EXP_NEG\n                    ? toExponential(str, ne)\n                    : toFixedPoint(str, ne, '0');\n            } else {\n                n = round(new BigNumber(n), i, rm);\n\n                // n.e may have changed if the value was rounded up.\n                e = n.e;\n\n                str = coeffToString(n.c);\n                len = str.length;\n\n                // toPrecision returns exponential notation if the number of significant digits\n                // specified is less than the number of digits necessary to represent the integer\n                // part of the value in fixed-point notation.\n\n                // Exponential notation.\n                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n\n                    // Append zeros?\n                    for (; len < i; str += '0', len++);\n                    str = toExponential(str, e);\n\n                    // Fixed-point notation.\n                } else {\n                    i -= ne;\n                    str = toFixedPoint(str, e, '0');\n\n                    // Append zeros?\n                    if (e + 1 > len) {\n                        if (--i > 0) for (str += '.'; i--; str += '0');\n                    } else {\n                        i += e - len;\n                        if (i > 0) {\n                            if (e + 1 == len) str += '.';\n                            for (; i--; str += '0');\n                        }\n                    }\n                }\n            }\n\n            return n.s < 0 && c0 ? '-' + str : str;\n        }\n\n\n        // Handle BigNumber.max and BigNumber.min.\n        function maxOrMin(args, method) {\n            var m, n,\n                i = 0;\n\n            if (isArray(args[0])) args = args[0];\n            m = new BigNumber(args[0]);\n\n            for (; ++i < args.length;) {\n                n = new BigNumber(args[i]);\n\n                // If any number is NaN, return NaN.\n                if (!n.s) {\n                    m = n;\n                    break;\n                } else if (method.call(m, n)) {\n                    m = n;\n                }\n            }\n\n            return m;\n        }\n\n\n        /*\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\n         * Called by minus, plus and times.\n         */\n        function normalise(n, c, e) {\n            var i = 1,\n                j = c.length;\n\n            // Remove trailing zeros.\n            for (; !c[--j]; c.pop());\n\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\n            for (j = c[0]; j >= 10; j /= 10, i++);\n\n            // Overflow?\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n\n                // Infinity.\n                n.c = n.e = null;\n\n                // Underflow?\n            } else if (e < MIN_EXP) {\n\n                // Zero.\n                n.c = [n.e = 0];\n            } else {\n                n.e = e;\n                n.c = c;\n            }\n\n            return n;\n        }\n\n\n        // Handle values that fail the validity test in BigNumber.\n        parseNumeric = (function () {\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n                dotAfter = /^([^.]+)\\.$/,\n                dotBefore = /^\\.([^.]+)$/,\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n\n            return function (x, str, isNum, b) {\n                var base,\n                    s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n                // No exception on ±Infinity or NaN.\n                if (isInfinityOrNaN.test(s)) {\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n                    x.c = x.e = null;\n                } else {\n                    if (!isNum) {\n\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n                        s = s.replace(basePrefix, function (m, p1, p2) {\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n                            return !b || b == base ? p1 : m;\n                        });\n\n                        if (b) {\n                            base = b;\n\n                            // E.g. '1.' to '1', '.1' to '0.1'\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n                        }\n\n                        if (str != s) return new BigNumber(s, base);\n                    }\n\n                    // '[BigNumber Error] Not a number: {n}'\n                    // '[BigNumber Error] Not a base {b} number: {n}'\n                    if (BigNumber.DEBUG) {\n                        throw Error\n                        (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n                    }\n\n                    // NaN\n                    x.c = x.e = x.s = null;\n                }\n            }\n        })();\n\n\n        /*\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\n         * If r is truthy, it is known that there are more digits after the rounding digit.\n         */\n        function round(x, sd, rm, r) {\n            var d, i, j, k, n, ni, rd,\n                xc = x.c,\n                pows10 = POWS_TEN;\n\n            // if x is not Infinity or NaN...\n            if (xc) {\n\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\n                // ni is the index of n within x.c.\n                // d is the number of digits of n.\n                // i is the index of rd within n including leading zeros.\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\n                out: {\n\n                    // Get the number of digits of the first element of xc.\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n                    i = sd - d;\n\n                    // If the rounding digit is in the first element of xc...\n                    if (i < 0) {\n                        i += LOG_BASE;\n                        j = sd;\n                        n = xc[ni = 0];\n\n                        // Get the rounding digit at index j of n.\n                        rd = n / pows10[d - j - 1] % 10 | 0;\n                    } else {\n                        ni = mathceil((i + 1) / LOG_BASE);\n\n                        if (ni >= xc.length) {\n\n                            if (r) {\n\n                                // Needed by sqrt.\n                                for (; xc.length <= ni; xc.push(0));\n                                n = rd = 0;\n                                d = 1;\n                                i %= LOG_BASE;\n                                j = i - LOG_BASE + 1;\n                            } else {\n                                break out;\n                            }\n                        } else {\n                            n = k = xc[ni];\n\n                            // Get the number of digits of n.\n                            for (d = 1; k >= 10; k /= 10, d++);\n\n                            // Get the index of rd within n.\n                            i %= LOG_BASE;\n\n                            // Get the index of rd within n, adjusted for leading zeros.\n                            // The number of leading zeros of n is given by LOG_BASE - d.\n                            j = i - LOG_BASE + d;\n\n                            // Get the rounding digit at index j of n.\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n                        }\n                    }\n\n                    r = r || sd < 0 ||\n\n                        // Are there any non-zero digits after the rounding digit?\n                        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n                        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n                        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n\n                    r = rm < 4\n                        ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\n                        : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n\n                        // Check whether the digit to the left of the rounding digit is odd.\n                        ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\n                        rm == (x.s < 0 ? 8 : 7));\n\n                    if (sd < 1 || !xc[0]) {\n                        xc.length = 0;\n\n                        if (r) {\n\n                            // Convert sd to decimal places.\n                            sd -= x.e + 1;\n\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n                            x.e = -sd || 0;\n                        } else {\n\n                            // Zero.\n                            xc[0] = x.e = 0;\n                        }\n\n                        return x;\n                    }\n\n                    // Remove excess digits.\n                    if (i == 0) {\n                        xc.length = ni;\n                        k = 1;\n                        ni--;\n                    } else {\n                        xc.length = ni + 1;\n                        k = pows10[LOG_BASE - i];\n\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n                        // j > 0 means i > number of leading zeros of n.\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n                    }\n\n                    // Round up?\n                    if (r) {\n\n                        for (; ;) {\n\n                            // If the digit to be rounded up is in the first element of xc...\n                            if (ni == 0) {\n\n                                // i will be the length of xc[0] before k is added.\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n                                j = xc[0] += k;\n                                for (k = 1; j >= 10; j /= 10, k++);\n\n                                // if i != k the length has increased.\n                                if (i != k) {\n                                    x.e++;\n                                    if (xc[0] == BASE) xc[0] = 1;\n                                }\n\n                                break;\n                            } else {\n                                xc[ni] += k;\n                                if (xc[ni] != BASE) break;\n                                xc[ni--] = 0;\n                                k = 1;\n                            }\n                        }\n                    }\n\n                    // Remove trailing zeros.\n                    for (i = xc.length; xc[--i] === 0; xc.pop());\n                }\n\n                // Overflow? Infinity.\n                if (x.e > MAX_EXP) {\n                    x.c = x.e = null;\n\n                    // Underflow? Zero.\n                } else if (x.e < MIN_EXP) {\n                    x.c = [x.e = 0];\n                }\n            }\n\n            return x;\n        }\n\n\n        // PROTOTYPE/INSTANCE METHODS\n\n\n        /*\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\n         */\n        P.absoluteValue = P.abs = function () {\n            var x = new BigNumber(this);\n            if (x.s < 0) x.s = 1;\n            return x;\n        };\n\n\n        /*\n         * Return\n         *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\n         *   0 if they have the same value,\n         *   or null if the value of either is NaN.\n         */\n        P.comparedTo = function (y, b) {\n            return compare(this, new BigNumber(y, b));\n        };\n\n\n        /*\n         * If dp is undefined or null or true or false, return the number of decimal places of the\n         * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         *\n         * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.decimalPlaces = P.dp = function (dp, rm) {\n            var c, n, v,\n                x = this;\n\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), dp + x.e + 1, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n            // Subtract the number of trailing zeros of the last number.\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n            if (n < 0) n = 0;\n\n            return n;\n        };\n\n\n        /*\n         *  n / 0 = I\n         *  n / N = N\n         *  n / I = 0\n         *  0 / n = 0\n         *  0 / 0 = N\n         *  0 / N = N\n         *  0 / I = 0\n         *  N / n = N\n         *  N / 0 = N\n         *  N / N = N\n         *  N / I = N\n         *  I / n = I\n         *  I / 0 = I\n         *  I / N = N\n         *  I / I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.dividedBy = P.div = function (y, b) {\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\n         * BigNumber by the value of BigNumber(y, b).\n         */\n        P.dividedToIntegerBy = P.idiv = function (y, b) {\n            return div(this, new BigNumber(y, b), 0, 1);\n        };\n\n\n        /*\n         * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\n         *\n         * If m is present, return the result modulo m.\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\n         *\n         * The modular power operation works efficiently when x, n, and m are integers, otherwise it\n         * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\n         *\n         * n {number|string|BigNumber} The exponent. An integer.\n         * [m] {number|string|BigNumber} The modulus.\n         *\n         * '[BigNumber Error] Exponent not an integer: {n}'\n         */\n        P.exponentiatedBy = P.pow = function (n, m) {\n            var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\n                x = this;\n\n            n = new BigNumber(n);\n\n            // Allow NaN and ±Infinity, but not other non-integers.\n            if (n.c && !n.isInteger()) {\n                throw Error\n                (bignumberError + 'Exponent not an integer: ' + n);\n            }\n\n            if (m != null) m = new BigNumber(m);\n\n            // Exponent of MAX_SAFE_INTEGER is 15.\n            nIsBig = n.e > 14;\n\n            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n\n                // The sign of the result of pow when x is negative depends on the evenness of n.\n                // If +n overflows to ±Infinity, the evenness of n would be not be known.\n                y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\n                return m ? y.mod(m) : y;\n            }\n\n            nIsNeg = n.s < 0;\n\n            if (m) {\n\n                // x % m returns NaN if abs(m) is zero, or m is NaN.\n                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n\n                isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n\n                if (isModExp) x = x.mod(m);\n\n                // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n                // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n                // [1, 240000000]\n                ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n                // [80000000000000]  [99999750000000]\n                : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n\n                // If x is negative and n is odd, k = -0, else k = 0.\n                k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n                // If x >= 1, k = ±Infinity.\n                if (x.e > -1) k = 1 / k;\n\n                // If n is negative return ±0, else return ±Infinity.\n                return new BigNumber(nIsNeg ? 1 / k : k);\n\n            } else if (POW_PRECISION) {\n\n                // Truncating each coefficient array to a length of k after each multiplication\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\n                // i.e. there will be a minimum of 28 guard digits retained.\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\n            }\n\n            if (nIsBig) {\n                half = new BigNumber(0.5);\n                nIsOdd = isOdd(n);\n            } else {\n                nIsOdd = n % 2;\n            }\n\n            if (nIsNeg) n.s = 1;\n\n            y = new BigNumber(ONE);\n\n            // Performs 54 loop iterations for n of 9007199254740991.\n            for (; ;) {\n\n                if (nIsOdd) {\n                    y = y.times(x);\n                    if (!y.c) break;\n\n                    if (k) {\n                        if (y.c.length > k) y.c.length = k;\n                    } else if (isModExp) {\n                        y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n                    }\n                }\n\n                if (nIsBig) {\n                    n = n.times(half);\n                    round(n, n.e + 1, 1);\n                    if (!n.c[0]) break;\n                    nIsBig = n.e > 14;\n                    nIsOdd = isOdd(n);\n                } else {\n                    n = mathfloor(n / 2);\n                    if (!n) break;\n                    nIsOdd = n % 2;\n                }\n\n                x = x.times(x);\n\n                if (k) {\n                    if (x.c && x.c.length > k) x.c.length = k;\n                } else if (isModExp) {\n                    x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n                }\n            }\n\n            if (isModExp) return y;\n            if (nIsNeg) y = ONE.div(y);\n\n            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\n         * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\n         */\n        P.integerValue = function (rm) {\n            var n = new BigNumber(this);\n            if (rm == null) rm = ROUNDING_MODE;\n            else intCheck(rm, 0, 8);\n            return round(n, n.e + 1, rm);\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isEqualTo = P.eq = P.equals = function (y, b) {\n            return compare(this, new BigNumber(y, b)) === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is a finite number, otherwise return false.\n         */\n        P.isFinite = function () {\n            return !!this.c;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isGreaterThan = P.gt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is greater than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\n         */\n        P.isInteger = function () {\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\n         * otherwise return false.\n         */\n        P.isLessThan = P.lt = function (y, b) {\n            return compare(this, new BigNumber(y, b)) < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is less than or equal to the value of\n         * BigNumber(y, b), otherwise return false.\n         */\n        P.isLessThanOrEqualTo = P.lte = function (y, b) {\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is NaN, otherwise return false.\n         */\n        P.isNaN = function () {\n            return !this.s;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is negative, otherwise return false.\n         */\n        P.isNegative = function () {\n            return this.s < 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is positive, otherwise return false.\n         */\n        P.isPositive = function () {\n            return this.s > 0;\n        };\n\n\n        /*\n         * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\n         */\n        P.isZero = function () {\n            return !!this.c && this.c[0] == 0;\n        };\n\n\n        /*\n         *  n - 0 = n\n         *  n - N = N\n         *  n - I = -I\n         *  0 - n = -n\n         *  0 - 0 = 0\n         *  0 - N = N\n         *  0 - I = -I\n         *  N - n = N\n         *  N - 0 = N\n         *  N - N = N\n         *  N - I = N\n         *  I - n = I\n         *  I - 0 = I\n         *  I - N = N\n         *  I - I = N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\n         * BigNumber(y, b).\n         */\n        P.minus = function (y, b) {\n            var i, j, t, xLTy,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.plus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Either Infinity?\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n                // Either zero?\n                if (!xc[0] || !yc[0]) {\n\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n\n                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n                        ROUNDING_MODE == 3 ? -0 : 0);\n                }\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Determine which is the bigger number.\n            if (a = xe - ye) {\n\n                if (xLTy = a < 0) {\n                    a = -a;\n                    t = xc;\n                } else {\n                    ye = xe;\n                    t = yc;\n                }\n\n                t.reverse();\n\n                // Prepend zeros to equalise exponents.\n                for (b = a; b--; t.push(0));\n                t.reverse();\n            } else {\n\n                // Exponents equal. Check digit by digit.\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n\n                for (a = b = 0; b < j; b++) {\n\n                    if (xc[b] != yc[b]) {\n                        xLTy = xc[b] < yc[b];\n                        break;\n                    }\n                }\n            }\n\n            // x < y? Point xc to the array of the bigger number.\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n\n            b = (j = yc.length) - (i = xc.length);\n\n            // Append zeros to xc if shorter.\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n            if (b > 0) for (; b--; xc[i++] = 0);\n            b = BASE - 1;\n\n            // Subtract yc from xc.\n            for (; j > a;) {\n\n                if (xc[--j] < yc[j]) {\n                    for (i = j; i && !xc[--i]; xc[i] = b);\n                    --xc[i];\n                    xc[j] += BASE;\n                }\n\n                xc[j] -= yc[j];\n            }\n\n            // Remove leading zeros and adjust exponent accordingly.\n            for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n            // Zero?\n            if (!xc[0]) {\n\n                // Following IEEE 754 (2008) 6.3,\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\n                y.c = [y.e = 0];\n                return y;\n            }\n\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n            // for finite x and y.\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         *   n % 0 =  N\n         *   n % N =  N\n         *   n % I =  n\n         *   0 % n =  0\n         *  -0 % n = -0\n         *   0 % 0 =  N\n         *   0 % N =  N\n         *   0 % I =  0\n         *   N % n =  N\n         *   N % 0 =  N\n         *   N % N =  N\n         *   N % I =  N\n         *   I % n =  N\n         *   I % 0 =  N\n         *   I % N =  N\n         *   I % I =  N\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\n         */\n        P.modulo = P.mod = function (y, b) {\n            var q, s,\n                x = this;\n\n            y = new BigNumber(y, b);\n\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n            if (!x.c || !y.s || y.c && !y.c[0]) {\n                return new BigNumber(NaN);\n\n                // Return x if y is Infinity or x is zero.\n            } else if (!y.c || x.c && !x.c[0]) {\n                return new BigNumber(x);\n            }\n\n            if (MODULO_MODE == 9) {\n\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\n                // r = x - qy    where  0 <= r < abs(y)\n                s = y.s;\n                y.s = 1;\n                q = div(x, y, 0, 3);\n                y.s = s;\n                q.s *= s;\n            } else {\n                q = div(x, y, 0, MODULO_MODE);\n            }\n\n            y = x.minus(q.times(y));\n\n            // To match JavaScript %, ensure sign of zero is sign of dividend.\n            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n\n            return y;\n        };\n\n\n        /*\n         *  n * 0 = 0\n         *  n * N = N\n         *  n * I = I\n         *  0 * n = 0\n         *  0 * 0 = 0\n         *  0 * N = N\n         *  0 * I = N\n         *  N * n = N\n         *  N * 0 = N\n         *  N * N = N\n         *  N * I = N\n         *  I * n = I\n         *  I * 0 = N\n         *  I * N = N\n         *  I * I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\n         * of BigNumber(y, b).\n         */\n        P.multipliedBy = P.times = function (y, b) {\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\n                base, sqrtBase,\n                x = this,\n                xc = x.c,\n                yc = (y = new BigNumber(y, b)).c;\n\n            // Either NaN, ±Infinity or ±0?\n            if (!xc || !yc || !xc[0] || !yc[0]) {\n\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n                    y.c = y.e = y.s = null;\n                } else {\n                    y.s *= x.s;\n\n                    // Return ±Infinity if either is ±Infinity.\n                    if (!xc || !yc) {\n                        y.c = y.e = null;\n\n                        // Return ±0 if either is ±0.\n                    } else {\n                        y.c = [0];\n                        y.e = 0;\n                    }\n                }\n\n                return y;\n            }\n\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n            y.s *= x.s;\n            xcL = xc.length;\n            ycL = yc.length;\n\n            // Ensure xc points to longer array and xcL to its length.\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n            // Initialise the result array with zeros.\n            for (i = xcL + ycL, zc = []; i--; zc.push(0));\n\n            base = BASE;\n            sqrtBase = SQRT_BASE;\n\n            for (i = ycL; --i >= 0;) {\n                c = 0;\n                ylo = yc[i] % sqrtBase;\n                yhi = yc[i] / sqrtBase | 0;\n\n                for (k = xcL, j = i + k; j > i;) {\n                    xlo = xc[--k] % sqrtBase;\n                    xhi = xc[k] / sqrtBase | 0;\n                    m = yhi * xlo + xhi * ylo;\n                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n                    zc[j--] = xlo % base;\n                }\n\n                zc[j] = c;\n            }\n\n            if (c) {\n                ++e;\n            } else {\n                zc.splice(0, 1);\n            }\n\n            return normalise(y, zc, e);\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\n         * i.e. multiplied by -1.\n         */\n        P.negated = function () {\n            var x = new BigNumber(this);\n            x.s = -x.s || null;\n            return x;\n        };\n\n\n        /*\n         *  n + 0 = n\n         *  n + N = N\n         *  n + I = I\n         *  0 + n = n\n         *  0 + 0 = 0\n         *  0 + N = N\n         *  0 + I = I\n         *  N + n = N\n         *  N + 0 = N\n         *  N + N = N\n         *  N + I = N\n         *  I + n = I\n         *  I + 0 = I\n         *  I + N = N\n         *  I + I = I\n         *\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\n         * BigNumber(y, b).\n         */\n        P.plus = function (y, b) {\n            var t,\n                x = this,\n                a = x.s;\n\n            y = new BigNumber(y, b);\n            b = y.s;\n\n            // Either NaN?\n            if (!a || !b) return new BigNumber(NaN);\n\n            // Signs differ?\n            if (a != b) {\n                y.s = -b;\n                return x.minus(y);\n            }\n\n            var xe = x.e / LOG_BASE,\n                ye = y.e / LOG_BASE,\n                xc = x.c,\n                yc = y.c;\n\n            if (!xe || !ye) {\n\n                // Return ±Infinity if either ±Infinity.\n                if (!xc || !yc) return new BigNumber(a / 0);\n\n                // Either zero?\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n            }\n\n            xe = bitFloor(xe);\n            ye = bitFloor(ye);\n            xc = xc.slice();\n\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n            if (a = xe - ye) {\n                if (a > 0) {\n                    ye = xe;\n                    t = yc;\n                } else {\n                    a = -a;\n                    t = xc;\n                }\n\n                t.reverse();\n                for (; a--; t.push(0));\n                t.reverse();\n            }\n\n            a = xc.length;\n            b = yc.length;\n\n            // Point xc to the longer array, and b to the shorter length.\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n            for (a = 0; b;) {\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n            }\n\n            if (a) {\n                xc = [a].concat(xc);\n                ++ye;\n            }\n\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n            // ye = MAX_EXP + 1 possible\n            return normalise(y, xc, ye);\n        };\n\n\n        /*\n         * If sd is undefined or null or true or false, return the number of significant digits of\n         * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\n         * If sd is true include integer-part trailing zeros in the count.\n         *\n         * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\n         * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\n         * ROUNDING_MODE if rm is omitted.\n         *\n         * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\n         *                     boolean: whether to count integer-part trailing zeros: true or false.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.precision = P.sd = function (sd, rm) {\n            var c, n, v,\n                x = this;\n\n            if (sd != null && sd !== !!sd) {\n                intCheck(sd, 1, MAX);\n                if (rm == null) rm = ROUNDING_MODE;\n                else intCheck(rm, 0, 8);\n\n                return round(new BigNumber(x), sd, rm);\n            }\n\n            if (!(c = x.c)) return null;\n            v = c.length - 1;\n            n = v * LOG_BASE + 1;\n\n            if (v = c[v]) {\n\n                // Subtract the number of trailing zeros of the last element.\n                for (; v % 10 == 0; v /= 10, n--);\n\n                // Add the number of digits of the first element.\n                for (v = c[0]; v >= 10; v /= 10, n++);\n            }\n\n            if (sd && x.e + 1 > n) n = x.e + 1;\n\n            return n;\n        };\n\n\n        /*\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\n         *\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\n         */\n        P.shiftedBy = function (k) {\n            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n            return this.times('1e' + k);\n        };\n\n\n        /*\n         *  sqrt(-n) =  N\n         *  sqrt(N) =  N\n         *  sqrt(-I) =  N\n         *  sqrt(I) =  I\n         *  sqrt(0) =  0\n         *  sqrt(-0) = -0\n         *\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\n         */\n        P.squareRoot = P.sqrt = function () {\n            var m, n, r, rep, t,\n                x = this,\n                c = x.c,\n                s = x.s,\n                e = x.e,\n                dp = DECIMAL_PLACES + 4,\n                half = new BigNumber('0.5');\n\n            // Negative/NaN/Infinity/zero?\n            if (s !== 1 || !c || !c[0]) {\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n            }\n\n            // Initial estimate.\n            s = Math.sqrt(+x);\n\n            // Math.sqrt underflow/overflow?\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n            if (s == 0 || s == 1 / 0) {\n                n = coeffToString(c);\n                if ((n.length + e) % 2 == 0) n += '0';\n                s = Math.sqrt(n);\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n\n                if (s == 1 / 0) {\n                    n = '1e' + e;\n                } else {\n                    n = s.toExponential();\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\n                }\n\n                r = new BigNumber(n);\n            } else {\n                r = new BigNumber(s + '');\n            }\n\n            // Check for zero.\n            // r could be zero if MIN_EXP is changed after the this value was created.\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n            // coeffToString to throw.\n            if (r.c[0]) {\n                e = r.e;\n                s = e + dp;\n                if (s < 3) s = 0;\n\n                // Newton-Raphson iteration.\n                for (; ;) {\n                    t = r;\n                    r = half.times(t.plus(div(x, t, dp, 1)));\n\n                    if (coeffToString(t.c  ).slice(0, s) === (n =\n                        coeffToString(r.c)).slice(0, s)) {\n\n                        // The exponent of r may here be one less than the final result exponent,\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n                        // are indexed correctly.\n                        if (r.e < e) --s;\n                        n = n.slice(s - 3, s + 1);\n\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n                        // iteration.\n                        if (n == '9999' || !rep && n == '4999') {\n\n                            // On the first iteration only, check to see if rounding up gives the\n                            // exact result as the nines may infinitely repeat.\n                            if (!rep) {\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\n\n                                if (t.times(t).eq(x)) {\n                                    r = t;\n                                    break;\n                                }\n                            }\n\n                            dp += 4;\n                            s += 4;\n                            rep = 1;\n                        } else {\n\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n                            // result. If not, then there are further digits and m will be truthy.\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n\n                                // Truncate to the first rounding digit.\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\n                                m = !r.times(r).eq(x);\n                            }\n\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in exponential notation and\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toExponential = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp++;\n            }\n            return format(this, dp, rm, 1);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\n         *\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFixed = function (dp, rm) {\n            if (dp != null) {\n                intCheck(dp, 0, MAX);\n                dp = dp + this.e + 1;\n            }\n            return format(this, dp, rm);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\n         * of the FORMAT object (see BigNumber.set).\n         *\n         * FORMAT = {\n         *      decimalSeparator : '.',\n         *      groupSeparator : ',',\n         *      groupSize : 3,\n         *      secondaryGroupSize : 0,\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\n         *      fractionGroupSize : 0\n         * };\n         *\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\n         */\n        P.toFormat = function (dp, rm) {\n            var str = this.toFixed(dp, rm);\n\n            if (this.c) {\n                var i,\n                    arr = str.split('.'),\n                    g1 = +FORMAT.groupSize,\n                    g2 = +FORMAT.secondaryGroupSize,\n                    groupSeparator = FORMAT.groupSeparator,\n                    intPart = arr[0],\n                    fractionPart = arr[1],\n                    isNeg = this.s < 0,\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\n                    len = intDigits.length;\n\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n\n                if (g1 > 0 && len > 0) {\n                    i = len % g1 || g1;\n                    intPart = intDigits.substr(0, i);\n\n                    for (; i < len; i += g1) {\n                        intPart += groupSeparator + intDigits.substr(i, g1);\n                    }\n\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n                    if (isNeg) intPart = '-' + intPart;\n                }\n\n                str = fractionPart\n                    ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\n                    ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\n                        '$&' + FORMAT.fractionGroupSeparator)\n                    : fractionPart)\n                    : intPart;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return a string array representing the value of this BigNumber as a simple fraction with\n         * an integer numerator and an integer denominator. The denominator will be a positive\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\n         * denominator is not specified, the denominator will be the lowest value necessary to\n         * represent the number exactly.\n         *\n         * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\n         *\n         * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\n         */\n        P.toFraction = function (md) {\n            var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\n                x = this,\n                xc = x.c;\n\n            if (md != null) {\n                n = new BigNumber(md);\n\n                // Throw if md is less than one or is not an integer, unless it is Infinity.\n                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n                    throw Error\n                    (bignumberError + 'Argument ' +\n                        (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\n                }\n            }\n\n            if (!xc) return x.toString();\n\n            d = new BigNumber(ONE);\n            n1 = d0 = new BigNumber(ONE);\n            d1 = n0 = new BigNumber(ONE);\n            s = coeffToString(xc);\n\n            // Determine initial denominator.\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n            e = d.e = s.length - x.e - 1;\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n            md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\n\n            exp = MAX_EXP;\n            MAX_EXP = 1 / 0;\n            n = new BigNumber(s);\n\n            // n0 = d1 = 0\n            n0.c[0] = 0;\n\n            for (; ;)  {\n                q = div(n, d, 0, 1);\n                d2 = d0.plus(q.times(d1));\n                if (d2.comparedTo(md) == 1) break;\n                d0 = d1;\n                d1 = d2;\n                n1 = n0.plus(q.times(d2 = n1));\n                n0 = d2;\n                d = n.minus(q.times(d2 = d));\n                n = d2;\n            }\n\n            d2 = div(md.minus(d0), d1, 0, 1);\n            n0 = n0.plus(d2.times(n1));\n            d0 = d0.plus(d2.times(d1));\n            n0.s = n1.s = x.s;\n            e *= 2;\n\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\n                div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\n                ? [n1.toString(), d1.toString()]\n                : [n0.toString(), d0.toString()];\n\n            MAX_EXP = exp;\n            return arr;\n        };\n\n\n        /*\n         * Return the value of this BigNumber converted to a number primitive.\n         */\n        P.toNumber = function () {\n            return +this;\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\n         * necessary to represent the integer part of the value in fixed-point notation, then use\n         * exponential notation.\n         *\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\n         *\n         * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\n         */\n        P.toPrecision = function (sd, rm) {\n            if (sd != null) intCheck(sd, 1, MAX);\n            return format(this, sd, rm, 2);\n        };\n\n\n        /*\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\n         * TO_EXP_NEG, return exponential notation.\n         *\n         * [b] {number} Integer, 2 to ALPHABET.length inclusive.\n         *\n         * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n         */\n        P.toString = function (b) {\n            var str,\n                n = this,\n                s = n.s,\n                e = n.e;\n\n            // Infinity or NaN?\n            if (e === null) {\n\n                if (s) {\n                    str = 'Infinity';\n                    if (s < 0) str = '-' + str;\n                } else {\n                    str = 'NaN';\n                }\n            } else {\n                str = coeffToString(n.c);\n\n                if (b == null) {\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                        ? toExponential(str, e)\n                        : toFixedPoint(str, e, '0');\n                } else {\n                    intCheck(b, 2, ALPHABET.length, 'Base');\n                    str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n                }\n\n                if (s < 0 && n.c[0]) str = '-' + str;\n            }\n\n            return str;\n        };\n\n\n        /*\n         * Return as toString, but do not accept a base argument, and include the minus sign for\n         * negative zero.\n         */\n        P.valueOf = P.toJSON = function () {\n            var str,\n                n = this,\n                e = n.e;\n\n            if (e === null) return n.toString();\n\n            str = coeffToString(n.c);\n\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\n                ? toExponential(str, e)\n                : toFixedPoint(str, e, '0');\n\n            return n.s < 0 ? '-' + str : str;\n        };\n\n\n        P._isBigNumber = true;\n\n        if (configObject != null) BigNumber.set(configObject);\n\n        return BigNumber;\n    }\n\n\n    // PRIVATE HELPER FUNCTIONS\n\n\n    function bitFloor(n) {\n        var i = n | 0;\n        return n > 0 || n === i ? i : i - 1;\n    }\n\n\n    // Return a coefficient array as a string of base 10 digits.\n    function coeffToString(a) {\n        var s, z,\n            i = 1,\n            j = a.length,\n            r = a[0] + '';\n\n        for (; i < j;) {\n            s = a[i++] + '';\n            z = LOG_BASE - s.length;\n            for (; z--; s = '0' + s);\n            r += s;\n        }\n\n        // Determine trailing zeros.\n        for (j = r.length; r.charCodeAt(--j) === 48;);\n        return r.slice(0, j + 1 || 1);\n    }\n\n\n    // Compare the value of BigNumbers x and y.\n    function compare(x, y) {\n        var a, b,\n            xc = x.c,\n            yc = y.c,\n            i = x.s,\n            j = y.s,\n            k = x.e,\n            l = y.e;\n\n        // Either NaN?\n        if (!i || !j) return null;\n\n        a = xc && !xc[0];\n        b = yc && !yc[0];\n\n        // Either zero?\n        if (a || b) return a ? b ? 0 : -j : i;\n\n        // Signs differ?\n        if (i != j) return i;\n\n        a = i < 0;\n        b = k == l;\n\n        // Either Infinity?\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n        // Compare exponents.\n        if (!b) return k > l ^ a ? 1 : -1;\n\n        j = (k = xc.length) < (l = yc.length) ? k : l;\n\n        // Compare digit by digit.\n        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n        // Compare lengths.\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\n    }\n\n\n    /*\n     * Check that n is a primitive number, an integer, and in range, otherwise throw.\n     */\n    function intCheck(n, min, max, name) {\n        if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n            throw Error\n            (bignumberError + (name || 'Argument') + (typeof n == 'number'\n                ? n < min || n > max ? ' out of range: ' : ' not an integer: '\n                : ' not a primitive number: ') + n);\n        }\n    }\n\n\n    function isArray(obj) {\n        return Object.prototype.toString.call(obj) == '[object Array]';\n    }\n\n\n    // Assumes finite n.\n    function isOdd(n) {\n        var k = n.c.length - 1;\n        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n    }\n\n\n    function toExponential(str, e) {\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\n            (e < 0 ? 'e' : 'e+') + e;\n    }\n\n\n    function toFixedPoint(str, e, z) {\n        var len, zs;\n\n        // Negative exponent?\n        if (e < 0) {\n\n            // Prepend zeros.\n            for (zs = z + '.'; ++e; zs += z);\n            str = zs + str;\n\n            // Positive exponent\n        } else {\n            len = str.length;\n\n            // Append zeros.\n            if (++e > len) {\n                for (zs = z, e -= len; --e; zs += z);\n                str += zs;\n            } else if (e < len) {\n                str = str.slice(0, e) + '.' + str.slice(e);\n            }\n        }\n\n        return str;\n    }\n\n\n    // EXPORT\n\n\n    BigNumber = clone();\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\n    globalObject.BigNumber = BigNumber;\n})(Class.scope);\nconst BigNumber = Class.scope.BigNumber;\nBigNumber.config({ DECIMAL_PLACES: 10 });\n","class NumberUtils {\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint8(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT8_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint16(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT16_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint32(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT32_MAX;\n    }\n\n    /**\n     * @param {number} val\n     * @return {boolean}\n     */\n    static isUint64(val) {\n        return Number.isInteger(val)\n            && val >= 0 && val <= NumberUtils.UINT64_MAX;\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint32() {\n        return Math.floor(Math.random() * (NumberUtils.UINT32_MAX + 1));\n    }\n\n    /**\n     * @return {number}\n     */\n    static randomUint64() {\n        return Math.floor(Math.random() * (NumberUtils.UINT64_MAX + 1));\n    }\n\n    /**\n     * @param {string} bin\n     * @return {number}\n     */\n    static fromBinary(bin) {\n        return parseInt(bin, 2);\n    }\n}\n\nNumberUtils.UINT8_MAX = 255;\nNumberUtils.UINT16_MAX = 65535;\nNumberUtils.UINT32_MAX = 4294967295;\nNumberUtils.UINT64_MAX = Number.MAX_SAFE_INTEGER;\n//Object.freeze(NumberUtils);\nClass.register(NumberUtils);\n","class BufferUtils {\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toAscii(buffer) {\n        const chunkSize = 0x2000;\n        const buf = BufferUtils._toUint8View(buffer);\n\n        let ascii = '';\n        for (let i = 0; i < buf.length; i += chunkSize) {\n            ascii += String.fromCharCode.apply(null, buf.subarray(i, i + chunkSize));\n        }\n        return ascii;\n    }\n\n    /**\n     * @param {string} string\n     * @return {Uint8Array}\n     */\n    static fromAscii(string) {\n        const buf = new Uint8Array(string.length);\n        for (let i = 0; i < string.length; ++i) {\n            buf[i] = string.charCodeAt(i);\n        }\n        return buf;\n    }\n\n    static _codePointTextDecoder(buffer) {\n        if (typeof TextDecoder === 'undefined') throw new Error('TextDecoder not supported');\n        if (BufferUtils._ISO_8859_15_DECODER === null) throw new Error('TextDecoder does not support iso-8859-15');\n        if (BufferUtils._ISO_8859_15_DECODER === undefined) {\n            try {\n                BufferUtils._ISO_8859_15_DECODER = new TextDecoder('iso-8859-15');\n            } catch (e) {\n                BufferUtils._ISO_8859_15_DECODER = null;\n                throw new Error('TextDecoder does not support iso-8859-15');\n            }\n        }\n        const uint8View = BufferUtils._toUint8View(buffer);\n        return BufferUtils._ISO_8859_15_DECODER.decode(uint8View)\n            .replace('€', '¤').replace('Š', '¦').replace('š', '¨').replace('Ž', '´')\n            .replace('ž', '¸').replace('Œ', '¼').replace('œ', '½').replace('Ÿ', '¾');\n    }\n\n    static _tripletToBase64(num) {\n        return BufferUtils._BASE64_LOOKUP[num >> 18 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 12 & 0x3F] + BufferUtils._BASE64_LOOKUP[num >> 6 & 0x3F] + BufferUtils._BASE64_LOOKUP[num & 0x3F];\n    }\n\n    static _base64encodeChunk(u8, start, end) {\n        let tmp;\n        const output = [];\n        for (let i = start; i < end; i += 3) {\n            tmp = ((u8[i] << 16) & 0xFF0000) + ((u8[i + 1] << 8) & 0xFF00) + (u8[i + 2] & 0xFF);\n            output.push(BufferUtils._tripletToBase64(tmp));\n        }\n        return output.join('');\n    }\n\n    static _base64fromByteArray(u8) {\n        let tmp;\n        const len = u8.length;\n        const extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        let output = '';\n        const parts = [];\n        const maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (let i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n            parts.push(BufferUtils._base64encodeChunk(u8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n            tmp = u8[len - 1];\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 2];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 4) & 0x3F];\n            output += '==';\n        } else if (extraBytes === 2) {\n            tmp = (u8[len - 2] << 8) + (u8[len - 1]);\n            output += BufferUtils._BASE64_LOOKUP[tmp >> 10];\n            output += BufferUtils._BASE64_LOOKUP[(tmp >> 4) & 0x3F];\n            output += BufferUtils._BASE64_LOOKUP[(tmp << 2) & 0x3F];\n            output += '=';\n        }\n\n        parts.push(output);\n\n        return parts.join('');\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64(buffer) {\n        if (PlatformUtils.isNodeJs()) {\n            return Buffer.from(buffer).toString('base64');\n        } else if (typeof TextDecoder !== 'undefined' && BufferUtils._ISO_8859_15_DECODER !== null) {\n            try {\n                return btoa(BufferUtils._codePointTextDecoder(buffer));\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n\n        return BufferUtils._base64fromByteArray(BufferUtils._toUint8View(buffer));\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toBase64Url(buffer) {\n        return BufferUtils.toBase64(buffer).replace(/\\//g, '_').replace(/\\+/g, '-').replace(/=/g, '.');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {SerialBuffer}\n     */\n    static fromBase64Url(base64) {\n        return new SerialBuffer(Uint8Array.from(atob(base64.replace(/_/g, '/').replace(/-/g, '+').replace(/\\./g, '=')), c => c.charCodeAt(0)));\n    }\n\n    /**\n     * @param {Uint8Array} buf\n     * @param {string} [alphabet] Alphabet to use\n     * @return {string}\n     */\n    static toBase32(buf, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        let shift = 3, carry = 0, byte, symbol, i, res = '';\n\n        for (i = 0; i < buf.length; i++) {\n            byte = buf[i];\n            symbol = carry | (byte >> shift);\n            res += alphabet[symbol & 0x1f];\n\n            if (shift > 5) {\n                shift -= 5;\n                symbol = byte >> shift;\n                res += alphabet[symbol & 0x1f];\n            }\n\n            shift = 5 - shift;\n            carry = byte << shift;\n            shift = 8 - shift;\n        }\n\n        if (shift !== 3) {\n            res += alphabet[carry & 0x1f];\n        }\n\n        while (res.length % 8 !== 0 && alphabet.length === 33) {\n            res += alphabet[32];\n        }\n\n        return res;\n    }\n\n    /**\n     * @param {string} base32\n     * @param {string} [alphabet] Alphabet to use\n     * @return {Uint8Array}\n     */\n    static fromBase32(base32, alphabet = BufferUtils.BASE32_ALPHABET.NIMIQ) {\n        const charmap = [];\n        alphabet.toUpperCase().split('').forEach((c, i) => {\n            if (!(c in charmap)) charmap[c] = i;\n        });\n\n        let symbol, shift = 8, carry = 0, buf = [];\n        base32.toUpperCase().split('').forEach((char) => {\n            // ignore padding\n            if (alphabet.length === 33 && char === alphabet[32]) return;\n\n            symbol = charmap[char] & 0xff;\n\n            shift -= 5;\n            if (shift > 0) {\n                carry |= symbol << shift;\n            } else if (shift < 0) {\n                buf.push(carry | (symbol >> -shift));\n                shift += 8;\n                carry = (symbol << shift) & 0xff;\n            } else {\n                buf.push(carry | symbol);\n                shift = 8;\n                carry = 0;\n            }\n        });\n\n        if (shift !== 8 && carry !== 0) {\n            buf.push(carry);\n        }\n\n        return new Uint8Array(buf);\n    }\n\n    /**\n     * @param {*} buffer\n     * @return {string}\n     */\n    static toHex(buffer) {\n        let hex = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            hex += BufferUtils.HEX_ALPHABET[code >>> 4];\n            hex += BufferUtils.HEX_ALPHABET[code & 0x0F];\n        }\n        return hex;\n    }\n\n    /**\n     * @param {string} hex\n     * @return {SerialBuffer}\n     */\n    static fromHex(hex) {\n        hex = hex.trim();\n        if (!StringUtils.isHexBytes(hex)) return null;\n        return new SerialBuffer(Uint8Array.from(hex.match(/.{2}/g) || [], byte => parseInt(byte, 16)));\n    }\n\n    /**\n     * @param {*} bytes\n     * @return {string}\n     */\n    static toBinary(buffer) {\n        let bin = '';\n        for (let i = 0; i < buffer.length; i++) {\n            const code = buffer[i];\n            bin += StringUtils.lpad(code.toString(2), '0', 8);\n        }\n        return bin;\n    }\n\n    /**\n     * Taken from https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js.\n     *\n     * @param {string} str\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _strToUint8Array(str) {\n        const out = [];\n        let p = 0;\n        for (let i = 0; i < str.length; i++) {\n            let c = str.charCodeAt(i);\n            if (c < 128) {\n                out[p++] = c;\n            } else if (c < 2048) {\n                out[p++] = (c >> 6) | 192;\n                out[p++] = (c & 63) | 128;\n            } else if (\n                ((c & 0xFC00) === 0xD800) && (i + 1) < str.length &&\n                ((str.charCodeAt(i + 1) & 0xFC00) === 0xDC00)) {\n                // Surrogate Pair\n                c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n                out[p++] = (c >> 18) | 240;\n                out[p++] = ((c >> 12) & 63) | 128;\n                out[p++] = ((c >> 6) & 63) | 128;\n                out[p++] = (c & 63) | 128;\n            } else {\n                out[p++] = (c >> 12) | 224;\n                out[p++] = ((c >> 6) & 63) | 128;\n                out[p++] = (c & 63) | 128;\n            }\n        }\n        return new Uint8Array(out);\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _utf8TextEncoder(str) {\n        if (typeof TextEncoder === 'undefined') throw new Error('TextEncoder not supported');\n        if (BufferUtils._UTF8_ENCODER === null) throw new Error('TextEncoder does not support utf8');\n        if (BufferUtils._UTF8_ENCODER === undefined) {\n            try {\n                BufferUtils._UTF8_ENCODER = new TextEncoder();\n            } catch (e) {\n                BufferUtils._UTF8_ENCODER = null;\n                throw new Error('TextEncoder does not support utf8');\n            }\n        }\n        return BufferUtils._UTF8_ENCODER.encode(str);\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Uint8Array}\n     */\n    static fromUtf8(str) {\n        if (PlatformUtils.isNodeJs()) {\n            return Buffer.from(str);\n        } else if (typeof TextEncoder !== 'undefined' && BufferUtils._UTF8_ENCODER !== null) {\n            try {\n                return BufferUtils._utf8TextEncoder(str);\n            } catch (e) {\n                // Disabled itself\n            }\n        }\n        return BufferUtils._strToUint8Array(str);\n    }\n\n\n    /**\n     * @template T\n     * @param {T} a\n     * @param {*} b\n     * @return {T}\n     */\n    static concatTypedArrays(a, b) {\n        const c = new (a.constructor)(a.length + b.length);\n        c.set(a, 0);\n        c.set(b, a.length);\n        return c;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {boolean}\n     */\n    static equals(a, b) {\n        if ((a.byteLength || a.length) !== (b.byteLength || b.length)) return false;\n        const viewA = BufferUtils._toUint8View(a);\n        const viewB = BufferUtils._toUint8View(b);\n        for (let i = 0; i < viewA.length; i++) {\n            if (viewA[i] !== viewB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {*} a\n     * @param {*} b\n     * @return {number} -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.\n     */\n    static compare(a, b) {\n        if (a.length < b.length) return -1;\n        if (a.length > b.length) return 1;\n        for (let i = 0; i < a.length; i++) {\n            if (a[i] < b[i]) return -1;\n            if (a[i] > b[i]) return 1;\n        }\n        return 0;\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @return {Uint8Array}\n     */\n    static xor(a, b) {\n        const res = new Uint8Array(a.byteLength);\n        for (let i = 0; i < a.byteLength; ++i) {\n            res[i] = a[i] ^ b[i];\n        }\n        return res;\n    }\n\n    /**\n     * @param {*} arrayLike\n     * @return {Uint8Array}\n     * @private\n     */\n    static _toUint8View(arrayLike) {\n        if (arrayLike instanceof Uint8Array) {\n            return arrayLike;\n        } if (arrayLike instanceof ArrayBuffer) {\n            return new Uint8Array(arrayLike);\n        } else if (arrayLike.buffer instanceof ArrayBuffer) {\n            return new Uint8Array(arrayLike.buffer);\n        } else {\n            return Uint8Array.from(arrayLike);\n        }\n    }\n}\nBufferUtils.BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nBufferUtils.BASE32_ALPHABET = {\n    RFC4648: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n    RFC4648_HEX: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n    NIMIQ: '0123456789ABCDEFGHJKLMNPQRSTUVXY'\n};\nBufferUtils.HEX_ALPHABET = '0123456789abcdef';\nBufferUtils._BASE64_LOOKUP = [];\nfor (let i = 0, len = BufferUtils.BASE64_ALPHABET.length; i < len; ++i) {\n    BufferUtils._BASE64_LOOKUP[i] = BufferUtils.BASE64_ALPHABET[i];\n}\n\nClass.register(BufferUtils);\n","class SerialBuffer extends Uint8Array {\n    /**\n     * @param {*} bufferOrArrayOrLength\n     */\n    constructor(bufferOrArrayOrLength) {\n        super(bufferOrArrayOrLength);\n        this._view = new DataView(this.buffer);\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} start\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    subarray(start, end) {\n        return ArrayUtils.subarray(this, start, end);\n    }\n\n    /** @type {number} */\n    get readPos() {\n        return this._readPos;\n    }\n\n    /** @type {number} */\n    set readPos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid readPos ${value}`;\n        this._readPos = value;\n    }\n\n    /** @type {number} */\n    get writePos() {\n        return this._writePos;\n    }\n\n    /** @type {number} */\n    set writePos(value) {\n        if (value < 0 || value > this.byteLength) throw `Invalid writePos ${value}`;\n        this._writePos = value;\n    }\n\n    /**\n     * Resets the read and write position of the buffer to zero.\n     * @returns {void}\n     */\n    reset() {\n        this._readPos = 0;\n        this._writePos = 0;\n    }\n\n    /**\n     * @param {number} length\n     * @return {Uint8Array}\n     */\n    read(length) {\n        const value = this.subarray(this._readPos, this._readPos + length);\n        this._readPos += length;\n        return new Uint8Array(value);\n    }\n\n    /**\n     * @param {*} array\n     */\n    write(array) {\n        this.set(array, this._writePos);\n        this._writePos += array.byteLength;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint8() {\n        return this._view.getUint8(this._readPos++);\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint8(value) {\n        this._view.setUint8(this._writePos++, value);\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint16() {\n        const value = this._view.getUint16(this._readPos);\n        this._readPos += 2;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint16(value) {\n        this._view.setUint16(this._writePos, value);\n        this._writePos += 2;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint32() {\n        const value = this._view.getUint32(this._readPos);\n        this._readPos += 4;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint32(value) {\n        this._view.setUint32(this._writePos, value);\n        this._writePos += 4;\n    }\n\n    /**\n     * @return {number}\n     */\n    readUint64() {\n        const value = this._view.getUint32(this._readPos) * Math.pow(2, 32) + this._view.getUint32(this._readPos + 4);\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeUint64(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        this._view.setUint32(this._writePos, Math.floor(value / Math.pow(2, 32)));\n        this._view.setUint32(this._writePos + 4, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @return {number}\n     */\n    readVarUint() {\n        const value = this.readUint8();\n        if (value < 0xFD) {\n            return value;\n        } else if (value === 0xFD) {\n            return this.readUint16();\n        } else if (value === 0xFE) {\n            return this.readUint32();\n        } else /*if (value === 0xFF)*/ {\n            return this.readUint64();\n        }\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeVarUint(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            this.writeUint8(value);\n        } else if (value <= 0xFFFF) {\n            this.writeUint8(0xFD);\n            this.writeUint16(value);\n        } else if (value <= 0xFFFFFFFF) {\n            this.writeUint8(0xFE);\n            this.writeUint32(value);\n        } else {\n            this.writeUint8(0xFF);\n            this.writeUint64(value);\n        }\n    }\n\n    /**\n     * @param {number} value\n     * @returns {number}\n     */\n    static varUintSize(value) {\n        if (!NumberUtils.isUint64(value)) throw new Error('Malformed value');\n        if (value < 0xFD) {\n            return 1;\n        } else if (value <= 0xFFFF) {\n            return 3;\n        } else if (value <= 0xFFFFFFFF) {\n            return 5;\n        } else {\n            return 9;\n        }\n    }\n\n    /**\n     * @return {number}\n     */\n    readFloat64() {\n        const value = this._view.getFloat64(this._readPos);\n        this._readPos += 8;\n        return value;\n    }\n\n    /**\n     * @param {number} value\n     */\n    writeFloat64(value) {\n        this._view.setFloat64(this._writePos, value);\n        this._writePos += 8;\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readString(length) {\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writeString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length !== length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {number} length\n     * @return {string}\n     */\n    readPaddedString(length) {\n        const bytes = this.read(length);\n        let i = 0;\n        while (i < length && bytes[i] !== 0x0) i++;\n        const view = new Uint8Array(bytes.buffer, bytes.byteOffset, i);\n        return BufferUtils.toAscii(view);\n    }\n\n    /**\n     * @param {string} value\n     * @param {number} length\n     */\n    writePaddedString(value, length) {\n        if (StringUtils.isMultibyte(value) || value.length > length) throw 'Malformed value/length';\n        const bytes = BufferUtils.fromAscii(value);\n        this.write(bytes);\n        const padding = length - bytes.byteLength;\n        this.write(new Uint8Array(padding));\n    }\n\n    /**\n     * @return {string}\n     */\n    readVarLengthString() {\n        const length = this.readUint8();\n        if (this._readPos + length > this.length) throw 'Malformed length';\n        const bytes = this.read(length);\n        return BufferUtils.toAscii(bytes);\n    }\n\n    /**\n     * @param {string} value\n     */\n    writeVarLengthString(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        const bytes = BufferUtils.fromAscii(value);\n        this.writeUint8(bytes.byteLength);\n        this.write(bytes);\n    }\n\n    /**\n     * @param {string} value\n     * @returns {number}\n     */\n    static varLengthStringSize(value) {\n        if (StringUtils.isMultibyte(value) || !NumberUtils.isUint8(value.length)) throw new Error('Malformed value');\n        return /*length*/ 1 + value.length;\n    }\n}\nClass.register(SerialBuffer);\n","/**\n * @interface\n */\nclass MinerWorker {\n    /**\n     * @param blockHeader\n     * @param compact\n     * @param minNonce\n     * @param maxNonce\n     * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n     */\n    async multiMine(blockHeader, compact, minNonce, maxNonce) {}\n}\nClass.register(MinerWorker);\n","class MinerWorkerImpl extends IWorker.Stub(MinerWorker) {\n    constructor() {\n        super();\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superInit = super.init;\n    }\n\n    async init(name) {\n        await this._superInit.call(this, name);\n        if (PlatformUtils.isBrowser()) await WasmHelper.doImportBrowser();\n    }\n\n    async multiMine(input, compact, minNonce, maxNonce) {\n        const hash = new Uint8Array(32);\n        let wasmOut, wasmIn;\n        try {\n            wasmOut = Module._malloc(hash.length);\n            wasmIn = Module._malloc(input.length);\n            Module.HEAPU8.set(input, wasmIn);\n            const nonce = Module._nimiq_argon2_target(wasmOut, wasmIn, input.length, compact, minNonce, maxNonce, 512);\n            if (nonce === maxNonce) return false;\n            hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hash.length));\n            return {hash, nonce};\n        } catch (e) {\n            Log.w(MinerWorkerImpl, e);\n            throw e;\n        } finally {\n            if (wasmOut !== undefined) Module._free(wasmOut);\n            if (wasmIn !== undefined) Module._free(wasmIn);\n        }\n    }\n}\n\nIWorker.prepareForWorkerUse(MinerWorker, new MinerWorkerImpl());\n","/**\n *\n */\nclass MinerWorkerPool extends IWorker.Pool(MinerWorker) {\n    constructor(size = 1) {\n        super((name) => IWorker.startWorkerForProxy(MinerWorker, name), 'miner', size);\n        /** @type {boolean} */\n        this._miningEnabled = false;\n        /** @type {Array.<{minNonce: number, maxNonce: number}>} */\n        this._activeNonces = [];\n        /** @type {Block} */\n        this._block = null;\n        /** @type {number} */\n        this._noncesPerRun = 256;\n        /** @type {Observable} */\n        this._observable = new Observable();\n        /** @type {number} */\n        this._shareCompact = Policy.BLOCK_TARGET_MAX;\n        /** @type {number} */\n        this._runsPerCycle = Infinity;\n        /** @type {number} */\n        this._cycleWait = 100;\n\n        // FIXME: This is needed for Babel to work correctly. Can be removed as soon as we updated to Babel v7.\n        this._superUpdateToSize = super._updateToSize;\n\n        if (PlatformUtils.isNodeJs()) {\n            Log.i(MinerWorkerPool, `Using add-on optimized for instruction set: ${cpuSupport}`);\n\n            /**\n             * @param {SerialBuffer} blockHeader\n             * @param {number} compact\n             * @param {number} minNonce\n             * @param {number} maxNonce\n             * @returns {Promise.<{hash: Uint8Array, nonce: number}|boolean>}\n             */\n            this.multiMine = function (blockHeader, compact, minNonce, maxNonce) {\n                return new Promise((resolve, fail) => {\n                    NodeNative.node_argon2_target_async(async (nonce) => {\n                        try {\n                            if (nonce === maxNonce) {\n                                resolve(false);\n                            } else {\n                                blockHeader.writePos -= 4;\n                                blockHeader.writeUint32(nonce);\n                                const hash = await (await CryptoWorker.getInstanceAsync()).computeArgon2d(blockHeader);\n                                resolve({hash, nonce});\n                            }\n                        } catch (e) {\n                            fail(e);\n                        }\n                    }, blockHeader, compact, minNonce, maxNonce, 512);\n                });\n            };\n        }\n    }\n\n    /**\n     * @type {number}\n     */\n    get noncesPerRun() {\n        return this._noncesPerRun;\n    }\n\n    /**\n     * @param {number} nonces\n     */\n    set noncesPerRun(nonces) {\n        this._noncesPerRun = nonces;\n    }\n\n    /**\n     * @type {number}\n     */\n    get runsPerCycle() {\n        return this._runsPerCycle;\n    }\n\n    /**\n     * @param {number} runsPerCycle\n     */\n    set runsPerCycle(runsPerCycle) {\n        this._runsPerCycle = runsPerCycle;\n    }\n\n    /**\n     * @type {number}\n     */\n    get cycleWait() {\n        return this._cycleWait;\n    }\n\n    /**\n     * @param {number} cycleWait\n     */\n    set cycleWait(cycleWait) {\n        this._cycleWait = cycleWait;\n    }\n\n    /**\n     * @param {string} type\n     * @param {Function} callback\n     * @return {number}\n     */\n    on(type, callback) { return this._observable.on(type, callback); }\n\n    /**\n     * @param {string} type\n     * @param {number} id\n     */\n    off(type, id) { this._observable.off(type, id); }\n\n    /**\n     * @param {Block} block\n     * @param {number} [shareCompact] target of a share, in compact format.\n     */\n    async startMiningOnBlock(block, shareCompact) {\n        this._block = block;\n        this._shareCompact = shareCompact || block.nBits;\n        if (!this._miningEnabled) {\n            await this._updateToSize();\n            this._activeNonces = [];\n            this._miningEnabled = true;\n            for (let i = 0; i < this.poolSize; ++i) {\n                this._startMiner();\n            }\n        } else {\n            this._activeNonces = [{minNonce:0, maxNonce:0}];\n        }\n    }\n\n    stop() {\n        this._miningEnabled = false;\n    }\n\n    async _updateToSize() {\n        if (!PlatformUtils.isNodeJs()) {\n            await this._superUpdateToSize.call(this);\n        }\n\n        while (this._miningEnabled && this._activeNonces.length < this.poolSize) {\n            this._startMiner();\n        }\n    }\n\n    _startMiner() {\n        if (this._activeNonces.length >= this.poolSize) {\n            return;\n        }\n\n        const minNonce = this._activeNonces.length === 0 ? 0 : Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n        const maxNonce = minNonce + this._noncesPerRun;\n        const nonceRange = {minNonce, maxNonce};\n        this._activeNonces.push(nonceRange);\n        this._singleMiner(nonceRange).catch((e) => Log.e(MinerWorkerPool, e));\n    }\n\n    /**\n     * @param {{minNonce: number, maxNonce: number}} nonceRange\n     * @return {Promise.<void>}\n     * @private\n     */\n    async _singleMiner(nonceRange) {\n        let i = 0;\n        while (this._miningEnabled && (IWorker.areWorkersAsync || PlatformUtils.isNodeJs() || i === 0) && i < this._runsPerCycle) {\n            i++;\n            const block = this._block;\n            const result = await this.multiMine(block.header.serialize(), this._shareCompact, nonceRange.minNonce, nonceRange.maxNonce);\n            if (result) {\n                const hash = new Hash(result.hash);\n                this._observable.fire('share', {\n                    block,\n                    nonce: result.nonce,\n                    hash\n                });\n            } else {\n                this._observable.fire('no-share', {\n                    nonce: nonceRange.maxNonce\n                });\n            }\n            if (this._activeNonces.length > this.poolSize) {\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1);\n                return;\n            } else {\n                const newMin = Math.max.apply(null, this._activeNonces.map((a) => a.maxNonce));\n                const newRange = {minNonce: newMin, maxNonce: newMin + this._noncesPerRun};\n                this._activeNonces.splice(this._activeNonces.indexOf(nonceRange), 1, newRange);\n                nonceRange = newRange;\n            }\n        }\n        if (this._miningEnabled) {\n            setTimeout(() => this._singleMiner(nonceRange), this._cycleWait);\n        }\n    }\n}\n\nClass.register(MinerWorkerPool);\n","class PlatformUtils {\n    /**\n     * @returns {boolean}\n     */\n    static isBrowser() {\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isWeb() {\n        return typeof window !== 'undefined';\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isNodeJs() {\n        return false;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWebRTC() {\n        const RTCPeerConnection = PlatformUtils.isBrowser() ? (window.RTCPeerConnection || window.webkitRTCPeerConnection) : null;\n        return !!RTCPeerConnection;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static supportsWS() {\n        return location && location.protocol === 'http:';\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isOnline() {\n        return !('onLine' in window.navigator) || window.navigator.onLine;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    static isWindows() {\n        return /^win/.test(window.navigator.platform);\n    }\n\n    static get userAgentString() {\n        try {\n            return window.navigator.platform;\n        } catch (e) {\n            return 'unknown';\n        }\n    }\n\n    static get hardwareConcurrency() {\n        if (typeof navigator === 'object' && navigator.hardwareConcurrency) {\n            return navigator.hardwareConcurrency;\n        } else {\n            return 1;\n        }\n    }\n}\n\nClass.register(PlatformUtils);\n","class WasmHelper {\n\n    static async doImport() {\n        return WasmHelper.doImportBrowser();\n    }\n\n    static async doImportBrowser() {\n        WasmHelper._importBrowserPromise = WasmHelper._importBrowserPromise || (async () => {\n            if (await WasmHelper.importWasmBrowser('worker-wasm.wasm')) {\n                await WasmHelper.importScriptBrowser('worker-wasm.js');\n            } else {\n                await WasmHelper.importScriptBrowser('worker-js.js');\n            }\n        })();\n        try {\n            await WasmHelper._importBrowserPromise;\n        } catch (e) {\n            WasmHelper._importBrowserPromise = null;\n            throw e;\n        }\n    }\n\n    /**\n     * @param {string} wasm\n     * @param {string} module\n     * @returns {Promise.<boolean>}\n     */\n    static async importWasm(wasm, module = 'Module') {\n        return WasmHelper.importWasmBrowser(wasm, module);\n    }\n\n    /**\n     * @param {string} wasm\n     * @param {string} module\n     * @returns {Promise.<boolean>}\n     */\n    static async importWasmBrowser(wasm, module = 'Module') {\n        wasm = WasmHelper._adjustWasmPath(wasm);\n        if (!WasmHelper._global.WebAssembly) {\n            Log.w(WasmHelper, 'No support for WebAssembly available.');\n            return Promise.resolve(false);\n        }\n\n        return new Promise((resolve) => {\n            try {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', wasm, true);\n                xhr.responseType = 'arraybuffer';\n                xhr.onload = function () {\n                    WasmHelper._global[module] = WasmHelper._global[module] || {};\n                    WasmHelper._global[module].wasmBinary = xhr.response;\n                    resolve(true);\n                };\n                xhr.onerror = function () {\n                    Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                    resolve(false);\n                };\n                xhr.send(null);\n            } catch (e) {\n                Log.w(WasmHelper, `Failed to access WebAssembly module ${wasm}`);\n                resolve(false);\n            }\n        });\n    }\n\n    static async importScript(script, module = 'Module') {\n        return WasmHelper.importScriptBrowser(script, module);\n    }\n\n    static async importScriptBrowser(script, module = 'Module') {\n        if (module && WasmHelper._global[module] && WasmHelper._global[module].asm) return false;\n        script = WasmHelper._adjustScriptPath(script);\n\n        const moduleSettings = WasmHelper._global[module] || {};\n        return new Promise(async (resolve, reject) => {\n            if (module) {\n                moduleSettings.onRuntimeInitialized = () => resolve(true);\n            }\n            if (typeof importScripts === 'function') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    importScripts(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof window === 'object') {\n                await new Promise((resolve) => {\n                    WasmHelper._moduleLoadedCallbacks[module] = resolve;\n                    WasmHelper._loadBrowserScript(script);\n                });\n                WasmHelper._global[module] = WasmHelper._global[module](moduleSettings);\n                if (!module) resolve(true);\n            } else if (typeof require === 'function') {\n                WasmHelper._global[module] = require(script)(moduleSettings);\n                if (!module) resolve(true);\n            } else {\n                reject('No way to load scripts.');\n            }\n        });\n    }\n\n    static fireModuleLoaded(module = 'Module') {\n        if (typeof WasmHelper._moduleLoadedCallbacks[module] === 'function') {\n            WasmHelper._moduleLoadedCallbacks[module]();\n            WasmHelper._moduleLoadedCallbacks[module] = null;\n        }\n    }\n\n    static _loadBrowserScript(url) {\n        const head = document.getElementsByTagName('head')[0];\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        head.appendChild(script);\n    }\n\n    static _adjustWasmPath(wasm) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) wasm = `${Nimiq._path}${wasm}`;\n        if (typeof __dirname === 'string' && wasm.indexOf('/') === -1) wasm = `${__dirname}/${wasm}`;\n        return wasm;\n    }\n\n    static _adjustScriptPath(script) {\n        if (typeof Nimiq !== 'undefined' && Nimiq._path) script = `${Nimiq._path}${script}`;\n        if (typeof __dirname === 'string' && script.indexOf('/') === -1) script = `${__dirname}/${script}`;\n        return script;\n    }\n\n    static get _global() {\n        return typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : null;\n    }\n}\n\nWasmHelper._moduleLoadedCallbacks = {};\n\nClass.register(WasmHelper);\n","class GenesisConfig {}\nClass.register(GenesisConfig);\n","class ArrayUtils {\n    /**\n     * @template T\n     * @param {Array.<T>} arr\n     * @return {T}\n     */\n    static randomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    /**\n     * @param {Uint8Array} uintarr\n     * @param {number} begin\n     * @param {number} end\n     * @return {Uint8Array}\n     */\n    static subarray(uintarr, begin, end) {\n        function clamp(v, min, max) { return v < min ? min : v > max ? max : v; }\n\n        if (begin === undefined) { begin = 0; }\n        if (end === undefined) { end = uintarr.byteLength; }\n\n        begin = clamp(begin, 0, uintarr.byteLength);\n        end = clamp(end, 0, uintarr.byteLength);\n\n        let len = end - begin;\n        if (len < 0) {\n            len = 0;\n        }\n\n        return new Uint8Array(uintarr.buffer, uintarr.byteOffset + begin, len);\n    }\n\n    /**\n     * @param {Array} list\n     * @param {number} k\n     * @yields {Array}\n     */\n    static *k_combinations(list, k) {\n        const n = list.length;\n        // Shortcut:\n        if (k > n) {\n            return;\n        }\n        const indices = Array.from(new Array(k), (x,i) => i);\n        yield indices.map(i => list[i]);\n        const reverseRange = Array.from(new Array(k), (x,i) => k-i-1);\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n            let i = k-1, found = false;\n            for (i of reverseRange) {\n                if (indices[i] !== i + n - k) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return;\n            }\n            indices[i] += 1;\n            for (const j of Array.from(new Array(k-i-1), (x,k) => i+k+1)) {\n                indices[j] = indices[j-1] + 1;\n            }\n            yield indices.map(i => list[i]);\n        }\n    }\n}\nClass.register(ArrayUtils);\n","class Assert {\n    /**\n     * @param {boolean} condition\n     * @param {string} [message]\n     * @returns {void}\n     */\n    static that(condition, message = 'Assertion failed') {\n        if (!condition) {\n            throw new Error(message);\n        }\n    }\n}\nClass.register(Assert);\n","class MerkleTree {\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    static computeRoot(values, fnHash = MerkleTree._hash) {\n        return MerkleTree._computeRoot(values, fnHash);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {function(o: *):Hash} fnHash\n     * @returns {Hash}\n     * @private\n     */\n    static _computeRoot(values, fnHash) {\n        const len = values.length;\n        if (len === 0) {\n            return Hash.light(new Uint8Array(0));\n        }\n        if (len === 1) {\n            return fnHash(values[0]);\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const leftHash = MerkleTree._computeRoot(left, fnHash);\n        const rightHash = MerkleTree._computeRoot(right, fnHash);\n        return Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n    }\n\n    /**\n     * @param {Hash|Uint8Array|{hash: function():Hash}|{serialize: function():Uint8Array}} o\n     * @returns {Hash}\n     * @private\n     */\n    static _hash(o) {\n        if (o instanceof Hash) {\n            return o;\n        }\n        if (typeof o.hash === 'function') {\n            return o.hash();\n        }\n        if (typeof o.serialize === 'function') {\n            return Hash.light(o.serialize());\n        }\n        if (o instanceof Uint8Array) {\n            return Hash.light(o);\n        }\n        throw new Error('MerkleTree objects must be Uint8Array or have a .hash()/.serialize() method');\n    }\n}\nClass.register(MerkleTree);\n","class MerklePath {\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     */\n    constructor(nodes) {\n        if (!Array.isArray(nodes) || !NumberUtils.isUint8(nodes.length)\n            || nodes.some(it => !(it instanceof MerklePathNode))) throw new Error('Malformed nodes');\n        /**\n         * @type {Array.<MerklePathNode>}\n         * @private\n         */\n        this._nodes = nodes;\n    }\n\n    /**\n     * @param {Array} values\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {MerklePath}\n     */\n    static compute(values, leafValue, fnHash = MerkleTree._hash) {\n        const leafHash = fnHash(leafValue);\n        const path = [];\n        MerklePath._compute(values, leafHash, path, fnHash);\n        return new MerklePath(path);\n    }\n\n    /**\n     * @param {Array} values\n     * @param {Hash} leafHash\n     * @param {Array.<MerklePathNode>} path\n     * @param {function(o: *):Hash} fnHash\n     * @returns {{containsLeaf:boolean, inner:Hash}}\n     * @private\n     */\n    static _compute(values, leafHash, path, fnHash) {\n        const len = values.length;\n        let hash;\n        if (len === 0) {\n            hash = Hash.light(new Uint8Array(0));\n            return {containsLeaf: false, inner: hash};\n        }\n        if (len === 1) {\n            hash = fnHash(values[0]);\n            return {containsLeaf: hash.equals(leafHash), inner: hash};\n        }\n\n        const mid = Math.round(len / 2);\n        const left = values.slice(0, mid);\n        const right = values.slice(mid);\n        const {containsLeaf: leftLeaf, inner: leftHash} = MerklePath._compute(left, leafHash, path, fnHash);\n        const {containsLeaf: rightLeaf, inner: rightHash} = MerklePath._compute(right, leafHash, path, fnHash);\n        hash = Hash.light(BufferUtils.concatTypedArrays(leftHash.serialize(), rightHash.serialize()));\n\n        if (leftLeaf) {\n            path.push(new MerklePathNode(rightHash, false));\n            return {containsLeaf: true, inner: hash};\n        } else if (rightLeaf) {\n            path.push(new MerklePathNode(leftHash, true));\n            return {containsLeaf: true, inner: hash};\n        }\n\n        return {containsLeaf: false, inner: hash};\n    }\n\n    /**\n     * @param {*} leafValue\n     * @param {function(o: *):Hash} [fnHash]\n     * @returns {Hash}\n     */\n    computeRoot(leafValue, fnHash = MerkleTree._hash) {\n        /** @type {Hash} */\n        let root = fnHash(leafValue);\n        for (const node of this._nodes) {\n            const left = node.left;\n            const hash = node.hash;\n            const concat = new SerialBuffer(hash.serializedSize * 2);\n            if (left) hash.serialize(concat);\n            root.serialize(concat);\n            if (!left) hash.serialize(concat);\n            root = Hash.light(concat);\n        }\n        return root;\n    }\n\n    /**\n     * @param {Array.<MerklePathNode>} nodes\n     * @returns {Uint8Array}\n     * @private\n     */\n    static _compress(nodes) {\n        const count = nodes.length;\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = new Uint8Array(leftBitsSize);\n\n        for (let i = 0; i < count; i++) {\n            if (nodes[i].left) {\n                leftBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return leftBits;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {MerklePath}\n     */\n    static unserialize(buf) {\n        const count = buf.readUint8();\n        const leftBitsSize = Math.ceil(count / 8);\n        const leftBits = buf.read(leftBitsSize);\n\n        const nodes = [];\n        for (let i = 0; i < count; i++) {\n            const left = (leftBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            const hash = Hash.unserialize(buf);\n            nodes.push(new MerklePathNode(hash, left));\n        }\n        return new MerklePath(nodes);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._nodes.length);\n        buf.write(MerklePath._compress(this._nodes));\n\n        for (const node of this._nodes) {\n            node.hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        const leftBitsSize = Math.ceil(this._nodes.length / 8);\n        return /*count*/ 1\n            + leftBitsSize\n            + this._nodes.reduce((sum, node) => sum + node.hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {MerklePath} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePath\n            && this._nodes.length === o._nodes.length\n            && this._nodes.every((node, i) => node.equals(o._nodes[i]));\n    }\n\n    /** @type {Array.<MerklePathNode>} */\n    get nodes() {\n        return this._nodes;\n    }\n}\nClass.register(MerklePath);\n\nclass MerklePathNode {\n    /**\n     * @param {Hash} hash\n     * @param {boolean} left\n     */\n    constructor(hash, left) {\n        this._hash = hash;\n        this._left = left;\n    }\n\n    /** @type {Hash} */\n    get hash() {\n        return this._hash;\n    }\n\n    /** @type {boolean} */\n    get left() {\n        return this._left;\n    }\n\n    /**\n     * @param {MerklePathNode} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof MerklePathNode\n            && this._hash.equals(o.hash)\n            && this._left === o.left;\n    }\n}\nClass.register(MerklePathNode);\n","class Policy {\n    /**\n     * Convert Nimiq decimal to Number of Satoshis.\n     * @param {number} coins Nimiq count in decimal\n     * @return {number} Number of Lunas\n     */\n    static coinsToLunas(coins) {\n        return Math.round(coins * Policy.LUNAS_PER_COIN);\n    }\n\n    /**\n     * Convert Number of Satoshis to Nimiq decimal.\n     * @param {number} lunas Number of Lunas.\n     * @return {number} Nimiq count in decimal.\n     */\n    static lunasToCoins(lunas) {\n        return lunas / Policy.LUNAS_PER_COIN;\n    }\n\n    /**\n     * @deprecated Use coinsToLunas instead\n     * @param {number} coins Nimiq count in decimal\n     * @return {number} Number of Satoshis (Lunas)\n     */\n    static coinsToSatoshis(coins) {\n        return Policy.coinsToLunas(coins);\n    }\n\n    /**\n     * @deprecated Use lunasToCoins instead\n     * @param {number} lunas Number of Lunas.\n     * @return {number} Nimiq count in decimal.\n     */\n    static satoshisToCoins(satoshis) {\n        return Policy.lunasToCoins(satoshis);\n    }\n\n    /**\n     * @deprecated Use LUNAS_PER_COIN instead\n     * @type {number}\n     * @constant\n     */\n    static get SATOSHIS_PER_COIN() {\n        return Policy.LUNAS_PER_COIN;\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static supplyAfter(blockHeight) {\n        // Calculate last entry in supply cache that is below blockHeight.\n        let startHeight = Math.floor(blockHeight / Policy._supplyCacheInterval) * Policy._supplyCacheInterval;\n        startHeight = Math.max(0, Math.min(startHeight, Policy._supplyCacheMax));\n\n        // Calculate respective block for the last entry of the cache and the targeted height.\n        const startI = startHeight / Policy._supplyCacheInterval;\n        const endI = Math.floor(blockHeight / Policy._supplyCacheInterval);\n\n        // The starting supply is the initial supply at the beginning and a cached value afterwards.\n        let supply = startHeight === 0 ? Policy.INITIAL_SUPPLY : Policy._supplyCache.get(startHeight);\n        // Use and update cache.\n        for (let i = startI; i < endI; ++i) {\n            startHeight = i * Policy._supplyCacheInterval;\n            // Since the cache stores the supply *before* a certain block, subtract one.\n            const endHeight = (i + 1) * Policy._supplyCacheInterval - 1;\n            supply = Policy._supplyAfter(supply, endHeight, startHeight);\n            // Don't forget to add one again.\n            Policy._supplyCache.set(endHeight + 1, supply);\n            Policy._supplyCacheMax = endHeight + 1;\n        }\n\n        // Calculate remaining supply (this also adds the block reward for endI*interval).\n        return Policy._supplyAfter(supply, blockHeight, endI * Policy._supplyCacheInterval);\n    }\n\n    /**\n     * Circulating supply after block.\n     * @param {number} initialSupply\n     * @param {number} blockHeight\n     * @param {number} [startHeight]\n     * @return {number}\n     */\n    static _supplyAfter(initialSupply, blockHeight, startHeight=0) {\n        let supply = initialSupply;\n        for (let i = startHeight; i <= blockHeight; ++i) {\n            supply += Policy._blockRewardAt(supply, i);\n        }\n        return supply;\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static blockRewardAt(blockHeight) {\n        const currentSupply = Policy.supplyAfter(blockHeight - 1);\n        return Policy._blockRewardAt(currentSupply, blockHeight);\n    }\n\n    /**\n     * Miner reward per block.\n     * @param {number} currentSupply\n     * @param {number} blockHeight\n     * @return {number}\n     */\n    static _blockRewardAt(currentSupply, blockHeight) {\n        if (blockHeight <= 0) return 0;\n        const remaining = Policy.TOTAL_SUPPLY - currentSupply;\n        if (blockHeight >= Policy.EMISSION_TAIL_START && remaining >= Policy.EMISSION_TAIL_REWARD) {\n            return Policy.EMISSION_TAIL_REWARD;\n        }\n        const remainder = remaining % Policy.EMISSION_SPEED;\n        return (remaining - remainder) / Policy.EMISSION_SPEED;\n    }\n}\n\n/**\n * Targeted block time in seconds.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_TIME = 60;\n\n/**\n * Maximum block size in bytes.\n * @type {number}\n * @constant\n */\nPolicy.BLOCK_SIZE_MAX = 1e5; // 100 kb\n\n/**\n * The highest (easiest) block PoW target.\n * @type {BigNumber}\n * @constant\n */\nPolicy.BLOCK_TARGET_MAX = new BigNumber(2).pow(240);\n\n/**\n * Number of blocks we take into account to calculate next difficulty.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_BLOCK_WINDOW = 120;\n\n/**\n * Limits the rate at which the difficulty is adjusted min/max.\n * @type {number}\n * @constant\n */\nPolicy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR = 2;\n\n/**\n * Number of blocks a transaction is valid.\n * @type {number}\n * @constant\n */\nPolicy.TRANSACTION_VALIDITY_WINDOW = 120;\n\n\n/* Supply & Emission Parameters */\n\n/**\n * Number of Satoshis per Nimiq.\n * @type {number}\n * @constant\n */\nPolicy.LUNAS_PER_COIN = 1e5;\n\n/**\n * Targeted total supply in lunas.\n * @type {number}\n * @constant\n */\nPolicy.TOTAL_SUPPLY = 21e14;\n\n/**\n * Initial supply before genesis block in lunas.\n * FIXME: Change for main net.\n * @type {number}\n * @constant\n */\nPolicy.INITIAL_SUPPLY = 252000000000000;\n\n/**\n * Emission speed.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_SPEED = Math.pow(2, 22);\n\n/**\n * First block using constant tail emission until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_START = 48692960;\n\n/**\n * Constant tail emission in lunas until total supply is reached.\n * @type {number}\n * @constant\n */\nPolicy.EMISSION_TAIL_REWARD = 4000;\n\n/* Security parameters */\n\n/**\n * NIPoPoW Security parameter M\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.M = 240;\n\n/**\n * NIPoPoW Security parameter K\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.K = 120;\n\n/**\n * NIPoPoW Security parameter DELTA\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.DELTA = 0.15;\n\n/**\n * Number of blocks the light client downloads to verify the AccountsTree construction.\n * FIXME naming\n * @type {number}\n * @constant\n */\nPolicy.NUM_BLOCKS_VERIFICATION = 250;\n\n\n/* Snapshot Parameters */\n\n/**\n * Maximum number of snapshots.\n * @type {number}\n * @constant\n */\nPolicy.NUM_SNAPSHOTS_MAX = 20;\n\n\n/**\n * Stores the circulating supply before the given block.\n * @type {Map.<number, number>}\n * @private\n */\nPolicy._supplyCache = new Map();\nPolicy._supplyCacheMax = 0; // blocks\nPolicy._supplyCacheInterval = 5000; // blocks\nClass.register(Policy);\n","/**\n * @abstract\n */\nclass Serializable {\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Serializable && BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return BufferUtils.compare(this.serialize(), o.serialize());\n    }\n\n    hashCode() {\n        return this.toBase64();\n    }\n\n    /**\n     * @abstract\n     * @param {SerialBuffer} [buf]\n     */\n    serialize(buf) {}\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.toBase64();\n    }\n\n    /**\n     * @return {string}\n     */\n    toBase64() {\n        return BufferUtils.toBase64(this.serialize());\n    }\n\n    /**\n     * @return {string}\n     */\n    toHex() {\n        return BufferUtils.toHex(this.serialize());\n    }\n}\n\nClass.register(Serializable);\n","class Hash extends Serializable {\n    /**\n     * @param {?Uint8Array} arg\n     * @param {Hash.Algorithm} [algorithm]\n     * @private\n     */\n    constructor(arg, algorithm = Hash.Algorithm.BLAKE2B) {\n        if (arg === null) {\n            arg = new Uint8Array(Hash.getSize(algorithm));\n        } else {\n            if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n            if (arg.length !== Hash.getSize(algorithm)) throw new Error('Primitive: Invalid length');\n        }\n        super();\n        this._obj = arg;\n        /** @type {Hash.Algorithm} */\n        this._algorithm = algorithm;\n    }\n\n    /**\n     * @deprecated\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static light(arr) {\n        return Hash.blake2b(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static blake2b(arr) {\n        return new Hash(Hash.computeBlake2b(arr), Hash.Algorithm.BLAKE2B);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @deprecated\n     * @returns {Promise.<Hash>}\n     */\n    static hard(arr) {\n        return Hash.argon2d(arr);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Promise.<Hash>}\n     */\n    static async argon2d(arr) {\n        return new Hash(await (await CryptoWorker.getInstanceAsync()).computeArgon2d(arr), Hash.Algorithm.ARGON2D);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha256(arr) {\n        return new Hash(Hash.computeSha256(arr), Hash.Algorithm.SHA256);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @returns {Hash}\n     */\n    static sha512(arr) {\n        return new Hash(Hash.computeSha512(arr), Hash.Algorithm.SHA512);\n    }\n\n    /**\n     * @param {Uint8Array} arr\n     * @param {Hash.Algorithm} algorithm\n     * @returns {Hash}\n     */\n    static compute(arr, algorithm) {\n        // !! The algorithms supported by this function are the allowed hash algorithms for HTLCs !!\n        switch (algorithm) {\n            case Hash.Algorithm.BLAKE2B: return Hash.blake2b(arr);\n            case Hash.Algorithm.SHA256: return Hash.sha256(arr);\n            // Hash.Algorithm.SHA512 postponed until hard-fork\n            // Hash.Algorithm.ARGON2 intentionally omitted\n            default: throw new Error('Invalid hash algorithm');\n        }\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash.Algorithm} [algorithm]\n     * @returns {Hash}\n     */\n    static unserialize(buf, algorithm = Hash.Algorithm.BLAKE2B) {\n        return new Hash(buf.read(Hash.getSize(algorithm)), algorithm);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /**\n     * @param {number} begin\n     * @param {number} end\n     * @returns {Uint8Array}\n     */\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Hash.SIZE.get(this._algorithm);\n    }\n\n    /** @type {Uint8Array} */\n    get array() {\n        return this._obj;\n    }\n\n    /** @type {Hash.Algorithm} */\n    get algorithm() {\n        return this._algorithm;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Hash && o._algorithm === this._algorithm && super.equals(o);\n    }\n\n    /**\n     * @param {string} base64\n     * @returns {Hash}\n     */\n    static fromBase64(base64) {\n        return new Hash(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @returns {Hash}\n     */\n    static fromHex(hex) {\n        return new Hash(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @returns {Hash}\n     */\n    static fromString(str) {\n        try {\n            return Hash.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Hash.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid hash format');\n    }\n\n    /**\n     * @param {Hash} o\n     * @returns {boolean}\n     */\n    static isHash(o) {\n        return o instanceof Hash;\n    }\n\n    /**\n     * @param {Hash.Algorithm} algorithm\n     * @returns {number}\n     */\n    static getSize(algorithm) {\n        const size = Hash.SIZE.get(algorithm);\n        if (typeof size !== 'number') throw new Error('Invalid hash algorithm');\n        return size;\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeBlake2b(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.BLAKE2B));\n            NodeNative.node_blake2(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.BLAKE2B);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                const res = Module._nimiq_blake2(wasmOut, wasmIn, input.length);\n                if (res !== 0) {\n                    throw res;\n                }\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha256(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA256));\n            NodeNative.node_sha256(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA256);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha256(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} input\n     * @returns {Uint8Array}\n     */\n    static computeSha512(input) {\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_sha512(out, new Uint8Array(input));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmIn = Module.stackAlloc(input.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmIn, input.length).set(input);\n                Module._nimiq_sha512(wasmOut, wasmIn, input.length);\n                const hash = new Uint8Array(hashSize);\n                hash.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hash;\n            } catch (e) {\n                Log.w(Hash, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\n/**\n * @enum {number}\n */\nHash.Algorithm = {\n    BLAKE2B: 1,\n    ARGON2D: 2,\n    SHA256: 3,\n    SHA512: 4\n};\n/**\n * @type {Map<Hash.Algorithm, number>}\n */\nHash.SIZE = new Map();\nHash.SIZE.set(Hash.Algorithm.BLAKE2B, 32);\nHash.SIZE.set(Hash.Algorithm.ARGON2D, 32);\nHash.SIZE.set(Hash.Algorithm.SHA256, 32);\nHash.SIZE.set(Hash.Algorithm.SHA512, 64);\n\nHash.NULL = new Hash(new Uint8Array(32));\nClass.register(Hash);\n","class PublicKey extends Serializable {\n    /**\n     * @param {PublicKey} o\n     * @returns {PublicKey}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new PublicKey(new Uint8Array(o._obj));\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== PublicKey.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @return {PublicKey}\n     */\n    static derive(privateKey) {\n        return new PublicKey(PublicKey._publicKeyDerive(privateKey._obj));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @return {PublicKey}\n     */\n    static sum(publicKeys) {\n        publicKeys = publicKeys.slice();\n        publicKeys.sort((a, b) => a.compare(b));\n        return PublicKey._delinearizeAndAggregatePublicKeys(publicKeys);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {PublicKey}\n     */\n    static unserialize(buf) {\n        return new PublicKey(buf.read(PublicKey.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return PublicKey.SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof PublicKey && super.equals(o);\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        return Hash.light(this.serialize());\n    }\n\n    /**\n     * @param {PublicKey} o\n     * @return {number}\n     */\n    compare(o) {\n        return BufferUtils.compare(this._obj, o._obj);\n    }\n\n    /**\n     * @return {Address}\n     */\n    toAddress() {\n        return Address.fromHash(this.hash());\n    }\n\n    /**\n     * @return {PeerId}\n     */\n    toPeerId() {\n        return new PeerId(this.hash().subarray(0, 16));\n    }\n\n    /**\n     * @param {Array.<PublicKey>} publicKeys\n     * @returns {PublicKey}\n     */\n    static _delinearizeAndAggregatePublicKeys(publicKeys) {\n        const publicKeysObj = publicKeys.map(k => k.serialize());\n        const publicKeysHash = PublicKey._publicKeysHash(publicKeysObj);\n        const raw = PublicKey._publicKeysDelinearizeAndAggregate(publicKeysObj, publicKeysHash);\n        return new PublicKey(raw);\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDerive(privateKey) {\n        if (privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_public_key_derive(out, new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const pubKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOut, PrivateKey.SIZE);\n                pubKeyBuffer.set(privateKey);\n                const wasmIn = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmIn, PrivateKey.SIZE);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_public_key_derive(wasmOut, wasmIn);\n                privKeyBuffer.fill(0);\n                const publicKey = new Uint8Array(PublicKey.SIZE);\n                publicKey.set(pubKeyBuffer);\n                return publicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @returns {Uint8Array}\n     */\n    static _publicKeysHash(publicKeys) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Hash.getSize(Hash.Algorithm.SHA512));\n            NodeNative.node_ed25519_hash_public_keys(out, concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const hashSize = Hash.getSize(Hash.Algorithm.SHA512);\n                const wasmOut = Module.stackAlloc(hashSize);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                Module._ed25519_hash_public_keys(wasmOut, wasmInPublicKeys, publicKeys.length);\n                const hashedPublicKey = new Uint8Array(hashSize);\n                hashedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, hashSize));\n                return hashedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeyDelinearize(publicKey, publicKeysHash) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_delinearize_public_key(out, new Uint8Array(publicKeysHash), new Uint8Array(publicKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKey = Module.stackAlloc(publicKey.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKey, publicKey.length).set(publicKey);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_delinearize_public_key(wasmOut, wasmInPublicKeysHash, wasmInPublicKey);\n                const delinearizedPublicKey = new Uint8Array(PublicKey.SIZE);\n                delinearizedPublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return delinearizedPublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} publicKeys\n     * @param {Uint8Array} publicKeysHash\n     * @returns {Uint8Array}\n     */\n    static _publicKeysDelinearizeAndAggregate(publicKeys, publicKeysHash) {\n        if (publicKeys.some(publicKey => publicKey.byteLength !== PublicKey.SIZE)\n            || publicKeysHash.byteLength !== Hash.getSize(Hash.Algorithm.SHA512)) {\n            throw Error('Wrong buffer size.');\n        }\n        const concatenatedPublicKeys = new Uint8Array(publicKeys.length * PublicKey.SIZE);\n        for (let i = 0; i < publicKeys.length; ++i) {\n            concatenatedPublicKeys.set(publicKeys[i], i * PublicKey.SIZE);\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PublicKey.SIZE);\n            NodeNative.node_ed25519_aggregate_delinearized_public_keys(out, new Uint8Array(publicKeysHash), concatenatedPublicKeys, publicKeys.length);\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOut = Module.stackAlloc(PublicKey.SIZE);\n                const wasmInPublicKeys = Module.stackAlloc(concatenatedPublicKeys.length);\n                const wasmInPublicKeysHash = Module.stackAlloc(publicKeysHash.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeys, concatenatedPublicKeys.length).set(concatenatedPublicKeys);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInPublicKeysHash, publicKeysHash.length).set(publicKeysHash);\n                Module._ed25519_aggregate_delinearized_public_keys(wasmOut, wasmInPublicKeysHash, wasmInPublicKeys, publicKeys.length);\n                const aggregatePublicKey = new Uint8Array(PublicKey.SIZE);\n                aggregatePublicKey.set(new Uint8Array(Module.HEAPU8.buffer, wasmOut, PublicKey.SIZE));\n                return aggregatePublicKey;\n            } catch (e) {\n                Log.w(PublicKey, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nPublicKey.SIZE = 32;\n\nClass.register(PublicKey);\n","class Signature extends Serializable {\n    /**\n     * @param {Signature} o\n     * @returns {Signature}\n     */\n    static copy(o) {\n        if (!o) return o;\n        // FIXME Move this to Crypto class.\n        const obj = new Uint8Array(o._obj);\n        return new Signature(obj);\n    }\n\n    /**\n     * @param {Uint8Array} arg\n     * @private\n     */\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Signature.SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {Signature}\n     */\n    static create(privateKey, publicKey, data) {\n        return new Signature(Signature._signatureCreate(privateKey._obj, publicKey._obj, data));\n    }\n\n    /**\n     * @param {Commitment} commitment\n     * @param {Array.<PartialSignature>} signatures\n     * @return {Signature}\n     */\n    static fromPartialSignatures(commitment, signatures) {\n        const raw = Signature._combinePartialSignatures(commitment.serialize(), signatures.map(s => s.serialize()));\n        return new Signature(raw);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Signature}\n     */\n    static unserialize(buf) {\n        return new Signature(buf.read(Signature.SIZE));\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return Signature.SIZE;\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Uint8Array} data\n     * @return {boolean}\n     */\n    verify(publicKey, data) {\n        return Signature._signatureVerify(publicKey._obj, data, this._obj);\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Signature && super.equals(o);\n    }\n\n    /**\n     * @param {Uint8Array} combinedCommitment\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _combinePartialSignatures(combinedCommitment, partialSignatures) {\n        const combinedSignature = Signature._aggregatePartialSignatures(partialSignatures);\n        return BufferUtils.concatTypedArrays(combinedCommitment, combinedSignature);\n    }\n\n    /**\n     * @param {Array.<Uint8Array>} partialSignatures\n     * @returns {Uint8Array}\n     */\n    static _aggregatePartialSignatures(partialSignatures) {\n        return partialSignatures.reduce((sigA, sigB) => Signature._scalarsAdd(sigA, sigB));\n    }\n\n    /**\n     * @param {Uint8Array} a\n     * @param {Uint8Array} b\n     * @returns {Uint8Array}\n     */\n    static _scalarsAdd(a, b) {\n        if (a.byteLength !== PartialSignature.SIZE || b.byteLength !== PartialSignature.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(PartialSignature.SIZE);\n            NodeNative.node_ed25519_add_scalars(out, new Uint8Array(a), new Uint8Array(b));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSum = Module.stackAlloc(PartialSignature.SIZE);\n                const wasmInA = Module.stackAlloc(a.length);\n                const wasmInB = Module.stackAlloc(b.length);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInA, a.length).set(a);\n                new Uint8Array(Module.HEAPU8.buffer, wasmInB, b.length).set(b);\n                Module._ed25519_add_scalars(wasmOutSum, wasmInA, wasmInB);\n                const sum = new Uint8Array(PartialSignature.SIZE);\n                sum.set(new Uint8Array(Module.HEAPU8.buffer, wasmOutSum, PartialSignature.SIZE));\n                return sum;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} privateKey\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @returns {Uint8Array}\n     */\n    static _signatureCreate(privateKey, publicKey, message) {\n        if (publicKey.byteLength !== PublicKey.SIZE\n            || privateKey.byteLength !== PrivateKey.SIZE) {\n            throw Error('Wrong buffer size.');\n        }\n        if (PlatformUtils.isNodeJs()) {\n            const out = new Uint8Array(Signature.SIZE);\n            NodeNative.node_ed25519_sign(out, new Uint8Array(message), new Uint8Array(publicKey), new Uint8Array(privateKey));\n            return out;\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmOutSignature = Module.stackAlloc(Signature.SIZE);\n                const signatureBuffer = new Uint8Array(Module.HEAP8.buffer, wasmOutSignature, Signature.SIZE);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInPrivKey = Module.stackAlloc(privateKey.length);\n                const privKeyBuffer = new Uint8Array(Module.HEAP8.buffer, wasmInPrivKey, privateKey.length);\n                privKeyBuffer.set(privateKey);\n\n                Module._ed25519_sign(wasmOutSignature, wasmInMessage, message.byteLength, wasmInPubKey, wasmInPrivKey);\n                privKeyBuffer.fill(0);\n\n                const signature = new Uint8Array(Signature.SIZE);\n                signature.set(signatureBuffer);\n                return signature;\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n\n    /**\n     * @param {Uint8Array} publicKey\n     * @param {Uint8Array} message\n     * @param {Uint8Array} signature\n     * @returns {boolean}\n     */\n    static _signatureVerify(publicKey, message, signature) {\n        if (PlatformUtils.isNodeJs()) {\n            return !!NodeNative.node_ed25519_verify(new Uint8Array(signature), new Uint8Array(message), new Uint8Array(publicKey));\n        } else {\n            let stackPtr;\n            try {\n                stackPtr = Module.stackSave();\n                const wasmInPubKey = Module.stackAlloc(publicKey.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInPubKey, publicKey.length).set(publicKey);\n                const wasmInMessage = Module.stackAlloc(message.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInMessage, message.length).set(message);\n                const wasmInSignature = Module.stackAlloc(signature.length);\n                new Uint8Array(Module.HEAP8.buffer, wasmInSignature, signature.length).set(signature);\n\n                return !!Module._ed25519_verify(wasmInSignature, wasmInMessage, message.byteLength, wasmInPubKey);\n            } catch (e) {\n                Log.w(Signature, e);\n                throw e;\n            } finally {\n                if (stackPtr !== undefined) Module.stackRestore(stackPtr);\n            }\n        }\n    }\n}\n\nSignature.SIZE = 64;\n\nClass.register(Signature);\n","class Address extends Serializable {\n    /**\n     * @param {Address} o\n     * @returns {Address}\n     */\n    static copy(o) {\n        if (!o) return o;\n        const obj = new Uint8Array(o._obj);\n        return new Address(obj);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {Address}\n     */\n    static fromHash(hash) {\n        return new Address(hash.subarray(0, Address.SERIALIZED_SIZE));\n    }\n\n    constructor(arg) {\n        super();\n        if (!(arg instanceof Uint8Array)) throw new Error('Primitive: Invalid type');\n        if (arg.length !== Address.SERIALIZED_SIZE) throw new Error('Primitive: Invalid length');\n        this._obj = arg;\n    }\n\n    /**\n     * Create Address object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Address} Newly created Account object.\n     */\n    static unserialize(buf) {\n        return new Address(buf.read(Address.SERIALIZED_SIZE));\n    }\n\n    /**\n     * Serialize this Address object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.write(this._obj);\n        return buf;\n    }\n\n    subarray(begin, end) {\n        return this._obj.subarray(begin, end);\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return Address.SERIALIZED_SIZE;\n    }\n\n    /**\n     * @param {Serializable} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof Address\n            && super.equals(o);\n    }\n\n    static fromString(str) {\n        try {\n            return Address.fromUserFriendlyAddress(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromHex(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        try {\n            return Address.fromBase64(str);\n        } catch (e) {\n            // Ignore\n        }\n\n        throw new Error('Invalid address format');\n    }\n\n    /**\n     * @param {string} base64\n     * @return {Address}\n     */\n    static fromBase64(base64) {\n        return new Address(BufferUtils.fromBase64(base64));\n    }\n\n    /**\n     * @param {string} hex\n     * @return {Address}\n     */\n    static fromHex(hex) {\n        return new Address(BufferUtils.fromHex(hex));\n    }\n\n    /**\n     * @param {string} str\n     * @return {Address}\n     */\n    static fromUserFriendlyAddress(str) {\n        str = str.replace(/ /g, '');\n        if (str.substr(0, 2).toUpperCase() !== Address.CCODE) {\n            throw new Error('Invalid Address: Wrong country code');\n        }\n        if (str.length !== 36) {\n            throw new Error('Invalid Address: Should be 36 chars (ignoring spaces)');\n        }\n        if (Address._ibanCheck(str.substr(4) + str.substr(0, 4)) !== 1) {\n            throw new Error('Invalid Address: Checksum invalid');\n        }\n        return new Address(BufferUtils.fromBase32(str.substr(4)));\n    }\n\n    static _ibanCheck(str) {\n        const num = str.split('').map((c) => {\n            const code = c.toUpperCase().charCodeAt(0);\n            return code >= 48 && code <= 57 ? c : (code - 55).toString();\n        }).join('');\n        let tmp = '';\n\n        for (let i = 0; i < Math.ceil(num.length / 6); i++) {\n            tmp = (parseInt(tmp + num.substr(i * 6, 6)) % 97).toString();\n        }\n\n        return parseInt(tmp);\n    }\n\n    /**\n     * @param {boolean} [withSpaces]\n     * @return {string}\n     */\n    toUserFriendlyAddress(withSpaces = true) {\n        const base32 = BufferUtils.toBase32(this.serialize());\n        // eslint-disable-next-line prefer-template\n        const check = ('00' + (98 - Address._ibanCheck(base32 + Address.CCODE + '00'))).slice(-2);\n        let res = Address.CCODE + check + base32;\n        if (withSpaces) res = res.replace(/.{4}/g, '$& ').trim();\n        return res;\n    }\n}\nAddress.CCODE = 'NQ';\nAddress.SERIALIZED_SIZE = 20;\nAddress.HEX_SIZE = 40;\nAddress.NULL = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nAddress.CONTRACT_CREATION = new Address(new Uint8Array(Address.SERIALIZED_SIZE));\nClass.register(Address);\n","/**\n * @abstract\n */\nclass Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        if (!NumberUtils.isUint8(type)) throw new Error('Malformed type');\n        if (!NumberUtils.isUint64(balance)) throw new Error('Malformed balance');\n\n        /** @type {Account.Type} */\n        this._type = type;\n        /** @type {number} */\n        this._balance = balance;\n    }\n\n    /**\n     * Create Account object from binary form.\n     * @param {SerialBuffer} buf Buffer to read from.\n     * @return {Account} Newly created Account object.\n     */\n    static unserialize(buf) {\n        const type = /** @type {Account.Type} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Account.TYPE_MAP.has(type)) {\n            throw new Error('Unknown account type');\n        }\n\n        return Account.TYPE_MAP.get(type).unserialize(buf);\n    }\n\n    /**\n     * Serialize this Account object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._type);\n        buf.writeUint64(this._balance);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return /*type*/ 1\n            + /*balance*/ 8;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return BufferUtils.equals(this.serialize(), o.serialize());\n    }\n\n    toString() {\n        return `Account{type=${this._type}, balance=${this._balance.toString()}`;\n    }\n\n    /**\n     * @type {number} Account balance\n     */\n    get balance() {\n        return this._balance;\n    }\n\n    /** @type {Account.Type} */\n    get type() {\n        return this._type;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) { throw new Error('Not yet implemented.'); }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            if (transactionsCache.containsTransaction(transaction)) {\n                throw new Error('Double Transaction Error!');\n            }\n            return this.withBalance(newBalance);\n        } else {\n            if (blockHeight < transaction.validityStartHeight\n                || blockHeight >= transaction.validityStartHeight + Policy.TRANSACTION_VALIDITY_WINDOW) {\n                throw new Error('Validity Error!');\n            }\n            return this.withBalance(this._balance + transaction.value + transaction.fee);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            return this.withBalance(this._balance + transaction.value);\n        } else {\n            const newBalance = this._balance - transaction.value;\n            if (newBalance < 0) {\n                throw new Error('Balance Error!');\n            }\n            return this.withBalance(newBalance);\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this === Account.INITIAL;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isToBePruned() {\n        return this._balance === 0 && !this.isInitial();\n    }\n}\n\n/**\n * Enum for Account types.\n * Non-zero values are contracts.\n * @enum\n */\nAccount.Type = {\n    /**\n     * Basic account type.\n     * @see {BasicAccount}\n     */\n    BASIC: 0,\n    /**\n     * Account with vesting functionality.\n     * @see {VestingContract}\n     */\n    VESTING: 1,\n    /**\n     * Hashed Time-Locked Contract\n     * @see {HashedTimeLockedContract}\n     */\n    HTLC: 2\n};\n/**\n * @type {Map.<Account.Type, {copy: function(o: *):Account, unserialize: function(buf: SerialBuffer):Account, create: function(balance: number, blockHeight: number, transaction: Transaction):Account, verifyOutgoingTransaction: function(transaction: Transaction):boolean, verifyIncomingTransaction: function(transaction: Transaction):boolean}>}\n */\nAccount.TYPE_MAP = new Map();\n\nClass.register(Account);\n","class PrunedAccount {\n    /**\n     * @param {Address} address\n     * @param {Account} account\n     */\n    constructor(address, account) {\n        if (!(address instanceof Address)) throw new Error('Malformed address');\n\n        /** @type {Address} */\n        this._address = address;\n        /** @type {Account} */\n        this._account = account;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {PrunedAccount}\n     */\n    static unserialize(buf) {\n        return new PrunedAccount(Address.unserialize(buf), Account.unserialize(buf));\n    }\n\n    /**\n     * @param {PrunedAccount} o\n     * @return {number} negative if this is smaller than o, positive if this is larger than o, zero if equal.\n     */\n    compare(o) {\n        return this._address.compare(o._address);\n    }\n\n    /**\n     * @returns {Address}\n     */\n    get address() {\n        return this._address;\n    }\n\n    /**\n     * @returns {Account}\n     */\n    get account() {\n        return this._account;\n    }\n\n    /**\n     * @param buf\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._address.serialize(buf);\n        this._account.serialize(buf);\n        return this;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get serializedSize() {\n        return this._address.serializedSize + this._account.serializedSize;\n    }\n\n    /**\n     * @returns {string}\n     */\n    hashCode() {\n        return this._address.hashCode();\n    }\n}\n\nClass.register(PrunedAccount);\n","/**\n * This is a classic account that can send all his funds and receive any transaction.\n * All outgoing transactions are signed using the key corresponding to this address.\n */\nclass BasicAccount extends Account {\n    /**\n     * @param {BasicAccount} o\n     * @returns {BasicAccount}\n     */\n    static copy(o) {\n        if (!o) return o;\n        return new BasicAccount(o._balance);\n    }\n\n    /**\n     * @param {number} [balance]\n     */\n    constructor(balance = 0) {\n        super(Account.Type.BASIC, balance);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BasicAccount}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.BASIC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof BasicAccount\n            && this._type === o._type\n            && this._balance === o._balance;\n    }\n\n    toString() {\n        return `BasicAccount{balance=${this._balance}}`;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        return SignatureProof.verifyTransaction(transaction);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (transaction.data.byteLength > 64) return false;\n        return true;\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new BasicAccount(balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert) {\n            const isContractCreation = transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION);\n            const isTypeChange = transaction.recipientType !== this._type;\n            if (isContractCreation !== isTypeChange) {\n                throw new Error('Data Error!');\n            }\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.recipientType !== this._type && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract creation\n            return Account.TYPE_MAP.get(transaction.recipientType).create(this._balance, blockHeight, transaction);\n        }\n        return this;\n    }\n\n    /**\n     * @return {boolean}\n     */\n    isInitial() {\n        return this._balance === 0;\n    }\n}\n\nAccount.INITIAL = new BasicAccount(0);\nAccount.TYPE_MAP.set(Account.Type.BASIC, BasicAccount);\nClass.register(BasicAccount);\n","class Contract extends Account {\n    /**\n     * @param {Account.Type} type\n     * @param {number} balance\n     */\n    constructor(type, balance) {\n        super(type, balance);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        if (!transaction.recipient.equals(transaction.getContractCreationAddress())) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        if (!revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Contract already created\n            throw new Error('Data error');\n        }\n        return super.withIncomingTransaction(transaction, blockHeight, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withContractCommand(transaction, blockHeight, revert = false) {\n        if (revert && transaction.hasFlag(Transaction.Flag.CONTRACT_CREATION)) {\n            // Revert contract creation\n            return new BasicAccount(this.balance);\n        }\n        return this;\n    }\n}\n\nClass.register(Contract);\n","class HashedTimeLockedContract extends Contract {\n    /**\n     * @param {number} balance\n     * @param {Address} sender\n     * @param {Address} recipient\n     * @param {Hash} hashRoot\n     * @param {number} hashCount\n     * @param {number} timeout\n     * @param {number} totalAmount\n     */\n    constructor(balance = 0, sender = Address.NULL, recipient = Address.NULL, hashRoot = Hash.NULL, hashCount = 1, timeout = 0, totalAmount = balance) {\n        super(Account.Type.HTLC, balance);\n        if (!(sender instanceof Address)) throw new Error('Malformed address');\n        if (!(recipient instanceof Address)) throw new Error('Malformed address');\n        if (!(hashRoot instanceof Hash)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint8(hashCount) || hashCount === 0) throw new Error('Malformed hashCount');\n        if (!NumberUtils.isUint32(timeout)) throw new Error('Malformed timeout');\n        if (!NumberUtils.isUint64(totalAmount)) throw new Error('Malformed totalAmount');\n\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Hash} */\n        this._hashRoot = hashRoot;\n        /** @type {number} */\n        this._hashCount = hashCount;\n        /** @type {number} */\n        this._timeout = timeout;\n        /** @type {number} */\n        this._totalAmount = totalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        const buf = new SerialBuffer(transaction.data);\n\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {HashedTimeLockedContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.HTLC) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const sender = Address.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n        const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n        const hashCount = buf.readUint8();\n        const timeout = buf.readUint32();\n        const totalAmount = buf.readUint64();\n        return new HashedTimeLockedContract(balance, sender, recipient, hashRoot, hashCount, timeout, totalAmount);\n    }\n\n\n    /**\n     * Serialize this HTLC object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._sender.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._hashRoot.algorithm);\n        this._hashRoot.serialize(buf);\n        buf.writeUint8(this._hashCount);\n        buf.writeUint32(this._timeout);\n        buf.writeUint64(this._totalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._sender.serializedSize\n            + this._recipient.serializedSize\n            + /*hashAlgorithm*/ 1\n            + this._hashRoot.serializedSize\n            + /*hashCount*/ 1\n            + /*timeout*/ 4\n            + /*totalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Hash} */\n    get hashRoot() {\n        return this._hashRoot;\n    }\n\n    /** @type {number} */\n    get hashCount() {\n        return this._hashCount;\n    }\n\n    /** @type {number} */\n    get timeout() {\n        return this._timeout;\n    }\n\n    /** @type {number} */\n    get totalAmount() {\n        return this._totalAmount;\n    }\n\n    toString() {\n        return `HashedTimeLockedContract{balance=${this._balance}, sender=${this._sender.toUserFriendlyAddress(false)}, recipient=${this._sender.toUserFriendlyAddress(false)}, amount=${this._totalAmount}/${this._hashCount}, timeout=${this._timeout}}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof HashedTimeLockedContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._sender.equals(o._sender)\n            && this._recipient.equals(o._recipient)\n            && this._hashRoot.equals(o._hashRoot)\n            && this._hashCount === o._hashCount\n            && this._timeout === o._timeout\n            && this._totalAmount === o._totalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.proof);\n            const type = buf.readUint8();\n            switch (type) {\n                case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                    const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                    const hashDepth = buf.readUint8();\n                    const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                    let preImage = Hash.unserialize(buf, hashAlgorithm);\n\n                    // Verify that the preImage hashed hashDepth times matches the _provided_ hashRoot.\n                    for (let i = 0; i < hashDepth; ++i) {\n                        preImage = Hash.compute(preImage.array, hashAlgorithm);\n                    }\n                    if (!hashRoot.equals(preImage)) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                    // Signature proof of the HTLC recipient\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                }\n                case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE:\n                    // Signature proof of the HTLC creator\n                    if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n                        return false;\n                    }\n                    break;\n                default:\n                    return false;\n            }\n\n            // Reject overlong proof.\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return true; // Accept\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        try {\n            const buf = new SerialBuffer(transaction.data);\n\n            Address.unserialize(buf); // sender address\n            Address.unserialize(buf); // recipient address\n            const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n            Hash.unserialize(buf, hashAlgorithm);\n            buf.readUint8(); // hash count\n            buf.readUint32(); // timeout\n\n            // Blacklist Argon2 hash function.\n            if (hashAlgorithm === Hash.Algorithm.ARGON2D) {\n                return false;\n            }\n\n            if (buf.readPos !== buf.byteLength) {\n                return false;\n            }\n\n            return Contract.verifyIncomingTransaction(transaction);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new HashedTimeLockedContract(balance, this._sender, this._recipient, this._hashRoot, this._hashCount, this._timeout, this._totalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        const buf = new SerialBuffer(transaction.proof);\n        const type = buf.readUint8();\n        let minCap = 0;\n        switch (type) {\n            case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER: {\n                // Check that the contract has not expired yet.\n                if (this._timeout < blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Check that the provided hashRoot is correct.\n                const hashAlgorithm = /** @type {Hash.Algorithm} */ buf.readUint8();\n                const hashDepth = buf.readUint8();\n                const hashRoot = Hash.unserialize(buf, hashAlgorithm);\n                if (!hashRoot.equals(this._hashRoot)) {\n                    throw new Error('Proof Error!');\n                }\n\n                // Ignore the preImage.\n                Hash.unserialize(buf, hashAlgorithm);\n\n                // Verify that the transaction is signed by the authorized recipient.\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                minCap = Math.max(0, Math.floor((1 - (hashDepth / this._hashCount)) * this._totalAmount));\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.EARLY_RESOLVE: {\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._recipient)) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE: {\n                if (this._timeout >= blockHeight) {\n                    throw new Error('Proof Error!');\n                }\n\n                if (!SignatureProof.unserialize(buf).isSignedBy(this._sender)) {\n                    throw new Error('Proof Error!');\n                }\n\n                break;\n            }\n            default:\n                throw new Error('Proof Error!');\n        }\n\n        if (!revert) {\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n        }\n\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n}\n\nHashedTimeLockedContract.ProofType = {\n    REGULAR_TRANSFER: 1,\n    EARLY_RESOLVE: 2,\n    TIMEOUT_RESOLVE: 3\n};\n\nAccount.TYPE_MAP.set(Account.Type.HTLC, HashedTimeLockedContract);\nClass.register(HashedTimeLockedContract);\n","class VestingContract extends Contract {\n    /**\n     * @param {number} [balance]\n     * @param {Address} [owner]\n     * @param {number} [vestingStart]\n     * @param {number} [vestingStepBlocks]\n     * @param {number} [vestingStepAmount]\n     * @param {number} [vestingTotalAmount]\n     */\n    constructor(balance = 0, owner = Address.NULL, vestingStart = 0, vestingStepBlocks = 0, vestingStepAmount = balance, vestingTotalAmount = balance) {\n        super(Account.Type.VESTING, balance);\n        if (!(owner instanceof Address)) throw new Error('Malformed address');\n        if (!NumberUtils.isUint32(vestingStart)) throw new Error('Malformed vestingStart');\n        if (!NumberUtils.isUint32(vestingStepBlocks)) throw new Error('Malformed vestingStepBlocks');\n        if (!NumberUtils.isUint64(vestingStepAmount)) throw new Error('Malformed vestingStepAmount');\n        if (!NumberUtils.isUint64(vestingTotalAmount)) throw new Error('Malformed lowerCap');\n\n        /** @type {Address} */\n        this._owner = owner;\n        /** @type {number} */\n        this._vestingStart = vestingStart;\n        /** @type {number} */\n        this._vestingStepBlocks = vestingStepBlocks;\n        /** @type {number} */\n        this._vestingStepAmount = vestingStepAmount;\n        /** @type {number} */\n        this._vestingTotalAmount = vestingTotalAmount;\n    }\n\n    /**\n     * @param {number} balance\n     * @param {number} blockHeight\n     * @param {Transaction} transaction\n     */\n    static create(balance, blockHeight, transaction) {\n        /** @type {number} */\n        let vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount;\n        const buf = new SerialBuffer(transaction.data);\n        const owner = Address.unserialize(buf);\n        vestingTotalAmount = transaction.value;\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n                // Only block number: vest full amount at that block\n                vestingStart = 0;\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = vestingTotalAmount;\n                break;\n            case Address.SERIALIZED_SIZE + 16:\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                break;\n            case Address.SERIALIZED_SIZE + 24:\n                // Create a vesting account with some instantly vested funds or additional funds considered.\n                vestingStart = buf.readUint32();\n                vestingStepBlocks = buf.readUint32();\n                vestingStepAmount = buf.readUint64();\n                vestingTotalAmount = buf.readUint64();\n                break;\n            default:\n                throw new Error('Invalid transaction data');\n        }\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {VestingContract}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        if (type !== Account.Type.VESTING) throw new Error('Invalid account type');\n\n        const balance = buf.readUint64();\n        const owner = Address.unserialize(buf);\n        const vestingStart = buf.readUint32();\n        const vestingStepBlocks = buf.readUint32();\n        const vestingStepAmount = buf.readUint64();\n        const vestingTotalAmount = buf.readUint64();\n        return new VestingContract(balance, owner, vestingStart, vestingStepBlocks, vestingStepAmount, vestingTotalAmount);\n    }\n\n    /**\n     * Serialize this VestingContract object into binary form.\n     * @param {?SerialBuffer} [buf] Buffer to write to.\n     * @return {SerialBuffer} Buffer from `buf` or newly generated one.\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        super.serialize(buf);\n        this._owner.serialize(buf);\n        buf.writeUint32(this._vestingStart);\n        buf.writeUint32(this._vestingStepBlocks);\n        buf.writeUint64(this._vestingStepAmount);\n        buf.writeUint64(this._vestingTotalAmount);\n        return buf;\n    }\n\n    /**\n     * @return {number}\n     */\n    get serializedSize() {\n        return super.serializedSize\n            + this._owner.serializedSize\n            + /*vestingStart*/ 4\n            + /*vestingStepBlocks*/ 4\n            + /*vestingStepAmount*/ 8\n            + /*vestingTotalAmount*/ 8;\n    }\n\n    /** @type {Address} */\n    get owner() {\n        return this._owner;\n    }\n\n    /** @type {number} */\n    get vestingStart() {\n        return this._vestingStart;\n    }\n\n    /** @type {number} */\n    get vestingStepBlocks() {\n        return this._vestingStepBlocks;\n    }\n\n    /** @type {number} */\n    get vestingStepAmount() {\n        return this._vestingStepAmount;\n    }\n\n    /** @type {number} */\n    get vestingTotalAmount() {\n        return this._vestingTotalAmount;\n    }\n\n    toString() {\n        return `VestingAccount{balance=${this._balance}, owner=${this._owner.toUserFriendlyAddress()}`;\n    }\n\n    /**\n     * Check if two Accounts are the same.\n     * @param {Account} o Object to compare with.\n     * @return {boolean} Set if both objects describe the same data.\n     */\n    equals(o) {\n        return o instanceof VestingContract\n            && this._type === o._type\n            && this._balance === o._balance\n            && this._owner.equals(o._owner)\n            && this._vestingStart === o._vestingStart\n            && this._vestingStepBlocks === o._vestingStepBlocks\n            && this._vestingStepAmount === o._vestingStepAmount\n            && this._vestingTotalAmount === o._vestingTotalAmount;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyOutgoingTransaction(transaction) {\n        const buf = new SerialBuffer(transaction.proof);\n\n        if (!SignatureProof.unserialize(buf).verify(null, transaction.serializeContent())) {\n            return false;\n        }\n\n        if (buf.readPos !== buf.byteLength) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @return {boolean}\n     */\n    static verifyIncomingTransaction(transaction) {\n        switch (transaction.data.length) {\n            case Address.SERIALIZED_SIZE + 4:\n            case Address.SERIALIZED_SIZE + 16:\n            case Address.SERIALIZED_SIZE + 24:\n                return Contract.verifyIncomingTransaction(transaction);\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * @param {number} balance\n     * @return {Account|*}\n     */\n    withBalance(balance) {\n        return new VestingContract(balance, this._owner, this._vestingStart, this._vestingStepBlocks, this._vestingStepAmount, this._vestingTotalAmount);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {TransactionCache} transactionsCache\n     * @param {boolean} [revert]\n     * @return {Account|*}\n     */\n    withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert = false) {\n        if (!revert) {\n            const minCap = this.getMinCap(blockHeight);\n            const newBalance = this._balance - transaction.value - transaction.fee;\n            if (newBalance < minCap) {\n                throw new Error('Balance Error!');\n            }\n\n            const buf = new SerialBuffer(transaction.proof);\n            if (!SignatureProof.unserialize(buf).isSignedBy(this._owner)) {\n                throw new Error('Proof Error!');\n            }\n        }\n        return super.withOutgoingTransaction(transaction, blockHeight, transactionsCache, revert);\n    }\n\n    /**\n     * @param {Transaction} transaction\n     * @param {number} blockHeight\n     * @param {boolean} [revert]\n     * @return {Account}\n     */\n    withIncomingTransaction(transaction, blockHeight, revert = false) {\n        throw new Error('Illegal incoming transaction');\n    }\n\n    /**\n     * @param {number} blockHeight\n     * @returns {number}\n     */\n    getMinCap(blockHeight) {\n        return this._vestingStepBlocks && this._vestingStepAmount > 0\n            ? Math.max(0, this._vestingTotalAmount - Math.floor((blockHeight - this._vestingStart) / this._vestingStepBlocks) * this._vestingStepAmount)\n            : 0;\n    }\n}\n\nAccount.TYPE_MAP.set(Account.Type.VESTING, VestingContract);\nClass.register(VestingContract);\n","class BlockHeader {\n    /**\n     * @param {Hash} prevHash\n     * @param {Hash} interlinkHash\n     * @param {Hash} bodyHash\n     * @param {Hash} accountsHash\n     * @param {number} nBits\n     * @param {number} height\n     * @param {number} timestamp\n     * @param {number} nonce\n     * @param {number} version\n     */\n    constructor(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version = BlockHeader.CURRENT_VERSION) {\n        if (!NumberUtils.isUint16(version)) throw 'Malformed version';\n        if (!Hash.isHash(prevHash)) throw 'Malformed prevHash';\n        if (!Hash.isHash(interlinkHash)) throw 'Malformed interlinkHash';\n        if (!Hash.isHash(bodyHash)) throw 'Malformed bodyHash';\n        if (!Hash.isHash(accountsHash)) throw 'Malformed accountsHash';\n        if (!NumberUtils.isUint32(nBits) || !BlockUtils.isValidCompact(nBits)) throw 'Malformed nBits';\n        if (!NumberUtils.isUint32(height)) throw 'Invalid height';\n        if (!NumberUtils.isUint32(timestamp)) throw 'Malformed timestamp';\n        if (!NumberUtils.isUint32(nonce)) throw 'Malformed nonce';\n\n        /** @type {number} */\n        this._version = version;\n        /** @type {Hash} */\n        this._prevHash = prevHash;\n        /** @type {Hash} */\n        this._interlinkHash = interlinkHash;\n        /** @type {Hash} */\n        this._bodyHash = bodyHash;\n        /** @type {Hash} */\n        this._accountsHash = accountsHash;\n        /** @type {number} */\n        this._nBits = nBits;\n        /** @type {number} */\n        this._height = height;\n        /** @type {number} */\n        this._timestamp = timestamp;\n        /** @type {number} */\n        this._nonce = nonce;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {BlockHeader}\n     */\n    static unserialize(buf) {\n        const version = buf.readUint16();\n        if (!BlockHeader.SUPPORTED_VERSIONS.includes(version)) throw new Error(`Unsupported block version ${version}`);\n        const prevHash = Hash.unserialize(buf);\n        const interlinkHash = Hash.unserialize(buf);\n        const bodyHash = Hash.unserialize(buf);\n        const accountsHash = Hash.unserialize(buf);\n        const nBits = buf.readUint32();\n        const height = buf.readUint32();\n        const timestamp = buf.readUint32();\n        const nonce = buf.readUint32();\n        return new BlockHeader(prevHash, interlinkHash, bodyHash, accountsHash, nBits, height, timestamp, nonce, version);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint16(this._version);\n        this._prevHash.serialize(buf);\n        this._interlinkHash.serialize(buf);\n        this._bodyHash.serialize(buf);\n        this._accountsHash.serialize(buf);\n        buf.writeUint32(this._nBits);\n        buf.writeUint32(this._height);\n        buf.writeUint32(this._timestamp);\n        buf.writeUint32(this._nonce);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*version*/ 2\n            + this._prevHash.serializedSize\n            + this._interlinkHash.serializedSize\n            + this._bodyHash.serializedSize\n            + this._accountsHash.serializedSize\n            + /*nBits*/ 4\n            + /*height*/ 4\n            + /*timestamp*/ 4\n            + /*nonce*/ 4;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<boolean>}\n     */\n    async verifyProofOfWork(buf) {\n        const pow = await this.pow(buf);\n        return BlockUtils.isProofOfWork(pow, this.target);\n    }\n\n    /**\n     * @param {BlockHeader} prevHeader\n     * @returns {boolean}\n     */\n    isImmediateSuccessorOf(prevHeader) {\n        // Check that the height is one higher than the previous height.\n        if (this.height !== prevHeader.height + 1) {\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this.timestamp < prevHeader.timestamp) {\n            return false;\n        }\n\n        // Check that the hash of the predecessor block equals prevHash.\n        const prevHash = prevHeader.hash();\n        if (!this.prevHash.equals(prevHash)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Hash}\n     */\n    hash(buf) {\n        this._hash = this._hash || Hash.light(this.serialize(buf));\n        return this._hash;\n    }\n    \n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {Promise.<Hash>}\n     */\n    async pow(buf) {\n        this._pow = this._pow || await Hash.hard(this.serialize(buf));\n        return this._pow;\n    }\n\n    /**\n     * @param {BlockHeader|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockHeader\n            && this._prevHash.equals(o.prevHash)\n            && this._interlinkHash.equals(o.interlinkHash)\n            && this._bodyHash.equals(o.bodyHash)\n            && this._accountsHash.equals(o.accountsHash)\n            && this._nBits === o.nBits\n            && this._height === o.height\n            && this._timestamp === o.timestamp\n            && this._nonce === o.nonce;\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return 'BlockHeader{'\n            + `prevHash=${this._prevHash}, `\n            + `interlinkHash=${this._interlinkHash}, `\n            + `bodyHash=${this._bodyHash}, `\n            + `accountsHash=${this._accountsHash}, `\n            + `nBits=${this._nBits.toString(16)}, `\n            + `height=${this._height}, `\n            + `timestamp=${this._timestamp}, `\n            + `nonce=${this._nonce}`\n            + '}';\n    }\n\n    /** @type {number} */\n    get version() {\n        return this._version;\n    }\n\n    /** @type {Hash} */\n    get prevHash() {\n        return this._prevHash;\n    }\n\n    /** @type {Hash} */\n    get interlinkHash() {\n        return this._interlinkHash;\n    }\n\n    /** @type {Hash} */\n    get bodyHash() {\n        return this._bodyHash;\n    }\n\n    /** @type {Hash} */\n    get accountsHash() {\n        return this._accountsHash;\n    }\n\n    /** @type {number} */\n    get nBits() {\n        return this._nBits;\n    }\n\n    /** @type {BigNumber} */\n    get target() {\n        return BlockUtils.compactToTarget(this._nBits);\n    }\n\n    /** @type {BigNumber} */\n    get difficulty() {\n        return BlockUtils.compactToDifficulty(this._nBits);\n    }\n\n    /** @type {number} */\n    get height() {\n        return this._height;\n    }\n\n    /** @type {number} */\n    get timestamp() {\n        return this._timestamp;\n    }\n\n    /** @type {number} */\n    get nonce() {\n        return this._nonce;\n    }\n\n    // XXX The miner changes the nonce of an existing BlockHeader during the\n    // mining process.\n    /** @type {number} */\n    set nonce(n) {\n        this._nonce = n;\n        this._hash = null;\n        this._pow = null;\n    }\n}\n// FIXME: Clean up for mainnet.\nBlockHeader.Version = {\n    V1: 1\n};\nBlockHeader.CURRENT_VERSION = BlockHeader.Version.V1;\nBlockHeader.SUPPORTED_VERSIONS = [\n    BlockHeader.Version.V1\n];\nBlockHeader.SERIALIZED_SIZE = 146;\nClass.register(BlockHeader);\n","class BlockInterlink {\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} prevHash\n     * @returns {{repeatBits: Uint8Array, compressed: Array.<Hash>}}\n     * @protected\n     */\n    static _compress(hashes, prevHash) {\n        const count = hashes.length;\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = new Uint8Array(repeatBitsSize);\n\n        let lastHash = prevHash;\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const hash = hashes[i];\n            if (!hash.equals(lastHash)) {\n                compressed.push(hash);\n                lastHash = hash;\n            } else {\n                repeatBits[Math.floor(i / 8)] |= 0x80 >>> (i % 8);\n            }\n        }\n\n        return {repeatBits, compressed};\n    }\n\n    /**\n     * @param {Array.<Hash>} hashes\n     * @param {Hash} [prevHash]\n     * @param {Uint8Array} [repeatBits]\n     * @param {Array.<Hash>} [compressed]\n     */\n    constructor(hashes, prevHash, repeatBits, compressed) {\n        if (!Array.isArray(hashes) || !NumberUtils.isUint8(hashes.length)\n            || hashes.some(it => !(it instanceof Hash))) throw new Error('Malformed hashes');\n        if ((repeatBits || compressed) && !(repeatBits && compressed)) throw new Error('Malformed repeatBits/compressed');\n        if (!prevHash && !repeatBits) throw new Error('Either prevHash or repeatBits/compressed required');\n\n        if (!repeatBits) {\n            ({repeatBits, compressed} = BlockInterlink._compress(hashes, prevHash));\n        }\n\n        /** @type {Array.<Hash>} */\n        this._hashes = hashes;\n        /** @type {Uint8Array} */\n        this._repeatBits = repeatBits;\n        /** @type {Array.<Hash>} */\n        this._compressed = compressed;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @param {Hash} prevHash\n     * @returns {BlockInterlink}\n     */\n    static unserialize(buf, prevHash) {\n        const count = buf.readUint8();\n        const repeatBitsSize = Math.ceil(count / 8);\n        const repeatBits = buf.read(repeatBitsSize);\n\n        let hash = prevHash;\n        const hashes = [];\n        const compressed = [];\n        for (let i = 0; i < count; i++) {\n            const repeated = (repeatBits[Math.floor(i / 8)] & (0x80 >>> (i % 8))) !== 0;\n            if (!repeated) {\n                hash = Hash.unserialize(buf);\n                compressed.push(hash);\n            }\n            hashes.push(hash);\n        }\n\n        return new BlockInterlink(hashes, prevHash, repeatBits, compressed);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(this._hashes.length);\n        buf.write(this._repeatBits);\n        for (const hash of this._compressed) {\n            hash.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        return /*count*/ 1\n            + this._repeatBits.length\n            + this._compressed.reduce((sum, hash) => sum + hash.serializedSize, 0);\n    }\n\n    /**\n     * @param {BlockInterlink|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockInterlink\n            && this._hashes.length === o._hashes.length\n            && this._hashes.every((hash, i) => hash.equals(o.hashes[i]));\n    }\n\n    /**\n     * @returns {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot([this._repeatBits, GenesisConfig.GENESIS_HASH, ...this._compressed]);\n        }\n        return this._hash;\n    }\n\n    /**\n     * @type {Array.<Hash>}\n     */\n    get hashes() {\n        return this._hashes;\n    }\n\n    /**\n     * @type {number}\n     */\n    get length() {\n        return this._hashes.length;\n    }\n}\nClass.register(BlockInterlink);\n","class BlockBody {\n    /**\n     * @param {Uint8Array} extraData\n     * @returns {number}\n     */\n    static getMetadataSize(extraData) {\n        return Address.SERIALIZED_SIZE\n            + /*extraDataLength*/ 1\n            + extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n    }\n\n    /**\n     * @param {Address} minerAddr\n     * @param {Array.<Transaction>} transactions\n     * @param {Uint8Array} [extraData]\n     * @param {Array.<PrunedAccount>} prunedAccounts\n     */\n    constructor(minerAddr, transactions, extraData = new Uint8Array(0), prunedAccounts = []) {\n        if (!(minerAddr instanceof Address)) throw 'Malformed minerAddr';\n        if (!Array.isArray(transactions) || transactions.some(it => !(it instanceof Transaction))) throw 'Malformed transactions';\n        if (!(extraData instanceof Uint8Array) || !NumberUtils.isUint8(extraData.byteLength)) throw 'Malformed extraData';\n\n        /** @type {Address} */\n        this._minerAddr = minerAddr;\n        /** @type {Uint8Array} */\n        this._extraData = extraData;\n        /** @type {Array.<Transaction>} */\n        this._transactions = transactions;\n        /** @type {Array.<PrunedAccount>} */\n        this._prunedAccounts = prunedAccounts;\n        /** @type {Hash} */\n        this._hash = null;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {BlockBody}\n     */\n    static unserialize(buf) {\n        const minerAddr = Address.unserialize(buf);\n        const extraDataLength = buf.readUint8();\n        const extraData = buf.read(extraDataLength);\n        const numTransactions = buf.readUint16();\n        const transactions = new Array(numTransactions);\n        for (let i = 0; i < numTransactions; i++) {\n            transactions[i] = Transaction.unserialize(buf);\n        }\n        const numPrunedAccounts = buf.readUint16();\n        const prunedAccounts = [];\n        for (let i = 0; i < numPrunedAccounts; i++) {\n            prunedAccounts.push(PrunedAccount.unserialize(buf));\n        }\n        return new BlockBody(minerAddr, transactions, extraData, prunedAccounts);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._minerAddr.serialize(buf);\n        buf.writeUint8(this._extraData.byteLength);\n        buf.write(this._extraData);\n        buf.writeUint16(this._transactions.length);\n        for (const tx of this._transactions) {\n            tx.serialize(buf);\n        }\n        buf.writeUint16(this._prunedAccounts.length);\n        for (const acc of this._prunedAccounts) {\n            acc.serialize(buf);\n        }\n        return buf;\n    }\n\n    /**\n     * @type {number}\n     */\n    get serializedSize() {\n        let size = this._minerAddr.serializedSize\n            + /*extraDataLength*/ 1\n            + this._extraData.byteLength\n            + /*transactionsLength*/ 2\n            + /*prunedAccountsLength*/ 2;\n        for (const tx of this._transactions) {\n            size += tx.serializedSize;\n        }\n        size += this._prunedAccounts.reduce((sum, acc) => sum + acc.serializedSize, 0);\n        return size;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    verify() {\n        /** @type {Transaction} */\n        let previousTx = null;\n        for (const tx of this._transactions) {\n            // Ensure transactions are ordered and unique.\n            if (previousTx && previousTx.compareBlockOrder(tx) >= 0) {\n                Log.w(BlockBody, 'Invalid block - transactions not ordered.');\n                return false;\n            }\n            previousTx = tx;\n\n            // Check that all transactions are valid.\n            if (!tx.verify()) {\n                Log.w(BlockBody, 'Invalid block - invalid transaction');\n                return false;\n            }\n        }\n\n        let previousAcc = null;\n        for (const acc of this._prunedAccounts) {\n            // Ensure pruned accounts are ordered and unique.\n            if (previousAcc && previousAcc.compare(acc) >= 0) {\n                Log.w(BlockBody, 'Invalid block - pruned accounts not ordered.');\n                return false;\n            }\n            previousAcc = acc;\n            \n            // Check that pruned accounts are actually supposed to be pruned\n            if (!acc.account.isToBePruned()) {\n                Log.w(BlockBody, 'Invalid block - invalid pruned account');\n                return false;\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {Array}\n     */\n    getMerkleLeafs() {\n        return [this._minerAddr, this._extraData, ...this._transactions, ...this.prunedAccounts];\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        if (!this._hash) {\n            this._hash = MerkleTree.computeRoot(this.getMerkleLeafs());\n        }\n        return this._hash;\n    }\n\n    /**\n     * @param {BlockBody} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof BlockBody\n            && this._minerAddr.equals(o.minerAddr)\n            && BufferUtils.equals(this._extraData, o.extraData)\n            && this._transactions.length === o.transactions.length\n            && this._transactions.every((tx, i) => tx.equals(o.transactions[i]));\n    }\n\n    /**\n     * @return {Array.<Address>}\n     */\n    getAddresses() {\n        const addresses = [this._minerAddr];\n        for (const tx of this._transactions) {\n            addresses.push(tx.sender, tx.recipient);\n        }\n        return addresses;\n    }\n\n    /** @type {Uint8Array} */\n    get extraData() {\n        return this._extraData;\n    }\n\n    /** @type {Address} */\n    get minerAddr() {\n        return this._minerAddr;\n    }\n\n    /** @type {Array.<Transaction>} */\n    get transactions() {\n        return this._transactions;\n    }\n\n    /** @type {number} */\n    get transactionCount() {\n        return this._transactions.length;\n    }\n\n    /** @type {Array.<PrunedAccount>} */\n    get prunedAccounts() {\n        return this._prunedAccounts;\n    }\n}\n\nClass.register(BlockBody);\n","class BlockUtils {\n    /**\n     * @param {number} compact\n     * @returns {BigNumber}\n     */\n    static compactToTarget(compact) {\n        return new BigNumber(compact & 0xffffff).times(new BigNumber(2).pow(8 * Math.max((compact >> 24) - 3, 0)));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static targetToCompact(target) {\n        if (!target.isFinite() || target.isNaN()) throw 'Invalid Target';\n\n        // Divide to get first byte\n        let size = Math.max(Math.ceil(Math.log2(target.toNumber()) / 8), 1);\n        const firstByte = target / Math.pow(2, (size - 1) * 8);\n\n        // If the first (most significant) byte is greater than 127 (0x7f),\n        // prepend a zero byte.\n        if (firstByte >= 0x80 && size >= 3) {\n            size++;\n        }\n\n        // The first byte of the 'compact' format is the number of bytes,\n        // including the prepended zero if it's present.\n        // The following three bytes are the first three bytes of the above\n        // representation. If less than three bytes are present, then one or\n        // more of the last bytes of the compact representation will be zero.\n        return (size << 24) + ((target / Math.pow(2, Math.max(size - 3, 0) * 8)) & 0xffffff);\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static getTargetHeight(target) {\n        // Precision loss should be ok here.\n        return Math.ceil(Math.log2(target.toNumber()));\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {number}\n     */\n    static getTargetDepth(target) {\n        return BlockUtils.getTargetHeight(Policy.BLOCK_TARGET_MAX) - BlockUtils.getTargetHeight(target);\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {BigNumber}\n     */\n    static compactToDifficulty(compact) {\n        return Policy.BLOCK_TARGET_MAX.div(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {BigNumber} difficulty\n     * @returns {number}\n     */\n    static difficultyToCompact(difficulty) {\n        return BlockUtils.targetToCompact(BlockUtils.difficultyToTarget(difficulty));\n    }\n\n    /**\n     * @param {BigNumber} difficulty\n     * @returns {BigNumber}\n     */\n    static difficultyToTarget(difficulty) {\n        return Policy.BLOCK_TARGET_MAX.div(difficulty);\n    }\n\n    /**\n     * @param {BigNumber} target\n     * @returns {BigNumber}\n     */\n    static targetToDifficulty(target) {\n        return Policy.BLOCK_TARGET_MAX.div(target);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {BigNumber}\n     */\n    static hashToTarget(hash) {\n        return new BigNumber(hash.toHex(), 16);\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {BigNumber}\n     */\n    static realDifficulty(hash) {\n        return BlockUtils.targetToDifficulty(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @returns {number}\n     */\n    static getHashDepth(hash) {\n        return BlockUtils.getTargetDepth(BlockUtils.hashToTarget(hash));\n    }\n\n    /**\n     * @param {Hash} hash\n     * @param {BigNumber} target\n     * @returns {boolean}\n     */\n    static isProofOfWork(hash, target) {\n        return new BigNumber(hash.toHex(), 16).lte(target);\n    }\n\n    /**\n     * @param {number} compact\n     * @returns {boolean}\n     */\n\n    static isValidCompact(compact) {\n        return BlockUtils.isValidTarget(BlockUtils.compactToTarget(compact));\n    }\n\n    /**\n     * @param {?BigNumber} target\n     * @returns {boolean}\n     */\n    static isValidTarget(target) {\n        return target !== null && target.gte(1) && target.lte(Policy.BLOCK_TARGET_MAX);\n    }\n\n    /**\n     * @param {BlockHeader} headBlock\n     * @param {BlockHeader} tailBlock\n     * @param {BigNumber} deltaTotalDifficulty\n     * @returns {BigNumber}\n     */\n    static getNextTarget(headBlock, tailBlock, deltaTotalDifficulty) {\n        Assert.that(\n            (headBlock.height - tailBlock.height === Policy.DIFFICULTY_BLOCK_WINDOW)\n                || (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW && tailBlock.height === 1),\n            `Tail and head block must be ${Policy.DIFFICULTY_BLOCK_WINDOW} blocks apart`);\n\n        let actualTime = headBlock.timestamp - tailBlock.timestamp;\n\n        // Simulate that the Policy.BLOCK_TIME was achieved for the blocks before the genesis block, i.e. we simulate\n        // a sliding window that starts before the genesis block. Assume difficulty = 1 for these blocks.\n        if (headBlock.height <= Policy.DIFFICULTY_BLOCK_WINDOW) {\n            actualTime += (Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1) * Policy.BLOCK_TIME;\n            deltaTotalDifficulty = deltaTotalDifficulty.plus(Policy.DIFFICULTY_BLOCK_WINDOW - headBlock.height + 1);\n        }\n\n        // Compute the target adjustment factor.\n        const expectedTime = Policy.DIFFICULTY_BLOCK_WINDOW * Policy.BLOCK_TIME;\n        let adjustment = actualTime / expectedTime;\n\n        // Clamp the adjustment factor to [1 / MAX_ADJUSTMENT_FACTOR, MAX_ADJUSTMENT_FACTOR].\n        adjustment = Math.max(adjustment, 1 / Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n        adjustment = Math.min(adjustment, Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);\n\n        // Compute the next target.\n        const averageDifficulty = deltaTotalDifficulty.div(Policy.DIFFICULTY_BLOCK_WINDOW);\n        const averageTarget = BlockUtils.difficultyToTarget(averageDifficulty);\n        let nextTarget = averageTarget.times(adjustment);\n\n        // Make sure the target is below or equal the maximum allowed target (difficulty 1).\n        // Also enforce a minimum target of 1.\n        nextTarget = BigNumber.min(nextTarget, Policy.BLOCK_TARGET_MAX);\n        nextTarget = BigNumber.max(nextTarget, 1);\n\n        // XXX Reduce target precision to nBits precision.\n        const nBits = BlockUtils.targetToCompact(nextTarget);\n        return BlockUtils.compactToTarget(nBits);\n    }\n}\nClass.register(BlockUtils);\n","class Block {\n    /**\n     * @param {BlockHeader} header\n     * @param {BlockInterlink} interlink\n     * @param {BlockBody} [body]\n     */\n    constructor(header, interlink, body) {\n        if (!(header instanceof BlockHeader)) throw 'Malformed header';\n        if (!(interlink instanceof BlockInterlink)) throw 'Malformed interlink';\n        if (body && !(body instanceof BlockBody)) throw 'Malformed body';\n\n        /** @type {BlockHeader} */\n        this._header = header;\n        /** @type {BlockInterlink} */\n        this._interlink = interlink;\n        /** @type {BlockBody} */\n        this._body = body;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @returns {Block}\n     */\n    static unserialize(buf) {\n        const header = BlockHeader.unserialize(buf);\n        const interlink = BlockInterlink.unserialize(buf, header.prevHash);\n\n        let body = undefined;\n        const bodyPresent = buf.readUint8();\n        if (bodyPresent) {\n            body = BlockBody.unserialize(buf);\n        }\n\n        return new Block(header, interlink, body);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._header.serialize(buf);\n        this._interlink.serialize(buf);\n\n        if (this._body) {\n            buf.writeUint8(1);\n            this._body.serialize(buf);\n        } else {\n            buf.writeUint8(0);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._header.serializedSize\n            + this._interlink.serializedSize\n            + /*bodyPresent*/ 1\n            + (this._body ? this._body.serializedSize : 0);\n    }\n\n    /**\n     * @param {Time} time\n     * @returns {Promise.<boolean>}\n     */\n    async verify(time) {\n        if (this._valid === undefined) {\n            if (this.isLight() || this.body.transactions.length < 150 || !IWorker.areWorkersAsync) {\n                // worker overhead doesn't pay off for small transaction numbers\n                this._valid = await this._verify(time.now());\n            } else {\n                const transactionValid = this.body.transactions.map(t => t._valid);\n                const worker = await CryptoWorker.getInstanceAsync();\n                const {valid, pow, interlinkHash, bodyHash} = await worker.blockVerify(this.serialize(),\n                    transactionValid, time.now(), GenesisConfig.GENESIS_HASH.serialize(), GenesisConfig.NETWORK_ID);\n                this._valid = valid;\n                this.header._pow = Hash.unserialize(new SerialBuffer(pow));\n                this.interlink._hash = Hash.unserialize(new SerialBuffer(interlinkHash));\n                this.body._hash = Hash.unserialize(new SerialBuffer(bodyHash));\n            }\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} timeNow\n     * @returns {Promise.<boolean>}\n     */\n    async _verify(timeNow) {\n        // Check that the timestamp is not too far into the future.\n        if (this._header.timestamp * 1000 > timeNow + Block.TIMESTAMP_DRIFT_MAX * 1000) {\n            Log.w(Block, 'Invalid block - timestamp too far in the future');\n            return false;\n        }\n\n        // Check that the header hash matches the difficulty.\n        if (!(await this._header.verifyProofOfWork())) {\n            Log.w(Block, 'Invalid block - PoW verification failed');\n            return false;\n        }\n\n        // Check that the maximum block size is not exceeded.\n        if (this.serializedSize > Policy.BLOCK_SIZE_MAX) {\n            Log.w(Block, 'Invalid block - max block size exceeded');\n            return false;\n        }\n\n        // Verify that the interlink is valid.\n        if (!this._verifyInterlink()) {\n            return false;\n        }\n\n        // XXX Verify the body only if it is present.\n        if (this.isFull() && !this._verifyBody()) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyInterlink() {\n        // Skip check for genesis block due to the cyclic dependency (since the interlink hash contains the genesis block hash).\n        if (this.height === 1 && this._header.interlinkHash.equals(new Hash(null))) {\n            return true;\n        }\n\n        // Check that the interlinkHash given in the header matches the actual interlinkHash.\n        const interlinkHash = this._interlink.hash();\n        if (!this._header.interlinkHash.equals(interlinkHash)) {\n            Log.w(Block, 'Invalid block - interlink hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @returns {boolean}\n     * @private\n     */\n    _verifyBody() {\n        // Check that the body is valid.\n        if (!this._body.verify()) {\n            return false;\n        }\n\n        // Check that bodyHash given in the header matches the actual body hash.\n        const bodyHash = this._body.hash();\n        if (!this._header.bodyHash.equals(bodyHash)) {\n            Log.w(Block, 'Invalid block - body hash mismatch');\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isImmediateSuccessorOf(predecessor) {\n        // Check the header.\n        if (!this._header.isImmediateSuccessorOf(predecessor.header)) {\n            return false;\n        }\n\n        // Check that the interlink is correct.\n        const interlink = await predecessor.getNextInterlink(this.target, this.version);\n        if (!this._interlink.equals(interlink)) {\n            return false;\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isInterlinkSuccessorOf(predecessor) {\n        // Check that the height is higher than the predecessor's.\n        if (this._header.height <= predecessor.header.height) {\n            Log.v(Block, 'No interlink successor - height');\n            return false;\n        }\n\n        // Check that the timestamp is greater or equal to the predecessor's timestamp.\n        if (this._header.timestamp < predecessor.header.timestamp) {\n            Log.v(Block, 'No interlink successor - timestamp');\n            return false;\n        }\n\n        // Check that the predecessor is contained in this block's interlink and verify its position.\n        const prevHash = predecessor.hash();\n        if (!GenesisConfig.GENESIS_HASH.equals(prevHash)) {\n            const prevPow = await predecessor.pow();\n            const targetHeight = BlockUtils.getTargetHeight(this.target);\n            let blockFound = false;\n\n            let depth = 0;\n            for (; depth < this._interlink.length; depth++) {\n                if (prevHash.equals(this._interlink.hashes[depth])) {\n                    blockFound = true;\n                    const target = new BigNumber(2).pow(targetHeight - depth);\n                    if (!BlockUtils.isProofOfWork(prevPow, target)) {\n                        Log.v(Block, 'No interlink successor - invalid position in interlink');\n                        return false;\n                    }\n                }\n            }\n\n            if (!blockFound) {\n                Log.v(Block, 'No interlink successor - not in interlink');\n                return false;\n            }\n        }\n\n        // If the predecessor happens to be the immediate predecessor, check additionally:\n        // - that the height of the successor is one higher\n        // - that the interlink is correct.\n        if (this._header.prevHash.equals(prevHash)) {\n            if (this._header.height !== predecessor.header.height + 1) {\n                Log.v(Block, 'No interlink successor - immediate height');\n                return false;\n            }\n\n            const interlink = await predecessor.getNextInterlink(this.target, this.version);\n            const interlinkHash = interlink.hash();\n            if (!this._header.interlinkHash.equals(interlinkHash)) {\n                Log.v(Block, 'No interlink successor - immediate interlink');\n                return false;\n            }\n        }\n        // Otherwise, if the prevHash doesn't match but the blocks should be adjacent according to their height fields,\n        // this cannot be a valid successor of predecessor.\n        else if (this._header.height === predecessor.header.height + 1) {\n            Log.v(Block, 'No interlink successor - immediate height (2)');\n            return false;\n        }\n        // Otherwise, check that the interlink construction is valid given the information we have.\n        else {\n            // TODO Take different targets into account.\n\n            // The number of new blocks in the interlink is bounded by the height difference.\n            /** @type {HashSet.<Hash>} */\n            const hashes = new HashSet();\n            hashes.addAll(this._interlink.hashes);\n            hashes.removeAll(predecessor.interlink.hashes);\n            if (hashes.length > this._header.height - predecessor.header.height) {\n                Log.v(Block, 'No interlink successor - too many new blocks');\n                return false;\n            }\n\n            // Check that the interlink is not too short.\n            const thisDepth = BlockUtils.getTargetDepth(this.target);\n            const prevDepth = BlockUtils.getTargetDepth(predecessor.target);\n            const depthDiff = thisDepth - prevDepth;\n            if (this._interlink.length < predecessor.interlink.length - depthDiff) {\n                Log.v(Block, 'No interlink successor - interlink too short');\n                return false;\n            }\n\n            // If the same block is found in both interlinks, all blocks at lower depths must be the same in both interlinks.\n            let commonBlock = false;\n            const thisInterlink = this._interlink.hashes;\n            const prevInterlink = predecessor.interlink.hashes;\n            for (let i = 1; i < prevInterlink.length && i - depthDiff < thisInterlink.length; i++) {\n                if (prevInterlink[i].equals(thisInterlink[i - depthDiff])) {\n                    commonBlock = true;\n                }\n                else if (commonBlock) {\n                    Log.v(Block, 'No interlink successor - invalid common suffix');\n                    return false;\n                }\n            }\n        }\n\n        // Everything checks out.\n        return true;\n    }\n\n    /**\n     * @param {Block} predecessor\n     * @returns {Promise.<boolean>}\n     */\n    async isSuccessorOf(predecessor) {\n        // TODO Improve this! Lots of duplicate checks.\n        return (await this.isImmediateSuccessorOf(predecessor)) || (await this.isInterlinkSuccessorOf(predecessor));\n    }\n\n    /**\n     * @param {BigNumber} nextTarget\n     * @param {number} [nextVersion]\n     * @returns {Promise.<BlockInterlink>}\n     */\n    async getNextInterlink(nextTarget, nextVersion = BlockHeader.CURRENT_VERSION) {\n        /** @type {Array.<Hash>} */\n        const hashes = [];\n        const hash = this.hash();\n\n        // Compute how many times this blockHash should be included in the next interlink.\n        const thisPowDepth = BlockUtils.getHashDepth(await this.pow());\n        const nextTargetDepth = BlockUtils.getTargetDepth(nextTarget);\n        const numOccurrences = Math.max(thisPowDepth - nextTargetDepth + 1, 0);\n\n        // Push this blockHash numOccurrences times onto the next interlink.\n        for (let i = 0; i < numOccurrences; i++) {\n            hashes.push(hash);\n        }\n\n        // Compute how many blocks to omit from the beginning of this interlink.\n        const thisTargetDepth = BlockUtils.getTargetDepth(this.target);\n        const targetOffset = nextTargetDepth - thisTargetDepth;\n        const interlinkOffset = numOccurrences + targetOffset;\n\n        // Push the remaining hashes from this interlink.\n        for (let i = interlinkOffset; i < this.interlink.length; i++) {\n            hashes.push(this.interlink.hashes[i]);\n        }\n        \n        return new BlockInterlink(hashes, hash);\n    }\n\n    /**\n     * @returns {Block}\n     */\n    shallowCopy() {\n        return new Block(this._header, this._interlink, this._body);\n    }\n\n    /**\n     * @param {Block|*} o\n     * @returns {boolean}\n     */\n    equals(o) {\n        return o instanceof Block\n            && this._header.equals(o._header)\n            && this._interlink.equals(o._interlink)\n            && (this._body ? this._body.equals(o._body) : !o._body);\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isLight() {\n        return !this._body;\n    }\n\n    /**\n     * @returns {boolean}\n     */\n    isFull() {\n        return !!this._body;\n    }\n\n    /**\n     * @returns {Block}\n     */\n    toLight() {\n        return this.isLight() ? this : new Block(this._header, this._interlink);\n    }\n\n    /**\n     * @param {BlockBody} body\n     * @returns {Block}\n     */\n    toFull(body) {\n        return this.isFull() ? this : new Block(this._header, this._interlink, body);\n    }\n\n    /**\n     * @type {BlockHeader}\n     */\n    get header() {\n        return this._header;\n    }\n\n    /**\n     * @type {BlockInterlink}\n     */\n    get interlink() {\n        return this._interlink;\n    }\n\n    /**\n     * @type {BlockBody}\n     */\n    get body() {\n        if (this.isLight()) {\n            throw 'Cannot access body of light block';\n        }\n        return this._body;\n    }\n\n    /**\n     * @returns {number}\n     */\n    get version() {\n        return this._header.version;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get prevHash() {\n        return this._header.prevHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get bodyHash() {\n        return this._header.bodyHash;\n    }\n\n    /**\n     * @type {Hash}\n     */\n    get accountsHash() {\n        return this._header.accountsHash;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nBits() {\n        return this._header.nBits;\n    }\n\n    /**\n     * @type {BigNumber}\n     */\n    get target() {\n        return this._header.target;\n    }\n\n    /**\n     * @type {BigNumber}\n     */\n    get difficulty() {\n        return this._header.difficulty;\n    }\n\n    /**\n     * @type {number}\n     */\n    get height() {\n        return this._header.height;\n    }\n    \n    /**\n     * @type {number}\n     */\n    get timestamp() {\n        return this._header.timestamp;\n    }\n\n    /**\n     * @type {number}\n     */\n    get nonce() {\n        return this._header.nonce;\n    }\n\n    /**\n     * @type {Address}\n     */\n    get minerAddr() {\n        return this._body.minerAddr;\n    }\n\n    /**\n     * @type {Array.<Transaction>}\n     */\n    get transactions() {\n        return this._body.transactions;\n    }\n\n    /**\n     * @type {number}\n     */\n    get transactionCount() {\n        return this._body.transactionCount;\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Hash}\n     */\n    hash(buf) {\n        return this._header.hash(buf);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @returns {Promise.<Hash>}\n     */\n    pow(buf) {\n        return this._header.pow(buf);\n    }\n\n    toString() {\n        return `Block{height=${this.height},prev=${this.prevHash}}`;\n    }\n\n}\nBlock.TIMESTAMP_DRIFT_MAX = 600 /* seconds */; // 10 minutes\nClass.register(Block);\n","/**\n * @abstract\n */\nclass Transaction {\n    /**\n     * @param {Transaction.Format} format\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(format, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId = GenesisConfig.NETWORK_ID) {\n        if (!(sender instanceof Address)) throw new Error('Malformed sender');\n        if (!NumberUtils.isUint8(senderType)) throw new Error('Malformed sender type');\n        if (!(recipient instanceof Address)) throw new Error('Malformed recipient');\n        if (!NumberUtils.isUint8(recipientType)) throw new Error('Malformed recipient type');\n        if (!NumberUtils.isUint64(value) || value === 0) throw new Error('Malformed value');\n        if (!NumberUtils.isUint64(fee)) throw new Error('Malformed fee');\n        if (!NumberUtils.isUint32(validityStartHeight)) throw new Error('Malformed validityStartHeight');\n        if (!NumberUtils.isUint8(flags) && (flags & ~(Transaction.Flag.ALL)) > 0) throw new Error('Malformed flags');\n        if (!(data instanceof Uint8Array) || !(NumberUtils.isUint16(data.byteLength))) throw new Error('Malformed data');\n        if (proof && (!(proof instanceof Uint8Array) || !(NumberUtils.isUint16(proof.byteLength)))) throw new Error('Malformed proof');\n        if (!NumberUtils.isUint8(networkId)) throw new Error('Malformed networkId');\n\n        /** @type {Transaction.Format} */\n        this._format = format;\n        /** @type {Address} */\n        this._sender = sender;\n        /** @type {Account.Type} */\n        this._senderType = senderType;\n        /** @type {Address} */\n        this._recipient = recipient;\n        /** @type {Account.Type} */\n        this._recipientType = recipientType;\n        /** @type {number} */\n        this._value = value;\n        /** @type {number} */\n        this._fee = fee;\n        /** @type {number} */\n        this._networkId = networkId;\n        /** @type {number} */\n        this._validityStartHeight = validityStartHeight;\n        /** @type {Transaction.Flag | *} */\n        this._flags = flags;\n        /** @type {Uint8Array} */\n        this._data = data;\n        /** @type {Uint8Array} */\n        this._proof = proof;\n\n        if (this._recipient === Address.CONTRACT_CREATION) this._recipient = this.getContractCreationAddress();\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const format = /** @type {Transaction.Format} */ buf.readUint8();\n        buf.readPos--;\n\n        if (!Transaction.FORMAT_MAP.has(format)) throw new Error('Invalid transaction type');\n        return Transaction.FORMAT_MAP.get(format).unserialize(buf);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serializeContent(buf) {\n        buf = buf || new SerialBuffer(this.serializedContentSize);\n        buf.writeUint16(this._data.byteLength);\n        buf.write(this._data);\n        this._sender.serialize(buf);\n        buf.writeUint8(this._senderType);\n        this._recipient.serialize(buf);\n        buf.writeUint8(this._recipientType);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        buf.writeUint8(this._flags);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedContentSize() {\n        return /*dataSize*/ 2\n            + this._data.byteLength\n            + this._sender.serializedSize\n            + /*senderType*/ 1\n            + this._recipient.serializedSize\n            + /*recipientType*/ 1\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + /*flags*/ 1;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     */\n    verify(networkId) {\n        if (this._valid === undefined) {\n            this._valid = this._verify(networkId);\n        }\n        return this._valid;\n    }\n\n    /**\n     * @param {number} [networkId]\n     * @returns {boolean}\n     * @private\n     */\n    _verify(networkId = GenesisConfig.NETWORK_ID) {\n        if (this._networkId !== networkId) {\n            Log.w(Transaction, 'Transaction is not valid in this network', this);\n            return false;\n        }\n        // Check that sender != recipient.\n        if (this._recipient.equals(this._sender)) {\n            Log.w(Transaction, 'Sender and recipient must not match', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.has(this._senderType) || !Account.TYPE_MAP.has(this._recipientType)) {\n            Log.w(Transaction, 'Invalid account type', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._senderType).verifyOutgoingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for sender', this);\n            return false;\n        }\n        if (!Account.TYPE_MAP.get(this._recipientType).verifyIncomingTransaction(this)) {\n            Log.w(Transaction, 'Invalid for recipient', this);\n            return false;\n        }\n        return true;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        throw new Error('Getter needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        throw new Error('Method needs to be overwritten by subclasses');\n    }\n\n    /**\n     * @return {Hash}\n     */\n    hash() {\n        // Exclude the signature, we don't want transactions to be malleable.\n        this._hash = this._hash || Hash.light(this.serializeContent());\n        return this._hash;\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compare(o) {\n        if (this.fee / this.serializedSize > o.fee / o.serializedSize) return -1;\n        if (this.fee / this.serializedSize < o.fee / o.serializedSize) return 1;\n        if (this.serializedSize > o.serializedSize) return -1;\n        if (this.serializedSize < o.serializedSize) return 1;\n        if (this.fee > o.fee) return -1;\n        if (this.fee < o.fee) return 1;\n        if (this.value > o.value) return -1;\n        if (this.value < o.value) return 1;\n        return this.compareBlockOrder(o);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {number}\n     */\n    compareBlockOrder(o) {\n        // This function must return 0 iff this.equals(o).\n        const recCompare = this._recipient.compare(o._recipient);\n        if (recCompare !== 0) return recCompare;\n        if (this._validityStartHeight < o._validityStartHeight) return -1;\n        if (this._validityStartHeight > o._validityStartHeight) return 1;\n        if (this._fee > o._fee) return -1;\n        if (this._fee < o._fee) return 1;\n        if (this._value > o._value) return -1;\n        if (this._value < o._value) return 1;\n        const senderCompare = this._sender.compare(o._sender);\n        if (senderCompare !== 0) return senderCompare;\n        if (this._recipientType < o._recipientType) return -1;\n        if (this._recipientType > o._recipientType) return 1;\n        if (this._senderType < o._senderType) return -1;\n        if (this._senderType > o._senderType) return 1;\n        if (this._flags < o._flags) return -1;\n        if (this._flags > o._flags) return 1;\n        return BufferUtils.compare(this._data, o._data);\n    }\n\n    /**\n     * @param {Transaction} o\n     * @return {boolean}\n     */\n    equals(o) {\n        // This ignores format and proof to be consistent with hash():\n        //   tx1.hash() == tx2.hash() iff tx1.equals(t2)\n        return o instanceof Transaction\n            && this._sender.equals(o._sender)\n            && this._senderType === o._senderType\n            && this._recipient.equals(o._recipient)\n            && this._recipientType === o._recipientType\n            && this._value === o._value\n            && this._fee === o._fee\n            && this._validityStartHeight === o._validityStartHeight\n            && this._networkId === o._networkId\n            && this._flags === o._flags\n            && BufferUtils.equals(this._data, o._data);\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return `Transaction{`\n            + `sender=${this._sender.toBase64()}, `\n            + `recipient=${this._recipient.toBase64()}, `\n            + `value=${this._value}, `\n            + `fee=${this._fee}, `\n            + `validityStartHeight=${this._validityStartHeight}, `\n            + `networkId=${this._networkId}`\n            + `}`;\n    }\n\n    /**\n     * @return {Address}\n     */\n    getContractCreationAddress() {\n        const tx = Transaction.unserialize(this.serialize());\n        tx._recipient = Address.NULL;\n        tx._hash = null;\n        return Address.fromHash(tx.hash());\n    }\n\n    /** @type {Address} */\n    get sender() {\n        return this._sender;\n    }\n\n    /** @type {Account.Type} */\n    get senderType() {\n        return this._senderType;\n    }\n\n    /** @type {Address} */\n    get recipient() {\n        return this._recipient;\n    }\n\n    /** @type {Account.Type} */\n    get recipientType() {\n        return this._recipientType;\n    }\n\n    /** @type {number} */\n    get value() {\n        return this._value;\n    }\n\n    /** @type {number} */\n    get fee() {\n        return this._fee;\n    }\n\n    /** @type {number} */\n    get feePerByte() {\n        return this._fee / this.serializedSize;\n    }\n\n    /** @type {number} */\n    get networkId() {\n        return this._networkId;\n    }\n\n    /** @type {number} */\n    get validityStartHeight() {\n        return this._validityStartHeight;\n    }\n\n    /** @type {number} */\n    get flags() {\n        return this._flags;\n    }\n\n    /**\n     * @param {Transaction.Flag} flag\n     * @returns {boolean}\n     */\n    hasFlag(flag) {\n        return (this._flags & flag) > 0;\n    }\n\n    /** @type {Uint8Array} */\n    get data() {\n        return this._data;\n    }\n\n    /** @type {Uint8Array} */\n    get proof() {\n        return this._proof;\n    }\n\n    // Sender proof is set by the Wallet after signing a transaction.\n    /** @type {Uint8Array} */\n    set proof(proof) {\n        this._proof = proof;\n    }\n}\n\n/**\n * Enum for Transaction formats.\n * @enum\n */\nTransaction.Format = {\n    BASIC: 0,\n    EXTENDED: 1\n};\n/**\n * @enum\n */\nTransaction.Flag = {\n    NONE: 0,\n    CONTRACT_CREATION: 0b1,\n    ALL: 0b1\n};\n/** @type {Map.<Transaction.Format, {unserialize: function(buf: SerialBuffer):Transaction}>} */\nTransaction.FORMAT_MAP = new Map();\n\nClass.register(Transaction);\n","class SignatureProof {\n    /**\n     * @param {Transaction} transaction\n     * @returns {boolean}\n     */\n    static verifyTransaction(transaction) {\n        try {\n            const buffer = new SerialBuffer(transaction.proof);\n            const proof = SignatureProof.unserialize(buffer);\n\n            // Reject proof if it is longer than needed.\n            if (buffer.readPos !== buffer.byteLength) {\n                Log.w(SignatureProof, 'Invalid SignatureProof - overlong');\n                return false;\n            }\n\n            return proof.verify(transaction.sender, transaction.serializeContent());\n        } catch (e) {\n            Log.w(SignatureProof, `Failed to verify transaction: ${e.message || e}`, e);\n            return false;\n        }\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static singleSig(publicKey, signature) {\n        return new SignatureProof(publicKey, new MerklePath([]), signature);\n    }\n\n    /**\n     * @param {PublicKey} signerKey\n     * @param {Array.<PublicKey>} publicKeys\n     * @param {Signature} signature\n     * @returns {SignatureProof}\n     */\n    static multiSig(signerKey, publicKeys, signature) {\n        const merklePath = MerklePath.compute(publicKeys, signerKey);\n        return new SignatureProof(signerKey, merklePath, signature);\n    }\n\n    /**\n     * @param {PublicKey} publicKey\n     * @param {MerklePath} merklePath\n     * @param {Signature} signature\n     */\n    constructor(publicKey, merklePath, signature) {\n        if (!(publicKey instanceof PublicKey)) throw new Error('Malformed publickKey');\n        if (!(merklePath instanceof MerklePath)) throw new Error('Malformed merklePath');\n        if (signature && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        /**\n         * @type {PublicKey}\n         * @private\n         */\n        this._publicKey = publicKey;\n        /**\n         * @type {MerklePath}\n         * @private\n         */\n        this._merklePath = merklePath;\n        /**\n         * @type {Signature}\n         * @private\n         */\n        this._signature = signature;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {SignatureProof}\n     */\n    static unserialize(buf) {\n        const publicKey = PublicKey.unserialize(buf);\n        const merklePath = MerklePath.unserialize(buf);\n        const signature = Signature.unserialize(buf);\n        return new SignatureProof(publicKey, merklePath, signature);\n    }\n\n    /**\n     * @param {SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        this._publicKey.serialize(buf);\n        this._merklePath.serialize(buf);\n\n        // The SignatureProof is sometimes serialized before the signature is set (e.g. when creating transactions).\n        // Simply don't serialize the signature if it's missing as this should never go over the wire.\n        // We always expect the signature to be present when unserializing.\n        if (this._signature) {\n            this._signature.serialize(buf);\n        }\n\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return this._publicKey.serializedSize\n            + this._merklePath.serializedSize\n            + (this._signature ? this._signature.serializedSize : 0);\n    }\n\n    /**\n     * @param {SignatureProof} o\n     * @return {boolean}\n     */\n    equals(o) {\n        return o instanceof SignatureProof\n            && this._publicKey.equals(o._publicKey)\n            && this._merklePath.equals(o._merklePath)\n            && (this._signature ? this._signature.equals(o._signature) : this._signature === o._signature);\n    }\n\n    /**\n     * @param {?Address} sender\n     * @param {Uint8Array} data\n     * @returns {boolean}\n     */\n    verify(sender, data) {\n        if (sender !== null && !this.isSignedBy(sender)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signer does not match sender address');\n            return false;\n        }\n\n        if (!this._signature) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is missing');\n            return false;\n        }\n\n        if (!this._signature.verify(this._publicKey, data)) {\n            Log.w(SignatureProof, 'Invalid SignatureProof - signature is invalid');\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param {Address} sender\n     * @returns {boolean}\n     */\n    isSignedBy(sender) {\n        const merkleRoot = this._merklePath.computeRoot(this._publicKey);\n        const signerAddr = Address.fromHash(merkleRoot);\n        return signerAddr.equals(sender);\n    }\n\n    /** @type {PublicKey} */\n    get publicKey() {\n        return this._publicKey;\n    }\n\n    /** @type {MerklePath} */\n    get merklePath() {\n        return this._merklePath;\n    }\n\n    /** @type {Signature} */\n    get signature() {\n        return this._signature;\n    }\n\n    /** @type {Signature} */\n    set signature(signature) {\n        this._signature = signature;\n    }\n}\n\nClass.register(SignatureProof);\n","class BasicTransaction extends Transaction {\n    /**\n     * @param {PublicKey} senderPubKey\n     * @param {Address} recipient\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Signature} [signature]\n     * @param {number} [networkId]\n     */\n    constructor(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId) {\n        if (!(senderPubKey instanceof PublicKey)) throw new Error('Malformed senderPubKey');\n        // Signature may be initially empty and can be set later.\n        if (signature !== undefined && !(signature instanceof Signature)) throw new Error('Malformed signature');\n\n        const proof = SignatureProof.singleSig(senderPubKey, signature);\n        super(Transaction.Format.BASIC, senderPubKey.toAddress(), Account.Type.BASIC, recipient, Account.Type.BASIC, value, fee, validityStartHeight, Transaction.Flag.NONE, new Uint8Array(0), proof.serialize(), networkId);\n\n        /**\n         * @type {SignatureProof}\n         * @private\n         */\n        this._signatureProof = proof;\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = buf.readUint8();\n        Assert.that(type === Transaction.Format.BASIC);\n\n        const senderPubKey = PublicKey.unserialize(buf);\n        const recipient = Address.unserialize(buf);\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const signature = Signature.unserialize(buf);\n        return new BasicTransaction(senderPubKey, recipient, value, fee, validityStartHeight, signature, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.BASIC);\n        this.senderPubKey.serialize(buf);\n        this._recipient.serialize(buf);\n        buf.writeUint64(this._value);\n        buf.writeUint64(this._fee);\n        buf.writeUint32(this._validityStartHeight);\n        buf.writeUint8(this._networkId);\n        this.signature.serialize(buf);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.senderPubKey.serializedSize\n            + this._recipient.serializedSize\n            + /*value*/ 8\n            + /*fee*/ 8\n            + /*validityStartHeight*/ 4\n            + /*networkId*/ 1\n            + this.signature.serializedSize;\n    }\n\n    /**\n     * @type {PublicKey}\n     */\n    get senderPubKey() {\n        return this._signatureProof.publicKey;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    get signature() {\n        return this._signatureProof.signature;\n    }\n\n    /**\n     * @type {Signature}\n     */\n    set signature(signature) {\n        this._signatureProof.signature = signature;\n        this._proof = this._signatureProof.serialize();\n    }\n}\nTransaction.FORMAT_MAP.set(Transaction.Format.BASIC, BasicTransaction);\nClass.register(BasicTransaction);\n","class ExtendedTransaction extends Transaction {\n\n    /**\n     * @param {Address} sender\n     * @param {Account.Type} senderType\n     * @param {Address} recipient\n     * @param {Account.Type} recipientType\n     * @param {number} value\n     * @param {number} fee\n     * @param {number} validityStartHeight\n     * @param {Transaction.Flag | *} flags\n     * @param {Uint8Array} data\n     * @param {Uint8Array} [proof]\n     * @param {number} [networkId]\n     */\n    constructor(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof = new Uint8Array(0), networkId) {\n        super(Transaction.Format.EXTENDED, sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {SerialBuffer} buf\n     * @return {Transaction}\n     */\n    static unserialize(buf) {\n        const type = /** @type {Transaction.Format} */ buf.readUint8();\n        Assert.that(type === Transaction.Format.EXTENDED);\n\n        const dataSize = buf.readUint16();\n        const data = buf.read(dataSize);\n        const sender = Address.unserialize(buf);\n        const senderType = /** @type {Account.Type} */ buf.readUint8();\n        const recipient = Address.unserialize(buf);\n        const recipientType = /** @type {Account.Type} */ buf.readUint8();\n        const value = buf.readUint64();\n        const fee = buf.readUint64();\n        const validityStartHeight = buf.readUint32();\n        const networkId = buf.readUint8();\n        const flags = buf.readUint8();\n        const proofSize = buf.readUint16();\n        const proof = buf.read(proofSize);\n        return new ExtendedTransaction(sender, senderType, recipient, recipientType, value, fee, validityStartHeight, flags, data, proof, networkId);\n    }\n\n    /**\n     * @param {?SerialBuffer} [buf]\n     * @return {SerialBuffer}\n     */\n    serialize(buf) {\n        buf = buf || new SerialBuffer(this.serializedSize);\n        buf.writeUint8(Transaction.Format.EXTENDED);\n        this.serializeContent(buf);\n        buf.writeUint16(this._proof.byteLength);\n        buf.write(this._proof);\n        return buf;\n    }\n\n    /** @type {number} */\n    get serializedSize() {\n        return /*type*/ 1\n            + this.serializedContentSize\n            + /*proofSize*/ 2\n            + this._proof.byteLength;\n    }\n}\n\nTransaction.FORMAT_MAP.set(Transaction.Format.EXTENDED, ExtendedTransaction);\nClass.register(ExtendedTransaction);\n"]}